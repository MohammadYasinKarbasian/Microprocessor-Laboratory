
AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\2\assignment\code\Debug\List\main.asm Sat Apr 15 19:31:02 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x20014:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 
                 ; 0000 0006 q3(5,400);
00004a e0e5      	LDI  R30,LOW(5)
00004b e0f0      	LDI  R31,HIGH(5)
00004c 93fa      	ST   -Y,R31
00004d 93ea      	ST   -Y,R30
00004e e9a0      	LDI  R26,LOW(400)
00004f e0b1      	LDI  R27,HIGH(400)
000050 d059      	RCALL _q3
                 ; 0000 0007 
                 ; 0000 0008 while (1)
                 _0x3:
                 ; 0000 0009       {
                 ; 0000 000A           q4();
000051 d078      	RCALL _q4
                 ; 0000 000B           q5(2300,port_d, port_c);
000052 efec      	LDI  R30,LOW(2300)
000053 e0f8      	LDI  R31,HIGH(2300)
000054 93fa      	ST   -Y,R31
000055 93ea      	ST   -Y,R30
000056 e0e4      	LDI  R30,LOW(4)
000057 93ea      	ST   -Y,R30
000058 e0a3      	LDI  R26,LOW(3)
000059 d07a      	RCALL _q5
                 ; 0000 000C       }
00005a cff6      	RJMP _0x3
                 ; 0000 000D }
                 _0x6:
00005b cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char q1(char in_port){
                 ; 0001 0003 char q1(char in_port){
                 
                 	.CSEG
                 _q1:
                 ; .FSTART _q1
                 ; 0001 0004  char data_in;
                 ; 0001 0005  switch (in_port){
00005c 93aa      	ST   -Y,R26
00005d 931a      	ST   -Y,R17
                 ;	in_port -> Y+1
                 ;	data_in -> R17
00005e 81e9      	LDD  R30,Y+1
00005f e0f0      	LDI  R31,0
                 ; 0001 0006   case(port_a):
000060 30e1      	CPI  R30,LOW(0x1)
000061 e0a0      	LDI  R26,HIGH(0x1)
000062 07fa      	CPC  R31,R26
000063 f421      	BRNE _0x20006
                 ; 0001 0007     DDRA = 0x00;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbea      	OUT  0x1A,R30
                 ; 0001 0008     data_in = PINA;
000066 b319      	IN   R17,25
                 ; 0001 0009     break;
000067 c017      	RJMP _0x20005
                 ; 0001 000A   case(port_b):
                 _0x20006:
000068 30e2      	CPI  R30,LOW(0x2)
000069 e0a0      	LDI  R26,HIGH(0x2)
00006a 07fa      	CPC  R31,R26
00006b f421      	BRNE _0x20007
                 ; 0001 000B     DDRB = 0x00;
00006c e0e0      	LDI  R30,LOW(0)
00006d bbe7      	OUT  0x17,R30
                 ; 0001 000C     data_in = PINB;
00006e b316      	IN   R17,22
                 ; 0001 000D     break;
00006f c00f      	RJMP _0x20005
                 ; 0001 000E   case(port_c):
                 _0x20007:
000070 30e3      	CPI  R30,LOW(0x3)
000071 e0a0      	LDI  R26,HIGH(0x3)
000072 07fa      	CPC  R31,R26
000073 f421      	BRNE _0x20008
                 ; 0001 000F     DDRC = 0x00;
000074 e0e0      	LDI  R30,LOW(0)
000075 bbe4      	OUT  0x14,R30
                 ; 0001 0010     data_in = PINC;
000076 b313      	IN   R17,19
                 ; 0001 0011     break;
000077 c007      	RJMP _0x20005
                 ; 0001 0012   case(port_d):
                 _0x20008:
000078 30e4      	CPI  R30,LOW(0x4)
000079 e0a0      	LDI  R26,HIGH(0x4)
00007a 07fa      	CPC  R31,R26
00007b f419      	BRNE _0x20005
                 ; 0001 0013     DDRD = 0x00;
00007c e0e0      	LDI  R30,LOW(0)
00007d bbe1      	OUT  0x11,R30
                 ; 0001 0014     data_in = PIND;
00007e b310      	IN   R17,16
                 ; 0001 0015     break;
                 ; 0001 0016  }
                 _0x20005:
                 ; 0001 0017  return data_in;
00007f 2fe1      	MOV  R30,R17
000080 8118      	LDD  R17,Y+0
000081 c026      	RJMP _0x2000001
                 ; 0001 0018 }
                 ; .FEND
                 ;
                 ;void q2(char out_port, char data){
                 ; 0001 001A void q2(char out_port, char data){
                 _q2:
                 ; .FSTART _q2
                 ; 0001 001B  switch (out_port){
000082 93aa      	ST   -Y,R26
                 ;	out_port -> Y+1
                 ;	data -> Y+0
000083 81e9      	LDD  R30,Y+1
000084 e0f0      	LDI  R31,0
                 ; 0001 001C   case(port_a):
000085 30e1      	CPI  R30,LOW(0x1)
000086 e0a0      	LDI  R26,HIGH(0x1)
000087 07fa      	CPC  R31,R26
000088 f429      	BRNE _0x2000D
                 ; 0001 001D     DDRA = 0xFF;
000089 efef      	LDI  R30,LOW(255)
00008a bbea      	OUT  0x1A,R30
                 ; 0001 001E     PORTA = data;
00008b 81e8      	LD   R30,Y
00008c bbeb      	OUT  0x1B,R30
                 ; 0001 001F     break;
00008d c01a      	RJMP _0x2000C
                 ; 0001 0020   case(port_b):
                 _0x2000D:
00008e 30e2      	CPI  R30,LOW(0x2)
00008f e0a0      	LDI  R26,HIGH(0x2)
000090 07fa      	CPC  R31,R26
000091 f429      	BRNE _0x2000E
                 ; 0001 0021     DDRB = 0xFF;
000092 efef      	LDI  R30,LOW(255)
000093 bbe7      	OUT  0x17,R30
                 ; 0001 0022     PORTB = data;
000094 81e8      	LD   R30,Y
000095 bbe8      	OUT  0x18,R30
                 ; 0001 0023     break;
000096 c011      	RJMP _0x2000C
                 ; 0001 0024   case(port_c):
                 _0x2000E:
000097 30e3      	CPI  R30,LOW(0x3)
000098 e0a0      	LDI  R26,HIGH(0x3)
000099 07fa      	CPC  R31,R26
00009a f429      	BRNE _0x2000F
                 ; 0001 0025     DDRC = 0xFF;
00009b efef      	LDI  R30,LOW(255)
00009c bbe4      	OUT  0x14,R30
                 ; 0001 0026     PORTC = data;
00009d 81e8      	LD   R30,Y
00009e bbe5      	OUT  0x15,R30
                 ; 0001 0027     break;
00009f c008      	RJMP _0x2000C
                 ; 0001 0028   case(port_d):
                 _0x2000F:
0000a0 30e4      	CPI  R30,LOW(0x4)
0000a1 e0a0      	LDI  R26,HIGH(0x4)
0000a2 07fa      	CPC  R31,R26
0000a3 f421      	BRNE _0x2000C
                 ; 0001 0029     DDRD = 0xFF;
0000a4 efef      	LDI  R30,LOW(255)
0000a5 bbe1      	OUT  0x11,R30
                 ; 0001 002A     PORTD = data;
0000a6 81e8      	LD   R30,Y
0000a7 bbe2      	OUT  0x12,R30
                 ; 0001 002B     break;
                 ; 0001 002C  }
                 _0x2000C:
                 ; 0001 002D }
                 _0x2000001:
0000a8 9622      	ADIW R28,2
0000a9 9508      	RET
                 ; .FEND
                 ;
                 ;void q3(int count, int delay){
                 ; 0001 002F void q3(int count, int delay){
                 _q3:
                 ; .FSTART _q3
                 ; 0001 0030  int i;
                 ; 0001 0031  for(i=0;i<count;i++){
0000aa 93ba      	ST   -Y,R27
0000ab 93aa      	ST   -Y,R26
0000ac 931a      	ST   -Y,R17
0000ad 930a      	ST   -Y,R16
                 ;	count -> Y+4
                 ;	delay -> Y+2
                 ;	i -> R16,R17
                +
0000ae e000     +LDI R16 , LOW ( 0 )
0000af e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20012:
0000b0 81ec      	LDD  R30,Y+4
0000b1 81fd      	LDD  R31,Y+4+1
0000b2 170e      	CP   R16,R30
0000b3 071f      	CPC  R17,R31
0000b4 f48c      	BRGE _0x20013
                 ; 0001 0032     q2(port_b,0xFF);
0000b5 e0e2      	LDI  R30,LOW(2)
0000b6 d076      	RCALL SUBOPT_0x0
                 ; 0001 0033     delay_ms(delay);
0000b7 81aa      	LDD  R26,Y+2
0000b8 81bb      	LDD  R27,Y+2+1
0000b9 940e 0141 	CALL _delay_ms
                 ; 0001 0034     q2(port_b, 0x00);
0000bb e0e2      	LDI  R30,LOW(2)
0000bc 93ea      	ST   -Y,R30
0000bd e0a0      	LDI  R26,LOW(0)
0000be dfc3      	RCALL _q2
                 ; 0001 0035     delay_ms(delay);
0000bf 81aa      	LDD  R26,Y+2
0000c0 81bb      	LDD  R27,Y+2+1
0000c1 940e 0141 	CALL _delay_ms
                 ; 0001 0036 
                 ; 0001 0037  }
                +
0000c3 5f0f     +SUBI R16 , LOW ( - 1 )
0000c4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c5 cfea      	RJMP _0x20012
                 _0x20013:
                 ; 0001 0038 }
0000c6 8119      	LDD  R17,Y+1
0000c7 8108      	LDD  R16,Y+0
0000c8 9626      	ADIW R28,6
0000c9 9508      	RET
                 ; .FEND
                 ;
                 ;void q4(){
                 ; 0001 003A void q4(){
                 _q4:
                 ; .FSTART _q4
                 ; 0001 003B  char data = q1(port_a);
                 ; 0001 003C  q2(port_b,data);
0000ca 931a      	ST   -Y,R17
                 ;	data -> R17
0000cb e0a1      	LDI  R26,LOW(1)
0000cc df8f      	RCALL _q1
0000cd 2f1e      	MOV  R17,R30
0000ce e0e2      	LDI  R30,LOW(2)
0000cf 93ea      	ST   -Y,R30
0000d0 2fa1      	MOV  R26,R17
0000d1 dfb0      	RCALL _q2
                 ; 0001 003D }
0000d2 9119      	LD   R17,Y+
0000d3 9508      	RET
                 ; .FEND
                 ;
                 ;void q5(int data, char enable_port, char data_port){
                 ; 0001 003F void q5(int data, char enable_port, char data_port){
                 _q5:
                 ; .FSTART _q5
                 ; 0001 0040  unsigned char digit [10] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 ; 0001 0041  int i;
                 ; 0001 0042  for(i=0;i<5;i++){
0000d4 93aa      	ST   -Y,R26
0000d5 972a      	SBIW R28,10
0000d6 e08a      	LDI  R24,10
0000d7 e0a0      	LDI  R26,LOW(0)
0000d8 e0b0      	LDI  R27,HIGH(0)
0000d9 e5e4      	LDI  R30,LOW(_0x20014*2)
0000da e0f0      	LDI  R31,HIGH(_0x20014*2)
0000db 940e 0183 	CALL __INITLOCB
0000dd 931a      	ST   -Y,R17
0000de 930a      	ST   -Y,R16
                 ;	data -> Y+14
                 ;	enable_port -> Y+13
                 ;	data_port -> Y+12
                 ;	digit -> Y+2
                 ;	i -> R16,R17
                +
0000df e000     +LDI R16 , LOW ( 0 )
0000e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20016:
                +
0000e1 3005     +CPI R16 , LOW ( 5 )
0000e2 e0e0     +LDI R30 , HIGH ( 5 )
0000e3 071e     +CPC R17 , R30
                 	__CPWRN 16,17,5
0000e4 f00c      	BRLT PC+2
0000e5 c043      	RJMP _0x20017
                 ; 0001 0043 
                 ; 0001 0044 
                 ; 0001 0045  char a = data/1000;
                 ; 0001 0046  char b = (data%1000)/100;
                 ; 0001 0047  char c = (data%100)/10;
                 ; 0001 0048  char d = data%10;
                 ; 0001 0049 
                 ; 0001 004A 
                 ; 0001 004B  q2(enable_port,0b11111110);
0000e6 9724      	SBIW R28,4
                 ;	data -> Y+18
                 ;	enable_port -> Y+17
                 ;	data_port -> Y+16
                 ;	digit -> Y+6
                 ;	a -> Y+3
                 ;	b -> Y+2
                 ;	c -> Y+1
                 ;	d -> Y+0
0000e7 89aa      	LDD  R26,Y+18
0000e8 89bb      	LDD  R27,Y+18+1
0000e9 eee8      	LDI  R30,LOW(1000)
0000ea e0f3      	LDI  R31,HIGH(1000)
0000eb 940e 0162 	CALL __DIVW21
0000ed 83eb      	STD  Y+3,R30
0000ee 89aa      	LDD  R26,Y+18
0000ef 89bb      	LDD  R27,Y+18+1
0000f0 eee8      	LDI  R30,LOW(1000)
0000f1 e0f3      	LDI  R31,HIGH(1000)
0000f2 940e 0167 	CALL __MODW21
0000f4 01df      	MOVW R26,R30
0000f5 e6e4      	LDI  R30,LOW(100)
0000f6 e0f0      	LDI  R31,HIGH(100)
0000f7 940e 0162 	CALL __DIVW21
0000f9 83ea      	STD  Y+2,R30
0000fa 89aa      	LDD  R26,Y+18
0000fb 89bb      	LDD  R27,Y+18+1
0000fc e6e4      	LDI  R30,LOW(100)
0000fd e0f0      	LDI  R31,HIGH(100)
0000fe 940e 0167 	CALL __MODW21
000100 01df      	MOVW R26,R30
000101 e0ea      	LDI  R30,LOW(10)
000102 e0f0      	LDI  R31,HIGH(10)
000103 940e 0162 	CALL __DIVW21
000105 83e9      	STD  Y+1,R30
000106 89aa      	LDD  R26,Y+18
000107 89bb      	LDD  R27,Y+18+1
000108 e0ea      	LDI  R30,LOW(10)
000109 e0f0      	LDI  R31,HIGH(10)
00010a 940e 0167 	CALL __MODW21
00010c 83e8      	ST   Y,R30
00010d 89e9      	LDD  R30,Y+17
00010e 93ea      	ST   -Y,R30
00010f efae      	LDI  R26,LOW(254)
000110 d01f      	RCALL SUBOPT_0x1
                 ; 0001 004C  q2(data_port, digit[a]);
000111 81ec      	LDD  R30,Y+4
000112 d021      	RCALL SUBOPT_0x2
                 ; 0001 004D  delay_ms(10);
                 ; 0001 004E  q2(enable_port,0b11111111);
                 ; 0001 004F 
                 ; 0001 0050 
                 ; 0001 0051  q2(enable_port,0b11111101);
000113 89e9      	LDD  R30,Y+17
000114 93ea      	ST   -Y,R30
000115 efad      	LDI  R26,LOW(253)
000116 d019      	RCALL SUBOPT_0x1
                 ; 0001 0052  q2(data_port, digit[b]);
000117 81eb      	LDD  R30,Y+3
000118 d01b      	RCALL SUBOPT_0x2
                 ; 0001 0053  delay_ms(10);
                 ; 0001 0054  q2(enable_port,0b11111111);
                 ; 0001 0055 
                 ; 0001 0056 
                 ; 0001 0057  q2(enable_port,0b11111011);
000119 89e9      	LDD  R30,Y+17
00011a 93ea      	ST   -Y,R30
00011b efab      	LDI  R26,LOW(251)
00011c d013      	RCALL SUBOPT_0x1
                 ; 0001 0058  q2(data_port, digit[c]);
00011d 81ea      	LDD  R30,Y+2
00011e d015      	RCALL SUBOPT_0x2
                 ; 0001 0059  delay_ms(10);
                 ; 0001 005A  q2(enable_port,0b11111111);
                 ; 0001 005B 
                 ; 0001 005C  q2(enable_port,0b11110111);
00011f 89e9      	LDD  R30,Y+17
000120 93ea      	ST   -Y,R30
000121 efa7      	LDI  R26,LOW(247)
000122 d00d      	RCALL SUBOPT_0x1
                 ; 0001 005D  q2(data_port, digit[d]);
000123 81e9      	LDD  R30,Y+1
000124 d00f      	RCALL SUBOPT_0x2
                 ; 0001 005E  delay_ms(10);
                 ; 0001 005F  q2(enable_port,0b11111111);
                 ; 0001 0060 
                 ; 0001 0061 }
000125 9624      	ADIW R28,4
                +
000126 5f0f     +SUBI R16 , LOW ( - 1 )
000127 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000128 cfb8      	RJMP _0x20016
                 _0x20017:
                 ; 0001 0062 }
000129 8119      	LDD  R17,Y+1
00012a 8108      	LDD  R16,Y+0
00012b 9660      	ADIW R28,16
00012c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00012d 93ea      	ST   -Y,R30
00012e efaf      	LDI  R26,LOW(255)
00012f cf52      	RJMP _q2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000130 df51      	RCALL _q2
000131 89e8      	LDD  R30,Y+16
000132 93ea      	ST   -Y,R30
000133 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:36 WORDS
                 SUBOPT_0x2:
000134 e0f0      	LDI  R31,0
000135 01de      	MOVW R26,R28
000136 9617      	ADIW R26,7
000137 0fae      	ADD  R26,R30
000138 1fbf      	ADC  R27,R31
000139 91ac      	LD   R26,X
00013a df47      	RCALL _q2
00013b e0aa      	LDI  R26,LOW(10)
00013c e0b0      	LDI  R27,0
00013d 940e 0141 	CALL _delay_ms
00013f 89e9      	LDD  R30,Y+17
000140 cfec      	RJMP SUBOPT_0x0
                 
                 
                 	.CSEG
                 _delay_ms:
000141 9610      	adiw r26,0
000142 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000143 ed80     +LDI R24 , LOW ( 0x7D0 )
000144 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000145 9701     +SBIW R24 , 1
000146 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000147 95a8      	wdr
000148 9711      	sbiw r26,1
000149 f7c9      	brne __delay_ms0
                 __delay_ms1:
00014a 9508      	ret
                 
                 __ANEGW1:
00014b 95f1      	NEG  R31
00014c 95e1      	NEG  R30
00014d 40f0      	SBCI R31,0
00014e 9508      	RET
                 
                 __DIVW21U:
00014f 2400      	CLR  R0
000150 2411      	CLR  R1
000151 e190      	LDI  R25,16
                 __DIVW21U1:
000152 0faa      	LSL  R26
000153 1fbb      	ROL  R27
000154 1c00      	ROL  R0
000155 1c11      	ROL  R1
000156 1a0e      	SUB  R0,R30
000157 0a1f      	SBC  R1,R31
000158 f418      	BRCC __DIVW21U2
000159 0e0e      	ADD  R0,R30
00015a 1e1f      	ADC  R1,R31
00015b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00015c 60a1      	SBR  R26,1
                 __DIVW21U3:
00015d 959a      	DEC  R25
00015e f799      	BRNE __DIVW21U1
00015f 01fd      	MOVW R30,R26
000160 01d0      	MOVW R26,R0
000161 9508      	RET
                 
                 __DIVW21:
000162 d012      	RCALL __CHKSIGNW
000163 dfeb      	RCALL __DIVW21U
000164 f40e      	BRTC __DIVW211
000165 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000166 9508      	RET
                 
                 __MODW21:
000167 94e8      	CLT
000168 ffb7      	SBRS R27,7
000169 c004      	RJMP __MODW211
00016a 95a0      	COM  R26
00016b 95b0      	COM  R27
00016c 9611      	ADIW R26,1
00016d 9468      	SET
                 __MODW211:
00016e fdf7      	SBRC R31,7
00016f dfdb      	RCALL __ANEGW1
000170 dfde      	RCALL __DIVW21U
000171 01fd      	MOVW R30,R26
000172 f40e      	BRTC __MODW212
000173 dfd7      	RCALL __ANEGW1
                 __MODW212:
000174 9508      	RET
                 
                 __CHKSIGNW:
000175 94e8      	CLT
000176 fff7      	SBRS R31,7
000177 c002      	RJMP __CHKSW1
000178 dfd2      	RCALL __ANEGW1
000179 9468      	SET
                 __CHKSW1:
00017a ffb7      	SBRS R27,7
00017b c006      	RJMP __CHKSW2
00017c 95a0      	COM  R26
00017d 95b0      	COM  R27
00017e 9611      	ADIW R26,1
00017f f800      	BLD  R0,0
000180 9403      	INC  R0
000181 fa00      	BST  R0,0
                 __CHKSW2:
000182 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000183 0fac      	ADD  R26,R28
000184 1fbd      	ADC  R27,R29
                 __INITLOC0:
000185 9005      	LPM  R0,Z+
000186 920d      	ST   X+,R0
000187 958a      	DEC  R24
000188 f7e1      	BRNE __INITLOC0
000189 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  10 r1 :   4 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  10 r17:  21 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   4 r26:  58 r27:  18 r28:   9 r29:   2 r30:  96 r31:  33 
x  :   4 y  :  64 z  :   1 
Registers used: 15 out of 35 (42.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   8 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  14 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  10 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   1 cpc   :  10 cpi   :   9 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  22 ld    :   6 ldd   :  31 ldi   :  74 
lds   :   0 lpm   :   1 lsl   :   1 lsr   :   0 mov   :   3 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  18 pop   :   0 push  :   0 rcall :  24 ret   :  12 
reti  :   0 rjmp  :  18 rol   :   3 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   3 sts   :   0 sub   :   1 subi  :   2 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000314    778     10    788   16384   4.8%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings

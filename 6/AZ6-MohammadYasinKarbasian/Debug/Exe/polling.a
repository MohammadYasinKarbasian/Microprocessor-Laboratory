;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void q1()
; 0002 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0005         long int cache;
; 0002 0006         int data[8];
; 0002 0007         char string[16];
; 0002 0008         int index;
; 0002 0009         int v;
; 0002 000A         for (index = FIRST_ADC_INPUT; index <= LAST_ADC_INPUT; index++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	cache -> Y+36
;	data -> Y+20
;	string -> Y+4
;	index -> R16,R17
;	v -> R18,R19
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 000B         {
; 0002 000C                 lcd_gotoxy(0, 0);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0002 000D                 lcd_puts("Question 1");
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 000E                 data[index] = read_adc(index);
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0002 000F                 cache = (long)data[index] * 5000;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0002 0010                 v = cache / 1024;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 0011                 lcd_gotoxy(0, 1);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 0012                 sprintf(string, "ADC[%d] = %dmv", index, v);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0002 0013                 lcd_puts(string);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0002 0014                 delay_ms(1000);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0002 0015                 lcd_clear();
;PCODE: $0000004E VOL: 0
; 0002 0016         }
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0002 0017 }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0

	.DSEG
_0x40006:
	.BYTE 0xB
;
;unsigned int read_adc(unsigned char adc_input)
; 0002 001A {

	.CSEG
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0002 001B         ADMUX = adc_input | ADC_VREF_TYPE;
;PCODE: $0000005A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0002 001C         delay_us(10);
;PCODE: $0000005E VOL: 0
; 0002 001D         ADCSRA |= (1 << ADSC);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0002 001E         while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 001F                 ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0002 0020         ADCSRA |= (1 << ADIF);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0002 0021         return ADCW;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0002 0022 }
;PCODE: $0000006C VOL: 0
;
;void init_q1()
; 0002 0025 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0002 0026         ADMUX = ADC_VREF_TYPE;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0027         ADCSRA = (1 << ADEN) | (0 << ADSC) | (1 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 ...
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 0028         SFIOR = (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0002 0029 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;void init()
; 0002 002C {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0002 002D         DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << D ...
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0002 002E         PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PO ...
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0002 002F         DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (1 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << D ...
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 0030         PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PO ...
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0002 0031         DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << D ...
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0002 0032         PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PO ...
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0002 0033         DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << D ...
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 0034         PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PO ...
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0002 0035         lcd_init(16);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 0036 }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0


AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm Fri Apr 21 13:03:39 2023

C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0055 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 00bf 	JMP  _timer2_ovf_isr
00000a 940c 00bb 	JMP  _timer1_capt_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00b5 	JMP  _timer1_ovf_isr
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1128): warning: .cseg .db misalignment - padding zero byte
000033 0001      	.DB  0x1
                 _0x4:
C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1130): warning: .cseg .db misalignment - padding zero byte
000034 0001      	.DB  0x1
                 _0x20000:
000035 6425
000036 2000
000037 2020
000038 2020      	.DB  0x25,0x64,0x0,0x20,0x20,0x20,0x20,0x20
000039 2020
00003a 0020
00003b 5052
00003c 004d      	.DB  0x20,0x20,0x20,0x0,0x52,0x50,0x4D,0x0
00003d 4344
00003e 203a
00003f 6425
C:\Users\mykar\Downloads\IUT\Micro lab\5\Lab5-mohammad-yasin-karbasian-9928883\Debug\List\5.asm(1134): warning: .cseg .db misalignment - padding zero byte
000040 0000      	.DB  0x44,0x43,0x3A,0x20,0x25,0x64,0x0
                 _0x2000003:
000041 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000042 0001      	.DW  0x01
000043 0176      	.DW  _clockwies
000044 0066      	.DW  _0x3*2
                 
000045 0001      	.DW  0x01
000046 0177      	.DW  _turn
000047 0068      	.DW  _0x4*2
                 
000048 0009      	.DW  0x09
000049 0160      	.DW  _0x2001B
00004a 006d      	.DW  _0x20000*2+3
                 
00004b 0004      	.DW  0x04
00004c 0169      	.DW  _0x2001B+9
00004d 0076      	.DW  _0x20000*2+12
                 
00004e 0009      	.DW  0x09
00004f 016d      	.DW  _0x20021
000050 006d      	.DW  _0x20000*2+3
                 
000051 0002      	.DW  0x02
000052 0185      	.DW  __base_y_G100
000053 0082      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000054 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000055 94f8      	CLI
000056 27ee      	CLR  R30
000057 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000058 e0f1      	LDI  R31,1
000059 bffb      	OUT  GICR,R31
00005a bfeb      	OUT  GICR,R30
00005b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005c e08d      	LDI  R24,(14-2)+1
00005d e0a2      	LDI  R26,2
00005e 27bb      	CLR  R27
                 __CLEAR_REG:
00005f 93ed      	ST   X+,R30
000060 958a      	DEC  R24
000061 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000062 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000063 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000064 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000065 93ed      	ST   X+,R30
000066 9701      	SBIW R24,1
000067 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000068 e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000069 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006a 9185      	LPM  R24,Z+
00006b 9195      	LPM  R25,Z+
00006c 9700      	SBIW R24,0
00006d f061      	BREQ __GLOBAL_INI_END
00006e 91a5      	LPM  R26,Z+
00006f 91b5      	LPM  R27,Z+
000070 9005      	LPM  R0,Z+
000071 9015      	LPM  R1,Z+
000072 01bf      	MOVW R22,R30
000073 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000074 9005      	LPM  R0,Z+
000075 920d      	ST   X+,R0
000076 9701      	SBIW R24,1
000077 f7e1      	BRNE __GLOBAL_INI_LOOP
000078 01fb      	MOVW R30,R22
000079 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007b bfed      	OUT  SPL,R30
00007c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000080 940c 0082 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;char clockwies=1;
                 
                 	.DSEG
                 ;char  turn=1;
                 ;char OverFlow=0;
                 ;unsigned int old=0;
                 ;unsigned int  new=0;
                 ;unsigned int  rpm=0;
                 ;unsigned int  display_rpm=0;
                 ;unsigned int counter=0;
                 ;unsigned int  speed=0;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 init();
000082 d1b7      	RCALL _init
                 ; 0000 0011 
                 ; 0000 0012 clockwies=1;
000083 e0e1      	LDI  R30,LOW(1)
000084 93e0 0176 	STS  _clockwies,R30
                 ; 0000 0013 turn=1;
000086 93e0 0177 	STS  _turn,R30
                 ; 0000 0014 OverFlow=0;
000088 e0e0      	LDI  R30,LOW(0)
000089 93e0 0178 	STS  _OverFlow,R30
                 ; 0000 0015 old=0;
00008b 93e0 0179 	STS  _old,R30
00008d 93e0 017a 	STS  _old+1,R30
                 ; 0000 0016 new=0;
00008f 93e0 017b 	STS  _new,R30
000091 93e0 017c 	STS  _new+1,R30
                 ; 0000 0017 rpm=0;
000093 93e0 017d 	STS  _rpm,R30
000095 93e0 017e 	STS  _rpm+1,R30
                 ; 0000 0018 display_rpm=0;
000097 93e0 017f 	STS  _display_rpm,R30
000099 93e0 0180 	STS  _display_rpm+1,R30
                 ; 0000 0019 counter=0;
00009b 93e0 0181 	STS  _counter,R30
00009d 93e0 0182 	STS  _counter+1,R30
                 ; 0000 001A speed=0;
00009f 93e0 0183 	STS  _speed,R30
0000a1 93e0 0184 	STS  _speed+1,R30
                 ; 0000 001B 
                 ; 0000 001C q2(10);
0000a3 e0aa      	LDI  R26,LOW(10)
0000a4 940e 04c2 	CALL SUBOPT_0x0
                 ; 0000 001D delay_ms(1000);
                 ; 0000 001E 
                 ; 0000 001F q2(30);
0000a6 e1ae      	LDI  R26,LOW(30)
0000a7 940e 04c2 	CALL SUBOPT_0x0
                 ; 0000 0020 delay_ms(1000);
                 ; 0000 0021 
                 ; 0000 0022 q2(50);
0000a9 e3a2      	LDI  R26,LOW(50)
0000aa 940e 04c2 	CALL SUBOPT_0x0
                 ; 0000 0023 delay_ms(1000);
                 ; 0000 0024 
                 ; 0000 0025 q2(70);
0000ac e4a6      	LDI  R26,LOW(70)
0000ad 940e 04c2 	CALL SUBOPT_0x0
                 ; 0000 0026 delay_ms(1000);
                 ; 0000 0027 
                 ; 0000 0028 q2(90);
0000af e5aa      	LDI  R26,LOW(90)
0000b0 940e 04c2 	CALL SUBOPT_0x0
                 ; 0000 0029 delay_ms(1000);
                 ; 0000 002A 
                 ; 0000 002B q4();
0000b2 d02f      	RCALL _q4
                 ; 0000 002C 
                 ; 0000 002D while (1)
                 _0x5:
                 ; 0000 002E       {
                 ; 0000 002F 
                 ; 0000 0030       }
0000b3 cfff      	RJMP _0x5
                 ; 0000 0031 }
                 _0x8:
0000b4 cfff      	RJMP _0x8
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0001 0004 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000b5 93ea      	ST   -Y,R30
                 ; 0001 0005  OverFlow = 1;
0000b6 e0e1      	LDI  R30,LOW(1)
0000b7 93e0 0178 	STS  _OverFlow,R30
                 ; 0001 0006 }
0000b9 91e9      	LD   R30,Y+
0000ba 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0001 0009 {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
0000bb 940e 04c8 	CALL SUBOPT_0x1
                 ; 0001 000A  q6();
0000bd d106      	RCALL _q6
                 ; 0001 000B }
0000be c005      	RJMP _0x20022
                 ; .FEND
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0001 000E {
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0000bf 940e 04c8 	CALL SUBOPT_0x1
                 ; 0001 000F TCNT2=0xB2;
0000c1 ebe2      	LDI  R30,LOW(178)
0000c2 bde4      	OUT  0x24,R30
                 ; 0001 0010 q5();
0000c3 d048      	RCALL _q5
                 ; 0001 0011 }
                 _0x20022:
0000c4 91e9      	LD   R30,Y+
0000c5 bfef      	OUT  SREG,R30
0000c6 91f9      	LD   R31,Y+
0000c7 91e9      	LD   R30,Y+
0000c8 91b9      	LD   R27,Y+
0000c9 91a9      	LD   R26,Y+
0000ca 9199      	LD   R25,Y+
0000cb 9189      	LD   R24,Y+
0000cc 9179      	LD   R23,Y+
0000cd 9169      	LD   R22,Y+
0000ce 90f9      	LD   R15,Y+
0000cf 9019      	LD   R1,Y+
0000d0 9009      	LD   R0,Y+
0000d1 9518      	RETI
                 ; .FEND
                 ;
                 ;void q2(char duty_cycle){
                 ; 0001 0013 void q2(char duty_cycle){
                 _q2:
                 ; .FSTART _q2
                 ; 0001 0014  TCNT0=0x00;
0000d2 93aa      	ST   -Y,R26
                 ;	duty_cycle -> Y+0
0000d3 e0e0      	LDI  R30,LOW(0)
0000d4 bfe2      	OUT  0x32,R30
                 ; 0001 0015  OCR0= (255*duty_cycle+50)/100;
0000d5 81e8      	LD   R30,Y
0000d6 efaf      	LDI  R26,LOW(255)
0000d7 9fea      	MUL  R30,R26
0000d8 01f0      	MOVW R30,R0
0000d9 96f2      	ADIW R30,50
0000da 01df      	MOVW R26,R30
0000db e6e4      	LDI  R30,LOW(100)
0000dc e0f0      	LDI  R31,HIGH(100)
0000dd 940e 057d 	CALL __DIVW21
0000df bfec      	OUT  0x3C,R30
                 ; 0001 0016 }
0000e0 940c 02ff 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;void q4(){
                 ; 0001 0018 void q4(){
                 _q4:
                 ; .FSTART _q4
                 ; 0001 0019  char temp;
                 ; 0001 001A  temp = PINA;
0000e2 931a      	ST   -Y,R17
                 ;	temp -> R17
0000e3 b319      	IN   R17,25
                 ; 0001 001B  temp = (temp*100)/255;
0000e4 e6e4      	LDI  R30,LOW(100)
0000e5 9fe1      	MUL  R30,R17
0000e6 01f0      	MOVW R30,R0
0000e7 01df      	MOVW R26,R30
0000e8 efef      	LDI  R30,LOW(255)
0000e9 e0f0      	LDI  R31,HIGH(255)
0000ea 940e 057d 	CALL __DIVW21
0000ec 2f1e      	MOV  R17,R30
                 ; 0001 001C  q2(temp);
0000ed 2fa1      	MOV  R26,R17
0000ee dfe3      	RCALL _q2
                 ; 0001 001D }
0000ef 9119      	LD   R17,Y+
0000f0 9508      	RET
                 ; .FEND
                 ;
                 ;void changeB(char a,char b , char c, char d){
                 ; 0001 001F void changeB(char a,char b , char c, char d){
                 _changeB:
                 ; .FSTART _changeB
                 ; 0001 0020                 PORTB.4 = a;
0000f1 93aa      	ST   -Y,R26
                 ;	a -> Y+3
                 ;	b -> Y+2
                 ;	c -> Y+1
                 ;	d -> Y+0
0000f2 81eb      	LDD  R30,Y+3
0000f3 30e0      	CPI  R30,0
0000f4 f411      	BRNE _0x20003
0000f5 98c4      	CBI  0x18,4
0000f6 c001      	RJMP _0x20004
                 _0x20003:
0000f7 9ac4      	SBI  0x18,4
                 _0x20004:
                 ; 0001 0021                 PORTB.5 = b;
0000f8 81ea      	LDD  R30,Y+2
0000f9 30e0      	CPI  R30,0
0000fa f411      	BRNE _0x20005
0000fb 98c5      	CBI  0x18,5
0000fc c001      	RJMP _0x20006
                 _0x20005:
0000fd 9ac5      	SBI  0x18,5
                 _0x20006:
                 ; 0001 0022                 PORTB.6 = c;
0000fe 81e9      	LDD  R30,Y+1
0000ff 30e0      	CPI  R30,0
000100 f411      	BRNE _0x20007
000101 98c6      	CBI  0x18,6
000102 c001      	RJMP _0x20008
                 _0x20007:
000103 9ac6      	SBI  0x18,6
                 _0x20008:
                 ; 0001 0023                 PORTB.7 = d;
000104 81e8      	LD   R30,Y
000105 30e0      	CPI  R30,0
000106 f411      	BRNE _0x20009
000107 98c7      	CBI  0x18,7
000108 c001      	RJMP _0x2000A
                 _0x20009:
000109 9ac7      	SBI  0x18,7
                 _0x2000A:
                 ; 0001 0024 }
00010a 9624      	ADIW R28,4
00010b 9508      	RET
                 ; .FEND
                 ;
                 ;void q5(){
                 ; 0001 0026 void q5(){
                 _q5:
                 ; .FSTART _q5
                 ; 0001 0027     char str[16];
                 ; 0001 0028     if (counter<=100){
00010c 9760      	SBIW R28,16
                 ;	str -> Y+0
00010d 940e 04d6 	CALL SUBOPT_0x2
00010f 36a5      	CPI  R26,LOW(0x65)
000110 e0e0      	LDI  R30,HIGH(0x65)
000111 07be      	CPC  R27,R30
000112 f588      	BRSH _0x2000B
                 ; 0001 0029         if (clockwies == 1 ){
000113 91a0 0176 	LDS  R26,_clockwies
000115 30a1      	CPI  R26,LOW(0x1)
000116 f559      	BRNE _0x2000C
                 ; 0001 002A             if (turn == 1) {
000117 91a0 0177 	LDS  R26,_turn
000119 30a1      	CPI  R26,LOW(0x1)
00011a f431      	BRNE _0x2000D
                 ; 0001 002B                 changeB(1,0,0,0);
00011b 940e 04db 	CALL SUBOPT_0x3
00011d 940e 04e0 	CALL SUBOPT_0x4
                 ; 0001 002C                 turn ++ ;
00011f 940e 04e5 	CALL SUBOPT_0x5
                 ; 0001 002D             }
                 ; 0001 002E             if (turn == 2) {
                 _0x2000D:
000121 91a0 0177 	LDS  R26,_turn
000123 30a2      	CPI  R26,LOW(0x2)
000124 f431      	BRNE _0x2000E
                 ; 0001 002F                 changeB(0,1,0,0);
000125 e0e0      	LDI  R30,LOW(0)
000126 93ea      	ST   -Y,R30
000127 940e 04db 	CALL SUBOPT_0x3
000129 940e 04eb 	CALL SUBOPT_0x6
                 ; 0001 0030                 turn ++ ;
                 ; 0001 0031             }
                 ; 0001 0032             if (turn == 3) {
                 _0x2000E:
00012b 91a0 0177 	LDS  R26,_turn
00012d 30a3      	CPI  R26,LOW(0x3)
00012e f431      	BRNE _0x2000F
                 ; 0001 0033                 changeB(0,0,1,0);
00012f 940e 04ef 	CALL SUBOPT_0x7
000131 e0e1      	LDI  R30,LOW(1)
000132 93ea      	ST   -Y,R30
000133 940e 04eb 	CALL SUBOPT_0x6
                 ; 0001 0034                 turn ++ ;
                 ; 0001 0035             }
                 ; 0001 0036             if (turn == 4) {
                 _0x2000F:
000135 91a0 0177 	LDS  R26,_turn
000137 30a4      	CPI  R26,LOW(0x4)
000138 f449      	BRNE _0x20010
                 ; 0001 0037                 changeB(0,0,0,1);
000139 940e 04ef 	CALL SUBOPT_0x7
00013b e0e0      	LDI  R30,LOW(0)
00013c 93ea      	ST   -Y,R30
00013d e0a1      	LDI  R26,LOW(1)
00013e dfb2      	RCALL _changeB
                 ; 0001 0038                 turn = 1 ;
00013f e0e1      	LDI  R30,LOW(1)
000140 93e0 0177 	STS  _turn,R30
                 ; 0001 0039             }
                 ; 0001 003A         }
                 _0x20010:
                 ; 0001 003B         counter++;
                 _0x2000C:
000142 940e 04f3 	CALL SUBOPT_0x8
                 ; 0001 003C     }
                 ; 0001 003D     if (counter==100){
                 _0x2000B:
000144 940e 04d6 	CALL SUBOPT_0x2
000146 36a4      	CPI  R26,LOW(0x64)
000147 e0e0      	LDI  R30,HIGH(0x64)
000148 07be      	CPC  R27,R30
000149 f449      	BRNE _0x20011
                 ; 0001 003E            changeB(0,0,0,0);
00014a 940e 04ef 	CALL SUBOPT_0x7
00014c 940e 04e0 	CALL SUBOPT_0x4
                 ; 0001 003F            clockwies=0;
00014e e0e0      	LDI  R30,LOW(0)
00014f 940e 04fb 	CALL SUBOPT_0x9
                 ; 0001 0040            delay_ms(3000);
                 ; 0001 0041            counter++;
000151 940e 04f3 	CALL SUBOPT_0x8
                 ; 0001 0042     }
                 ; 0001 0043 
                 ; 0001 0044     if (counter >100 &&  counter<=200){
                 _0x20011:
000153 940e 04d6 	CALL SUBOPT_0x2
000155 36a5      	CPI  R26,LOW(0x65)
000156 e0e0      	LDI  R30,HIGH(0x65)
000157 07be      	CPC  R27,R30
000158 f030      	BRLO _0x20013
000159 940e 04d6 	CALL SUBOPT_0x2
00015b 3ca9      	CPI  R26,LOW(0xC9)
00015c e0e0      	LDI  R30,HIGH(0xC9)
00015d 07be      	CPC  R27,R30
00015e f008      	BRLO _0x20014
                 _0x20013:
00015f c031      	RJMP _0x20012
                 _0x20014:
                 ; 0001 0045         if (clockwies == 0 ){
000160 91e0 0176 	LDS  R30,_clockwies
000162 30e0      	CPI  R30,0
000163 f559      	BRNE _0x20015
                 ; 0001 0046             if (turn == 1) {
000164 91a0 0177 	LDS  R26,_turn
000166 30a1      	CPI  R26,LOW(0x1)
000167 f441      	BRNE _0x20016
                 ; 0001 0047                 changeB(0,0,0,1);
000168 940e 04ef 	CALL SUBOPT_0x7
00016a e0e0      	LDI  R30,LOW(0)
00016b 93ea      	ST   -Y,R30
00016c e0a1      	LDI  R26,LOW(1)
00016d df83      	RCALL _changeB
                 ; 0001 0048                 turn ++ ;
00016e 940e 04e5 	CALL SUBOPT_0x5
                 ; 0001 0049             }
                 ; 0001 004A             if (turn == 2) {
                 _0x20016:
000170 91a0 0177 	LDS  R26,_turn
000172 30a2      	CPI  R26,LOW(0x2)
000173 f431      	BRNE _0x20017
                 ; 0001 004B                 changeB(0,0,1,0);
000174 940e 04ef 	CALL SUBOPT_0x7
000176 e0e1      	LDI  R30,LOW(1)
000177 93ea      	ST   -Y,R30
000178 940e 04eb 	CALL SUBOPT_0x6
                 ; 0001 004C                 turn ++ ;
                 ; 0001 004D             }
                 ; 0001 004E             if (turn == 3) {
                 _0x20017:
00017a 91a0 0177 	LDS  R26,_turn
00017c 30a3      	CPI  R26,LOW(0x3)
00017d f431      	BRNE _0x20018
                 ; 0001 004F                 changeB(0,1,0,0);
00017e e0e0      	LDI  R30,LOW(0)
00017f 93ea      	ST   -Y,R30
000180 940e 04db 	CALL SUBOPT_0x3
000182 940e 04eb 	CALL SUBOPT_0x6
                 ; 0001 0050                 turn ++ ;
                 ; 0001 0051             }
                 ; 0001 0052             if (turn == 4) {
                 _0x20018:
000184 91a0 0177 	LDS  R26,_turn
000186 30a4      	CPI  R26,LOW(0x4)
000187 f439      	BRNE _0x20019
                 ; 0001 0053                 changeB(1,0,0,0);
000188 940e 04db 	CALL SUBOPT_0x3
00018a 940e 04e0 	CALL SUBOPT_0x4
                 ; 0001 0054                 turn = 1;
00018c e0e1      	LDI  R30,LOW(1)
00018d 93e0 0177 	STS  _turn,R30
                 ; 0001 0055             }
                 ; 0001 0056         }
                 _0x20019:
                 ; 0001 0057         counter++;
                 _0x20015:
00018f 940e 04f3 	CALL SUBOPT_0x8
                 ; 0001 0058     }
                 ; 0001 0059     if (counter>200){
                 _0x20012:
000191 940e 04d6 	CALL SUBOPT_0x2
000193 3ca9      	CPI  R26,LOW(0xC9)
000194 e0e0      	LDI  R30,HIGH(0xC9)
000195 07be      	CPC  R27,R30
000196 f040      	BRLO _0x2001A
                 ; 0001 005A         counter=0;
000197 e0e0      	LDI  R30,LOW(0)
000198 93e0 0181 	STS  _counter,R30
00019a 93e0 0182 	STS  _counter+1,R30
                 ; 0001 005B         clockwies=1;
00019c e0e1      	LDI  R30,LOW(1)
00019d 940e 04fb 	CALL SUBOPT_0x9
                 ; 0001 005C         delay_ms(3000);
                 ; 0001 005D     }
                 ; 0001 005E     speed = (60*90/360)/0.01;
                 _0x2001A:
00019f edec      	LDI  R30,LOW(1500)
0001a0 e0f5      	LDI  R31,HIGH(1500)
0001a1 93e0 0183 	STS  _speed,R30
0001a3 93f0 0184 	STS  _speed+1,R31
                 ; 0001 005F     sprintf(str,"%d",speed);
0001a5 01fe      	MOVW R30,R28
0001a6 93fa      	ST   -Y,R31
0001a7 93ea      	ST   -Y,R30
                +
0001a8 e6ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0001a9 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0001aa 93fa      	ST   -Y,R31
0001ab 93ea      	ST   -Y,R30
0001ac 91e0 0183 	LDS  R30,_speed
0001ae 91f0 0184 	LDS  R31,_speed+1
0001b0 940e 0501 	CALL SUBOPT_0xA
                 ; 0001 0060     lcd_gotoxy(0,0);
0001b2 e0a0      	LDI  R26,LOW(0)
0001b3 d0e0      	RCALL _lcd_gotoxy
                 ; 0001 0061     lcd_puts("        ");
                +
0001b4 e6a0     +LDI R26 , LOW ( _0x2001B + ( 0 ) )
0001b5 e0b1     +LDI R27 , HIGH ( _0x2001B + ( 0 ) )
                 	__POINTW2MN _0x2001B,0
0001b6 d10b      	RCALL _lcd_puts
                 ; 0001 0062     lcd_gotoxy(0,0);
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 93ea      	ST   -Y,R30
0001b9 e0a0      	LDI  R26,LOW(0)
0001ba 940e 050c 	CALL SUBOPT_0xB
                 ; 0001 0063     lcd_puts(str);
                 ; 0001 0064     lcd_gotoxy(6,0);
0001bc e0e6      	LDI  R30,LOW(6)
0001bd 93ea      	ST   -Y,R30
0001be e0a0      	LDI  R26,LOW(0)
0001bf d0d4      	RCALL _lcd_gotoxy
                 ; 0001 0065     lcd_puts("RPM");
                +
0001c0 e6a9     +LDI R26 , LOW ( _0x2001B + ( 9 ) )
0001c1 e0b1     +LDI R27 , HIGH ( _0x2001B + ( 9 ) )
                 	__POINTW2MN _0x2001B,9
0001c2 d0ff      	RCALL _lcd_puts
                 ; 0001 0066 }
0001c3 c074      	RJMP _0x2080003
                 ; .FEND
                 
                 	.DSEG
                 _0x2001B:
000160           	.BYTE 0xD
                 ;
                 ;void q6(){
                 ; 0001 0068 void q6(){
                 
                 	.CSEG
                 _q6:
                 ; .FSTART _q6
                 ; 0001 0069  char str[16];
                 ; 0001 006A  if(OverFlow==1){
0001c4 9760      	SBIW R28,16
                 ;	str -> Y+0
0001c5 91a0 0178 	LDS  R26,_OverFlow
0001c7 30a1      	CPI  R26,LOW(0x1)
0001c8 f499      	BRNE _0x2001C
                 ; 0001 006B    old = ICR1L;
0001c9 b5e6      	IN   R30,0x26
0001ca e0f0      	LDI  R31,0
0001cb 940e 0511 	CALL SUBOPT_0xC
                 ; 0001 006C    old += ICR1H*256;
0001cd b5e7      	IN   R30,0x27
0001ce 2ffe      	MOV  R31,R30
0001cf e0e0      	LDI  R30,0
0001d0 91a0 0179 	LDS  R26,_old
0001d2 91b0 017a 	LDS  R27,_old+1
0001d4 0fea      	ADD  R30,R26
0001d5 1ffb      	ADC  R31,R27
0001d6 940e 0511 	CALL SUBOPT_0xC
                 ; 0001 006D    OverFlow=0;
0001d8 e0e0      	LDI  R30,LOW(0)
0001d9 93e0 0178 	STS  _OverFlow,R30
                 ; 0001 006E  }
                 ; 0001 006F  else{
0001db c05c      	RJMP _0x2001D
                 _0x2001C:
                 ; 0001 0070   new = ICR1L;
0001dc b5e6      	IN   R30,0x26
0001dd e0f0      	LDI  R31,0
0001de 93e0 017b 	STS  _new,R30
0001e0 93f0 017c 	STS  _new+1,R31
                 ; 0001 0071   new += ICR1H*256;
0001e2 b5e7      	IN   R30,0x27
0001e3 2ffe      	MOV  R31,R30
0001e4 e0e0      	LDI  R30,0
0001e5 91a0 017b 	LDS  R26,_new
0001e7 91b0 017c 	LDS  R27,_new+1
0001e9 0fea      	ADD  R30,R26
0001ea 1ffb      	ADC  R31,R27
0001eb 93e0 017b 	STS  _new,R30
0001ed 93f0 017c 	STS  _new+1,R31
                 ; 0001 0072   rpm = 1200000/(new-old);
0001ef 91a0 0179 	LDS  R26,_old
0001f1 91b0 017a 	LDS  R27,_old+1
0001f3 1bea      	SUB  R30,R26
0001f4 0bfb      	SBC  R31,R27
0001f5 2766      	CLR  R22
0001f6 2777      	CLR  R23
                +
0001f7 e8a0     +LDI R26 , LOW ( 0x124F80 )
0001f8 e4bf     +LDI R27 , HIGH ( 0x124F80 )
0001f9 e182     +LDI R24 , BYTE3 ( 0x124F80 )
0001fa e090     +LDI R25 , BYTE4 ( 0x124F80 )
                 	__GETD2N 0x124F80
0001fb 940e 05a7 	CALL __DIVD21
0001fd 93e0 017d 	STS  _rpm,R30
0001ff 93f0 017e 	STS  _rpm+1,R31
                 ; 0001 0073   old = new;
000201 91e0 017b 	LDS  R30,_new
000203 91f0 017c 	LDS  R31,_new+1
000205 940e 0511 	CALL SUBOPT_0xC
                 ; 0001 0074   if(rpm-display_rpm >=5 || rpm-display_rpm <=-5){
000207 91a0 017f 	LDS  R26,_display_rpm
000209 91b0 0180 	LDS  R27,_display_rpm+1
00020b 91e0 017d 	LDS  R30,_rpm
00020d 91f0 017e 	LDS  R31,_rpm+1
00020f 1bea      	SUB  R30,R26
000210 0bfb      	SBC  R31,R27
000211 01df      	MOVW R26,R30
000212 9735      	SBIW R30,5
000213 f428      	BRSH _0x2001F
000214 01fd      	MOVW R30,R26
000215 3fec      	CPI  R30,LOW(0xFFFC)
000216 efaf      	LDI  R26,HIGH(0xFFFC)
000217 07fa      	CPC  R31,R26
000218 f4f8      	BRSH _0x2001E
                 _0x2001F:
                 ; 0001 0075 
                 ; 0001 0076     display_rpm = rpm;
000219 91e0 017d 	LDS  R30,_rpm
00021b 91f0 017e 	LDS  R31,_rpm+1
00021d 93e0 017f 	STS  _display_rpm,R30
00021f 93f0 0180 	STS  _display_rpm+1,R31
                 ; 0001 0077     sprintf(str, "DC: %d", display_rpm);
000221 01fe      	MOVW R30,R28
000222 93fa      	ST   -Y,R31
000223 93ea      	ST   -Y,R30
                +
000224 e7ea     +LDI R30 , LOW ( 2 * _0x20000 + ( 16 ) )
000225 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 16 ) )
                 	__POINTW1FN _0x20000,16
000226 93fa      	ST   -Y,R31
000227 93ea      	ST   -Y,R30
000228 91e0 017f 	LDS  R30,_display_rpm
00022a 91f0 0180 	LDS  R31,_display_rpm+1
00022c 940e 0501 	CALL SUBOPT_0xA
                 ; 0001 0078     lcd_gotoxy(0,1);
00022e e0a1      	LDI  R26,LOW(1)
00022f d064      	RCALL _lcd_gotoxy
                 ; 0001 0079     lcd_puts("        ");
                +
000230 e6ad     +LDI R26 , LOW ( _0x20021 + ( 0 ) )
000231 e0b1     +LDI R27 , HIGH ( _0x20021 + ( 0 ) )
                 	__POINTW2MN _0x20021,0
000232 d08f      	RCALL _lcd_puts
                 ; 0001 007A     lcd_gotoxy(0,1);
000233 e0e0      	LDI  R30,LOW(0)
000234 93ea      	ST   -Y,R30
000235 e0a1      	LDI  R26,LOW(1)
000236 940e 050c 	CALL SUBOPT_0xB
                 ; 0001 007B     lcd_puts(str);
                 ; 0001 007C   }
                 ; 0001 007D  }
                 _0x2001E:
                 _0x2001D:
                 ; 0001 007E }
                 _0x2080003:
000238 9660      	ADIW R28,16
000239 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20021:
00016d           	.BYTE 0x9
                 ;
                 ;void init(){
                 ; 0001 0080 void init(){
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0001 0081 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00023a e0e0      	LDI  R30,LOW(0)
00023b bbea      	OUT  0x1A,R30
                 ; 0001 0082 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00023c bbeb      	OUT  0x1B,R30
                 ; 0001 0083 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00023d efef      	LDI  R30,LOW(255)
00023e bbe7      	OUT  0x17,R30
                 ; 0001 0084 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00023f e0e0      	LDI  R30,LOW(0)
000240 bbe8      	OUT  0x18,R30
                 ; 0001 0085 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000241 efef      	LDI  R30,LOW(255)
000242 bbe4      	OUT  0x14,R30
                 ; 0001 0086 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000243 e0e0      	LDI  R30,LOW(0)
000244 bbe5      	OUT  0x15,R30
                 ; 0001 0087 DDRD=(0<<DDD7) | (0<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000245 e3e0      	LDI  R30,LOW(48)
000246 bbe1      	OUT  0x11,R30
                 ; 0001 0088 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000247 e0e0      	LDI  R30,LOW(0)
000248 bbe2      	OUT  0x12,R30
                 ; 0001 0089 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
000249 e6e2      	LDI  R30,LOW(98)
00024a bfe3      	OUT  0x33,R30
                 ; 0001 008A TCNT0=0x00;
00024b e0e0      	LDI  R30,LOW(0)
00024c bfe2      	OUT  0x32,R30
                 ; 0001 008B OCR0=0x33;
00024d e3e3      	LDI  R30,LOW(51)
00024e bfec      	OUT  0x3C,R30
                 ; 0001 008C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00024f e0e0      	LDI  R30,LOW(0)
000250 bdef      	OUT  0x2F,R30
                 ; 0001 008D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000251 e0e2      	LDI  R30,LOW(2)
000252 bdee      	OUT  0x2E,R30
                 ; 0001 008E TCNT1H=0x00;
000253 e0e0      	LDI  R30,LOW(0)
000254 bded      	OUT  0x2D,R30
                 ; 0001 008F TCNT1L=0x00;
000255 bdec      	OUT  0x2C,R30
                 ; 0001 0090 ICR1H=0x00;
000256 bde7      	OUT  0x27,R30
                 ; 0001 0091 ICR1L=0x00;
000257 bde6      	OUT  0x26,R30
                 ; 0001 0092 OCR1AH=0x00;
000258 bdeb      	OUT  0x2B,R30
                 ; 0001 0093 OCR1AL=0x00;
000259 bdea      	OUT  0x2A,R30
                 ; 0001 0094 OCR1BH=0x00;
00025a bde9      	OUT  0x29,R30
                 ; 0001 0095 OCR1BL=0x00;
00025b bde8      	OUT  0x28,R30
                 ; 0001 0096 ASSR=0<<AS2;
00025c bde2      	OUT  0x22,R30
                 ; 0001 0097 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (1<<CS22) | (1<<CS21) | (1<<CS20);
00025d e0e7      	LDI  R30,LOW(7)
00025e bde5      	OUT  0x25,R30
                 ; 0001 0098 TCNT2=0xB2;
00025f ebe2      	LDI  R30,LOW(178)
000260 bde4      	OUT  0x24,R30
                 ; 0001 0099 OCR2=0x00;
000261 e0e0      	LDI  R30,LOW(0)
000262 bde3      	OUT  0x23,R30
                 ; 0001 009A TIMSK=(0<<OCIE2) | (1<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000263 e6e4      	LDI  R30,LOW(100)
000264 bfe9      	OUT  0x39,R30
                 ; 0001 009B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000265 e0e0      	LDI  R30,LOW(0)
000266 bfe5      	OUT  0x35,R30
                 ; 0001 009C MCUCSR=(0<<ISC2);
000267 bfe4      	OUT  0x34,R30
                 ; 0001 009D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000268 b9ea      	OUT  0xA,R30
                 ; 0001 009E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000269 e8e0      	LDI  R30,LOW(128)
00026a b9e8      	OUT  0x8,R30
                 ; 0001 009F SFIOR=(0<<ACME);
00026b e0e0      	LDI  R30,LOW(0)
00026c bfe0      	OUT  0x30,R30
                 ; 0001 00A0 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00026d b9e6      	OUT  0x6,R30
                 ; 0001 00A1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00026e b9ed      	OUT  0xD,R30
                 ; 0001 00A2 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00026f bfe6      	OUT  0x36,R30
                 ; 0001 00A3 lcd_init(16);
000270 e1a0      	LDI  R26,LOW(16)
000271 d061      	RCALL _lcd_init
                 ; 0001 00A4 #asm("sei")
000272 9478      	sei
                 ; 0001 00A5 }
000273 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000274 93aa      	ST   -Y,R26
000275 b3e5      	IN   R30,0x15
000276 70ef      	ANDI R30,LOW(0xF)
000277 2fae      	MOV  R26,R30
000278 81e8      	LD   R30,Y
000279 7fe0      	ANDI R30,LOW(0xF0)
00027a 2bea      	OR   R30,R26
00027b bbe5      	OUT  0x15,R30
                +
00027c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00027d 958a     +DEC R24
00027e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00027f 9aaa      	SBI  0x15,2
                +
000280 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000281 958a     +DEC R24
000282 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000283 98aa      	CBI  0x15,2
                +
000284 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000285 958a     +DEC R24
000286 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000287 c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000288 93aa      	ST   -Y,R26
000289 81a8      	LD   R26,Y
00028a dfe9      	RCALL __lcd_write_nibble_G100
00028b 81e8          ld    r30,y
00028c 95e2          swap  r30
00028d 83e8          st    y,r30
00028e 81a8      	LD   R26,Y
00028f dfe4      	RCALL __lcd_write_nibble_G100
                +
000290 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000291 958a     +DEC R24
000292 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000293 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000294 93aa      	ST   -Y,R26
000295 81e8      	LD   R30,Y
000296 e0f0      	LDI  R31,0
000297 57eb      	SUBI R30,LOW(-__base_y_G100)
000298 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000299 81e0      	LD   R30,Z
00029a 81a9      	LDD  R26,Y+1
00029b 0fae      	ADD  R26,R30
00029c dfeb      	RCALL __lcd_write_data
00029d 8059      	LDD  R5,Y+1
00029e 8048      	LDD  R4,Y+0
00029f 9622      	ADIW R28,2
0002a0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002a1 e0a2      	LDI  R26,LOW(2)
0002a2 940e 0516 	CALL SUBOPT_0xD
0002a4 e0ac      	LDI  R26,LOW(12)
0002a5 dfe2      	RCALL __lcd_write_data
0002a6 e0a1      	LDI  R26,LOW(1)
0002a7 940e 0516 	CALL SUBOPT_0xD
0002a9 e0e0      	LDI  R30,LOW(0)
0002aa 2e4e      	MOV  R4,R30
0002ab 2e5e      	MOV  R5,R30
0002ac 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ad 93aa      	ST   -Y,R26
0002ae 81a8      	LD   R26,Y
0002af 30aa      	CPI  R26,LOW(0xA)
0002b0 f011      	BREQ _0x2000005
0002b1 1457      	CP   R5,R7
0002b2 f048      	BRLO _0x2000004
                 _0x2000005:
0002b3 e0e0      	LDI  R30,LOW(0)
0002b4 93ea      	ST   -Y,R30
0002b5 9443      	INC  R4
0002b6 2da4      	MOV  R26,R4
0002b7 dfdc      	RCALL _lcd_gotoxy
0002b8 81a8      	LD   R26,Y
0002b9 30aa      	CPI  R26,LOW(0xA)
0002ba f409      	BRNE _0x2000007
0002bb c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0002bc 9453      	INC  R5
0002bd 9aa8      	SBI  0x15,0
0002be 81a8      	LD   R26,Y
0002bf dfc8      	RCALL __lcd_write_data
0002c0 98a8      	CBI  0x15,0
0002c1 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c2 93ba      	ST   -Y,R27
0002c3 93aa      	ST   -Y,R26
0002c4 931a      	ST   -Y,R17
                 _0x2000008:
0002c5 81a9      	LDD  R26,Y+1
0002c6 81ba      	LDD  R27,Y+1+1
0002c7 91ed      	LD   R30,X+
0002c8 83a9      	STD  Y+1,R26
0002c9 83ba      	STD  Y+1+1,R27
0002ca 2f1e      	MOV  R17,R30
0002cb 30e0      	CPI  R30,0
0002cc f019      	BREQ _0x200000A
0002cd 2fa1      	MOV  R26,R17
0002ce dfde      	RCALL _lcd_putchar
0002cf cff5      	RJMP _0x2000008
                 _0x200000A:
0002d0 8118      	LDD  R17,Y+0
0002d1 9623      	ADIW R28,3
0002d2 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002d3 93aa      	ST   -Y,R26
0002d4 b3e4      	IN   R30,0x14
0002d5 6fe0      	ORI  R30,LOW(0xF0)
0002d6 bbe4      	OUT  0x14,R30
0002d7 9aa2      	SBI  0x14,2
0002d8 9aa0      	SBI  0x14,0
0002d9 9aa1      	SBI  0x14,1
0002da 98aa      	CBI  0x15,2
0002db 98a8      	CBI  0x15,0
0002dc 98a9      	CBI  0x15,1
0002dd 8078      	LDD  R7,Y+0
0002de 81e8      	LD   R30,Y
0002df 58e0      	SUBI R30,-LOW(128)
                +
0002e0 93e0 0187+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002e2 81e8      	LD   R30,Y
0002e3 54e0      	SUBI R30,-LOW(192)
                +
0002e4 93e0 0188+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002e6 e1a4      	LDI  R26,LOW(20)
0002e7 e0b0      	LDI  R27,0
0002e8 940e 0550 	CALL _delay_ms
0002ea 940e 051c 	CALL SUBOPT_0xE
0002ec 940e 051c 	CALL SUBOPT_0xE
0002ee 940e 051c 	CALL SUBOPT_0xE
0002f0 e2a0      	LDI  R26,LOW(32)
0002f1 df82      	RCALL __lcd_write_nibble_G100
                +
0002f2 ec88     +LDI R24 , LOW ( 200 )
0002f3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002f4 9701     +SBIW R24 , 1
0002f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002f6 e2a8      	LDI  R26,LOW(40)
0002f7 df90      	RCALL __lcd_write_data
0002f8 e0a4      	LDI  R26,LOW(4)
0002f9 df8e      	RCALL __lcd_write_data
0002fa e8a5      	LDI  R26,LOW(133)
0002fb df8c      	RCALL __lcd_write_data
0002fc e0a6      	LDI  R26,LOW(6)
0002fd df8a      	RCALL __lcd_write_data
0002fe dfa2      	RCALL _lcd_clear
                 _0x2080002:
0002ff 9621      	ADIW R28,1
000300 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000301 93ba      	ST   -Y,R27
000302 93aa      	ST   -Y,R26
000303 931a      	ST   -Y,R17
000304 930a      	ST   -Y,R16
000305 81aa      	LDD  R26,Y+2
000306 81bb      	LDD  R27,Y+2+1
000307 9612      	ADIW R26,2
000308 940e 05cd 	CALL __GETW1P
00030a 9730      	SBIW R30,0
00030b f159      	BREQ _0x2020010
00030c 81aa      	LDD  R26,Y+2
00030d 81bb      	LDD  R27,Y+2+1
00030e 9614      	ADIW R26,4
00030f 940e 05cd 	CALL __GETW1P
000311 018f      	MOVW R16,R30
000312 9730      	SBIW R30,0
000313 f061      	BREQ _0x2020012
                +
000314 3002     +CPI R16 , LOW ( 2 )
000315 e0e0     +LDI R30 , HIGH ( 2 )
000316 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000317 f098      	BRLO _0x2020013
000318 01f8      	MOVW R30,R16
000319 9731      	SBIW R30,1
00031a 018f      	MOVW R16,R30
                +
00031b 81aa     +LDD R26 , Y + 2
00031c 81bb     +LDD R27 , Y + 2 + 1
00031d 9614     +ADIW R26 , 4
00031e 93ed     +ST X + , R30
00031f 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000320 81aa      	LDD  R26,Y+2
000321 81bb      	LDD  R27,Y+2+1
000322 9612      	ADIW R26,2
000323 91ed      	LD   R30,X+
000324 91fd      	LD   R31,X+
000325 9631      	ADIW R30,1
000326 93fe      	ST   -X,R31
000327 93ee      	ST   -X,R30
000328 9731      	SBIW R30,1
000329 81ac      	LDD  R26,Y+4
00032a 83a0      	STD  Z+0,R26
                 _0x2020013:
00032b 81aa      	LDD  R26,Y+2
00032c 81bb      	LDD  R27,Y+2+1
00032d 940e 05cd 	CALL __GETW1P
00032f 23ff      	TST  R31
000330 f02a      	BRMI _0x2020014
000331 91ed      	LD   R30,X+
000332 91fd      	LD   R31,X+
000333 9631      	ADIW R30,1
000334 93fe      	ST   -X,R31
000335 93ee      	ST   -X,R30
                 _0x2020014:
000336 c006      	RJMP _0x2020015
                 _0x2020010:
000337 81aa      	LDD  R26,Y+2
000338 81bb      	LDD  R27,Y+2+1
000339 efef      	LDI  R30,LOW(65535)
00033a efff      	LDI  R31,HIGH(65535)
00033b 93ed      	ST   X+,R30
00033c 93fc      	ST   X,R31
                 _0x2020015:
00033d 8119      	LDD  R17,Y+1
00033e 8108      	LDD  R16,Y+0
00033f 9625      	ADIW R28,5
000340 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000341 93ba      	ST   -Y,R27
000342 93aa      	ST   -Y,R26
000343 9726      	SBIW R28,6
000344 940e 05da 	CALL __SAVELOCR6
000346 e010      	LDI  R17,0
000347 85ac      	LDD  R26,Y+12
000348 85bd      	LDD  R27,Y+12+1
000349 e0e0      	LDI  R30,LOW(0)
00034a e0f0      	LDI  R31,HIGH(0)
00034b 93ed      	ST   X+,R30
00034c 93fc      	ST   X,R31
                 _0x2020016:
00034d 89ea      	LDD  R30,Y+18
00034e 89fb      	LDD  R31,Y+18+1
00034f 9631      	ADIW R30,1
000350 8bea      	STD  Y+18,R30
000351 8bfb      	STD  Y+18+1,R31
000352 9731      	SBIW R30,1
000353 91e4      	LPM  R30,Z
000354 2f2e      	MOV  R18,R30
000355 30e0      	CPI  R30,0
000356 f409      	BRNE PC+2
000357 c115      	RJMP _0x2020018
000358 2fe1      	MOV  R30,R17
000359 30e0      	CPI  R30,0
00035a f439      	BRNE _0x202001C
00035b 3225      	CPI  R18,37
00035c f411      	BRNE _0x202001D
00035d e011      	LDI  R17,LOW(1)
00035e c002      	RJMP _0x202001E
                 _0x202001D:
00035f 940e 0524 	CALL SUBOPT_0xF
                 _0x202001E:
000361 c10a      	RJMP _0x202001B
                 _0x202001C:
000362 30e1      	CPI  R30,LOW(0x1)
000363 f4a9      	BRNE _0x202001F
000364 3225      	CPI  R18,37
000365 f419      	BRNE _0x2020020
000366 940e 0524 	CALL SUBOPT_0xF
000368 c102      	RJMP _0x20200CC
                 _0x2020020:
000369 e012      	LDI  R17,LOW(2)
00036a e040      	LDI  R20,LOW(0)
00036b e000      	LDI  R16,LOW(0)
00036c 322d      	CPI  R18,45
00036d f411      	BRNE _0x2020021
00036e e001      	LDI  R16,LOW(1)
00036f c0fc      	RJMP _0x202001B
                 _0x2020021:
000370 322b      	CPI  R18,43
000371 f411      	BRNE _0x2020022
000372 e24b      	LDI  R20,LOW(43)
000373 c0f8      	RJMP _0x202001B
                 _0x2020022:
000374 3220      	CPI  R18,32
000375 f411      	BRNE _0x2020023
000376 e240      	LDI  R20,LOW(32)
000377 c0f4      	RJMP _0x202001B
                 _0x2020023:
000378 c002      	RJMP _0x2020024
                 _0x202001F:
000379 30e2      	CPI  R30,LOW(0x2)
00037a f439      	BRNE _0x2020025
                 _0x2020024:
00037b e050      	LDI  R21,LOW(0)
00037c e013      	LDI  R17,LOW(3)
00037d 3320      	CPI  R18,48
00037e f411      	BRNE _0x2020026
00037f 6800      	ORI  R16,LOW(128)
000380 c0eb      	RJMP _0x202001B
                 _0x2020026:
000381 c003      	RJMP _0x2020027
                 _0x2020025:
000382 30e3      	CPI  R30,LOW(0x3)
000383 f009      	BREQ PC+2
000384 c0e7      	RJMP _0x202001B
                 _0x2020027:
000385 3320      	CPI  R18,48
000386 f010      	BRLO _0x202002A
000387 332a      	CPI  R18,58
000388 f008      	BRLO _0x202002B
                 _0x202002A:
000389 c007      	RJMP _0x2020029
                 _0x202002B:
00038a e0aa      	LDI  R26,LOW(10)
00038b 9f5a      	MUL  R21,R26
00038c 2d50      	MOV  R21,R0
00038d 2fe2      	MOV  R30,R18
00038e 53e0      	SUBI R30,LOW(48)
00038f 0f5e      	ADD  R21,R30
000390 c0db      	RJMP _0x202001B
                 _0x2020029:
000391 2fe2      	MOV  R30,R18
000392 36e3      	CPI  R30,LOW(0x63)
000393 f449      	BRNE _0x202002F
000394 940e 052b 	CALL SUBOPT_0x10
000396 89e8      	LDD  R30,Y+16
000397 89f9      	LDD  R31,Y+16+1
000398 81a4      	LDD  R26,Z+4
000399 93aa      	ST   -Y,R26
00039a 940e 0531 	CALL SUBOPT_0x11
00039c c0ce      	RJMP _0x2020030
                 _0x202002F:
00039d 37e3      	CPI  R30,LOW(0x73)
00039e f441      	BRNE _0x2020032
00039f 940e 052b 	CALL SUBOPT_0x10
0003a1 940e 0537 	CALL SUBOPT_0x12
0003a3 940e 04a9 	CALL _strlen
0003a5 2f1e      	MOV  R17,R30
0003a6 c00a      	RJMP _0x2020033
                 _0x2020032:
0003a7 37e0      	CPI  R30,LOW(0x70)
0003a8 f461      	BRNE _0x2020035
0003a9 940e 052b 	CALL SUBOPT_0x10
0003ab 940e 0537 	CALL SUBOPT_0x12
0003ad 940e 04b5 	CALL _strlenf
0003af 2f1e      	MOV  R17,R30
0003b0 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0003b1 6002      	ORI  R16,LOW(2)
0003b2 770f      	ANDI R16,LOW(127)
0003b3 e030      	LDI  R19,LOW(0)
0003b4 c034      	RJMP _0x2020036
                 _0x2020035:
0003b5 36e4      	CPI  R30,LOW(0x64)
0003b6 f011      	BREQ _0x2020039
0003b7 36e9      	CPI  R30,LOW(0x69)
0003b8 f411      	BRNE _0x202003A
                 _0x2020039:
0003b9 6004      	ORI  R16,LOW(4)
0003ba c002      	RJMP _0x202003B
                 _0x202003A:
0003bb 37e5      	CPI  R30,LOW(0x75)
0003bc f431      	BRNE _0x202003C
                 _0x202003B:
0003bd e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003be e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003bf 83ee      	STD  Y+6,R30
0003c0 83ff      	STD  Y+6+1,R31
0003c1 e015      	LDI  R17,LOW(5)
0003c2 c00c      	RJMP _0x202003D
                 _0x202003C:
0003c3 35e8      	CPI  R30,LOW(0x58)
0003c4 f411      	BRNE _0x202003F
0003c5 6008      	ORI  R16,LOW(8)
0003c6 c003      	RJMP _0x2020040
                 _0x202003F:
0003c7 37e8      	CPI  R30,LOW(0x78)
0003c8 f009      	BREQ PC+2
0003c9 c0a1      	RJMP _0x2020071
                 _0x2020040:
0003ca e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0003cb e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003cc 83ee      	STD  Y+6,R30
0003cd 83ff      	STD  Y+6+1,R31
0003ce e014      	LDI  R17,LOW(4)
                 _0x202003D:
0003cf ff02      	SBRS R16,2
0003d0 c014      	RJMP _0x2020042
0003d1 940e 052b 	CALL SUBOPT_0x10
0003d3 940e 0541 	CALL SUBOPT_0x13
0003d5 85ab      	LDD  R26,Y+11
0003d6 23aa      	TST  R26
0003d7 f43a      	BRPL _0x2020043
0003d8 85ea      	LDD  R30,Y+10
0003d9 85fb      	LDD  R31,Y+10+1
0003da 940e 055e 	CALL __ANEGW1
0003dc 87ea      	STD  Y+10,R30
0003dd 87fb      	STD  Y+10+1,R31
0003de e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0003df 3040      	CPI  R20,0
0003e0 f011      	BREQ _0x2020044
0003e1 5f1f      	SUBI R17,-LOW(1)
0003e2 c001      	RJMP _0x2020045
                 _0x2020044:
0003e3 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0003e4 c004      	RJMP _0x2020046
                 _0x2020042:
0003e5 940e 052b 	CALL SUBOPT_0x10
0003e7 940e 0541 	CALL SUBOPT_0x13
                 _0x2020046:
                 _0x2020036:
0003e9 fd00      	SBRC R16,0
0003ea c011      	RJMP _0x2020047
                 _0x2020048:
0003eb 1715      	CP   R17,R21
0003ec f478      	BRSH _0x202004A
0003ed ff07      	SBRS R16,7
0003ee c008      	RJMP _0x202004B
0003ef ff02      	SBRS R16,2
0003f0 c004      	RJMP _0x202004C
0003f1 7f0b      	ANDI R16,LOW(251)
0003f2 2f24      	MOV  R18,R20
0003f3 5011      	SUBI R17,LOW(1)
0003f4 c001      	RJMP _0x202004D
                 _0x202004C:
0003f5 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003f6 c001      	RJMP _0x202004E
                 _0x202004B:
0003f7 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003f8 940e 0524 	CALL SUBOPT_0xF
0003fa 5051      	SUBI R21,LOW(1)
0003fb cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003fc 2f31      	MOV  R19,R17
0003fd ff01      	SBRS R16,1
0003fe c017      	RJMP _0x202004F
                 _0x2020050:
0003ff 3030      	CPI  R19,0
000400 f0a1      	BREQ _0x2020052
000401 ff03      	SBRS R16,3
000402 c006      	RJMP _0x2020053
000403 81ee      	LDD  R30,Y+6
000404 81ff      	LDD  R31,Y+6+1
000405 9125      	LPM  R18,Z+
000406 83ee      	STD  Y+6,R30
000407 83ff      	STD  Y+6+1,R31
000408 c005      	RJMP _0x2020054
                 _0x2020053:
000409 81ae      	LDD  R26,Y+6
00040a 81bf      	LDD  R27,Y+6+1
00040b 912d      	LD   R18,X+
00040c 83ae      	STD  Y+6,R26
00040d 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00040e 940e 0524 	CALL SUBOPT_0xF
000410 3050      	CPI  R21,0
000411 f009      	BREQ _0x2020055
000412 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000413 5031      	SUBI R19,LOW(1)
000414 cfea      	RJMP _0x2020050
                 _0x2020052:
000415 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000416 e320      	LDI  R18,LOW(48)
000417 81ee      	LDD  R30,Y+6
000418 81ff      	LDD  R31,Y+6+1
000419 940e 05d1 	CALL __GETW1PF
00041b 87e8      	STD  Y+8,R30
00041c 87f9      	STD  Y+8+1,R31
00041d 81ee      	LDD  R30,Y+6
00041e 81ff      	LDD  R31,Y+6+1
00041f 9632      	ADIW R30,2
000420 83ee      	STD  Y+6,R30
000421 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000422 85e8      	LDD  R30,Y+8
000423 85f9      	LDD  R31,Y+8+1
000424 85aa      	LDD  R26,Y+10
000425 85bb      	LDD  R27,Y+10+1
000426 17ae      	CP   R26,R30
000427 07bf      	CPC  R27,R31
000428 f050      	BRLO _0x202005C
000429 5f2f      	SUBI R18,-LOW(1)
00042a 85a8      	LDD  R26,Y+8
00042b 85b9      	LDD  R27,Y+8+1
00042c 85ea      	LDD  R30,Y+10
00042d 85fb      	LDD  R31,Y+10+1
00042e 1bea      	SUB  R30,R26
00042f 0bfb      	SBC  R31,R27
000430 87ea      	STD  Y+10,R30
000431 87fb      	STD  Y+10+1,R31
000432 cfef      	RJMP _0x202005A
                 _0x202005C:
000433 332a      	CPI  R18,58
000434 f028      	BRLO _0x202005D
000435 ff03      	SBRS R16,3
000436 c002      	RJMP _0x202005E
000437 5f29      	SUBI R18,-LOW(7)
000438 c001      	RJMP _0x202005F
                 _0x202005E:
000439 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00043a fd04      	SBRC R16,4
00043b c01a      	RJMP _0x2020061
00043c 3321      	CPI  R18,49
00043d f420      	BRSH _0x2020063
00043e 85a8      	LDD  R26,Y+8
00043f 85b9      	LDD  R27,Y+8+1
000440 9711      	SBIW R26,1
000441 f409      	BRNE _0x2020062
                 _0x2020063:
000442 c009      	RJMP _0x20200CD
                 _0x2020062:
000443 1753      	CP   R21,R19
000444 f010      	BRLO _0x2020067
000445 ff00      	SBRS R16,0
000446 c001      	RJMP _0x2020068
                 _0x2020067:
000447 c013      	RJMP _0x2020066
                 _0x2020068:
000448 e220      	LDI  R18,LOW(32)
000449 ff07      	SBRS R16,7
00044a c00b      	RJMP _0x2020069
00044b e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00044c 6100      	ORI  R16,LOW(16)
00044d ff02      	SBRS R16,2
00044e c007      	RJMP _0x202006A
00044f 7f0b      	ANDI R16,LOW(251)
000450 934a      	ST   -Y,R20
000451 940e 0531 	CALL SUBOPT_0x11
000453 3050      	CPI  R21,0
000454 f009      	BREQ _0x202006B
000455 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000456 940e 0524 	CALL SUBOPT_0xF
000458 3050      	CPI  R21,0
000459 f009      	BREQ _0x202006C
00045a 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00045b 5031      	SUBI R19,LOW(1)
00045c 85a8      	LDD  R26,Y+8
00045d 85b9      	LDD  R27,Y+8+1
00045e 9712      	SBIW R26,2
00045f f008      	BRLO _0x2020059
000460 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000461 ff00      	SBRS R16,0
000462 c008      	RJMP _0x202006D
                 _0x202006E:
000463 3050      	CPI  R21,0
000464 f031      	BREQ _0x2020070
000465 5051      	SUBI R21,LOW(1)
000466 e2e0      	LDI  R30,LOW(32)
000467 93ea      	ST   -Y,R30
000468 940e 0531 	CALL SUBOPT_0x11
00046a cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00046b e010      	LDI  R17,LOW(0)
                 _0x202001B:
00046c cee0      	RJMP _0x2020016
                 _0x2020018:
00046d 85ac      	LDD  R26,Y+12
00046e 85bd      	LDD  R27,Y+12+1
00046f 940e 05cd 	CALL __GETW1P
000471 940e 05e1 	CALL __LOADLOCR6
000473 9664      	ADIW R28,20
000474 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000475 92ff      	PUSH R15
000476 2ef8      	MOV  R15,R24
000477 9726      	SBIW R28,6
000478 940e 05dc 	CALL __SAVELOCR4
00047a 940e 0549 	CALL SUBOPT_0x14
00047c 9730      	SBIW R30,0
00047d f419      	BRNE _0x2020072
00047e efef      	LDI  R30,LOW(65535)
00047f efff      	LDI  R31,HIGH(65535)
000480 c023      	RJMP _0x2080001
                 _0x2020072:
000481 01de      	MOVW R26,R28
000482 9616      	ADIW R26,6
000483 940e 055a 	CALL __ADDW2R15
000485 018d      	MOVW R16,R26
000486 940e 0549 	CALL SUBOPT_0x14
000488 83ee      	STD  Y+6,R30
000489 83ff      	STD  Y+6+1,R31
00048a e0e0      	LDI  R30,LOW(0)
00048b 87e8      	STD  Y+8,R30
00048c 87e9      	STD  Y+8+1,R30
00048d 01de      	MOVW R26,R28
00048e 961a      	ADIW R26,10
00048f 940e 055a 	CALL __ADDW2R15
000491 940e 05cd 	CALL __GETW1P
000493 93fa      	ST   -Y,R31
000494 93ea      	ST   -Y,R30
000495 931a      	ST   -Y,R17
000496 930a      	ST   -Y,R16
000497 e0e1      	LDI  R30,LOW(_put_buff_G101)
000498 e0f3      	LDI  R31,HIGH(_put_buff_G101)
000499 93fa      	ST   -Y,R31
00049a 93ea      	ST   -Y,R30
00049b 01de      	MOVW R26,R28
00049c 961a      	ADIW R26,10
00049d dea3      	RCALL __print_G101
00049e 019f      	MOVW R18,R30
00049f 81ae      	LDD  R26,Y+6
0004a0 81bf      	LDD  R27,Y+6+1
0004a1 e0e0      	LDI  R30,LOW(0)
0004a2 93ec      	ST   X,R30
0004a3 01f9      	MOVW R30,R18
                 _0x2080001:
0004a4 940e 05e3 	CALL __LOADLOCR4
0004a6 962a      	ADIW R28,10
0004a7 90ff      	POP  R15
0004a8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0004a9 93ba      	ST   -Y,R27
0004aa 93aa      	ST   -Y,R26
0004ab 91a9          ld   r26,y+
0004ac 91b9          ld   r27,y+
0004ad 27ee          clr  r30
0004ae 27ff          clr  r31
                 strlen0:
0004af 916d          ld   r22,x+
0004b0 2366          tst  r22
0004b1 f011          breq strlen1
0004b2 9631          adiw r30,1
0004b3 cffb          rjmp strlen0
                 strlen1:
0004b4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0004b5 93ba      	ST   -Y,R27
0004b6 93aa      	ST   -Y,R26
0004b7 27aa          clr  r26
0004b8 27bb          clr  r27
0004b9 91e9          ld   r30,y+
0004ba 91f9          ld   r31,y+
                 strlenf0:
0004bb 9005      	lpm  r0,z+
0004bc 2000          tst  r0
0004bd f011          breq strlenf1
0004be 9611          adiw r26,1
0004bf cffb          rjmp strlenf0
                 strlenf1:
0004c0 01fd          movw r30,r26
0004c1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _clockwies:
000176           	.BYTE 0x1
                 _turn:
000177           	.BYTE 0x1
                 _OverFlow:
000178           	.BYTE 0x1
                 _old:
000179           	.BYTE 0x2
                 _new:
00017b           	.BYTE 0x2
                 _rpm:
00017d           	.BYTE 0x2
                 _display_rpm:
00017f           	.BYTE 0x2
                 _counter:
000181           	.BYTE 0x2
                 _speed:
000183           	.BYTE 0x2
                 __base_y_G100:
000185           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0004c2 940e 00d2 	CALL _q2
0004c4 eea8      	LDI  R26,LOW(1000)
0004c5 e0b3      	LDI  R27,HIGH(1000)
0004c6 940c 0550 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
0004c8 920a      	ST   -Y,R0
0004c9 921a      	ST   -Y,R1
0004ca 92fa      	ST   -Y,R15
0004cb 936a      	ST   -Y,R22
0004cc 937a      	ST   -Y,R23
0004cd 938a      	ST   -Y,R24
0004ce 939a      	ST   -Y,R25
0004cf 93aa      	ST   -Y,R26
0004d0 93ba      	ST   -Y,R27
0004d1 93ea      	ST   -Y,R30
0004d2 93fa      	ST   -Y,R31
0004d3 b7ef      	IN   R30,SREG
0004d4 93ea      	ST   -Y,R30
0004d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0004d6 91a0 0181 	LDS  R26,_counter
0004d8 91b0 0182 	LDS  R27,_counter+1
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0004db e0e1      	LDI  R30,LOW(1)
0004dc 93ea      	ST   -Y,R30
0004dd e0e0      	LDI  R30,LOW(0)
0004de 93ea      	ST   -Y,R30
0004df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004e0 e0e0      	LDI  R30,LOW(0)
0004e1 93ea      	ST   -Y,R30
0004e2 e0a0      	LDI  R26,LOW(0)
0004e3 940c 00f1 	JMP  _changeB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
0004e5 91e0 0177 	LDS  R30,_turn
0004e7 5fef      	SUBI R30,-LOW(1)
0004e8 93e0 0177 	STS  _turn,R30
0004ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0004eb e0a0      	LDI  R26,LOW(0)
0004ec 940e 00f1 	CALL _changeB
0004ee cff6      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
0004ef e0e0      	LDI  R30,LOW(0)
0004f0 93ea      	ST   -Y,R30
0004f1 93ea      	ST   -Y,R30
0004f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0004f3 e8a1      	LDI  R26,LOW(_counter)
0004f4 e0b1      	LDI  R27,HIGH(_counter)
0004f5 91ed      	LD   R30,X+
0004f6 91fd      	LD   R31,X+
0004f7 9631      	ADIW R30,1
0004f8 93fe      	ST   -X,R31
0004f9 93ee      	ST   -X,R30
0004fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004fb 93e0 0176 	STS  _clockwies,R30
0004fd eba8      	LDI  R26,LOW(3000)
0004fe e0bb      	LDI  R27,HIGH(3000)
0004ff 940c 0550 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xA:
000501 2766      	CLR  R22
000502 2777      	CLR  R23
000503 940e 05d5 	CALL __PUTPARD1
000505 e084      	LDI  R24,4
000506 940e 0475 	CALL _sprintf
000508 9628      	ADIW R28,8
000509 e0e0      	LDI  R30,LOW(0)
00050a 93ea      	ST   -Y,R30
00050b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00050c 940e 0294 	CALL _lcd_gotoxy
00050e 01de      	MOVW R26,R28
00050f 940c 02c2 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000511 93e0 0179 	STS  _old,R30
000513 93f0 017a 	STS  _old+1,R31
000515 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000516 940e 0288 	CALL __lcd_write_data
000518 e0a3      	LDI  R26,LOW(3)
000519 e0b0      	LDI  R27,0
00051a 940c 0550 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xE:
00051c e3a0      	LDI  R26,LOW(48)
00051d 940e 0274 	CALL __lcd_write_nibble_G100
                +
00051f ec88     +LDI R24 , LOW ( 200 )
000520 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000521 9701     +SBIW R24 , 1
000522 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000523 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000524 932a      	ST   -Y,R18
000525 85ad      	LDD  R26,Y+13
000526 85be      	LDD  R27,Y+13+1
000527 85ef      	LDD  R30,Y+15
000528 89f8      	LDD  R31,Y+15+1
000529 9509      	ICALL
00052a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x10:
00052b 89e8      	LDD  R30,Y+16
00052c 89f9      	LDD  R31,Y+16+1
00052d 9734      	SBIW R30,4
00052e 8be8      	STD  Y+16,R30
00052f 8bf9      	STD  Y+16+1,R31
000530 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000531 85ad      	LDD  R26,Y+13
000532 85be      	LDD  R27,Y+13+1
000533 85ef      	LDD  R30,Y+15
000534 89f8      	LDD  R31,Y+15+1
000535 9509      	ICALL
000536 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
000537 89a8      	LDD  R26,Y+16
000538 89b9      	LDD  R27,Y+16+1
000539 9614      	ADIW R26,4
00053a 940e 05cd 	CALL __GETW1P
00053c 83ee      	STD  Y+6,R30
00053d 83ff      	STD  Y+6+1,R31
00053e 81ae      	LDD  R26,Y+6
00053f 81bf      	LDD  R27,Y+6+1
000540 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
000541 89a8      	LDD  R26,Y+16
000542 89b9      	LDD  R27,Y+16+1
000543 9614      	ADIW R26,4
000544 940e 05cd 	CALL __GETW1P
000546 87ea      	STD  Y+10,R30
000547 87fb      	STD  Y+10+1,R31
000548 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000549 01de      	MOVW R26,R28
00054a 961c      	ADIW R26,12
00054b 940e 055a 	CALL __ADDW2R15
00054d 940e 05cd 	CALL __GETW1P
00054f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000550 9610      	adiw r26,0
000551 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000552 ed80     +LDI R24 , LOW ( 0x7D0 )
000553 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000554 9701     +SBIW R24 , 1
000555 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000556 95a8      	wdr
000557 9711      	sbiw r26,1
000558 f7c9      	brne __delay_ms0
                 __delay_ms1:
000559 9508      	ret
                 
                 __ADDW2R15:
00055a 2400      	CLR  R0
00055b 0daf      	ADD  R26,R15
00055c 1db0      	ADC  R27,R0
00055d 9508      	RET
                 
                 __ANEGW1:
00055e 95f1      	NEG  R31
00055f 95e1      	NEG  R30
000560 40f0      	SBCI R31,0
000561 9508      	RET
                 
                 __ANEGD1:
000562 95f0      	COM  R31
000563 9560      	COM  R22
000564 9570      	COM  R23
000565 95e1      	NEG  R30
000566 4fff      	SBCI R31,-1
000567 4f6f      	SBCI R22,-1
000568 4f7f      	SBCI R23,-1
000569 9508      	RET
                 
                 __DIVW21U:
00056a 2400      	CLR  R0
00056b 2411      	CLR  R1
00056c e190      	LDI  R25,16
                 __DIVW21U1:
00056d 0faa      	LSL  R26
00056e 1fbb      	ROL  R27
00056f 1c00      	ROL  R0
000570 1c11      	ROL  R1
000571 1a0e      	SUB  R0,R30
000572 0a1f      	SBC  R1,R31
000573 f418      	BRCC __DIVW21U2
000574 0e0e      	ADD  R0,R30
000575 1e1f      	ADC  R1,R31
000576 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000577 60a1      	SBR  R26,1
                 __DIVW21U3:
000578 959a      	DEC  R25
000579 f799      	BRNE __DIVW21U1
00057a 01fd      	MOVW R30,R26
00057b 01d0      	MOVW R26,R0
00057c 9508      	RET
                 
                 __DIVW21:
00057d d02e      	RCALL __CHKSIGNW
00057e dfeb      	RCALL __DIVW21U
00057f f40e      	BRTC __DIVW211
000580 dfdd      	RCALL __ANEGW1
                 __DIVW211:
000581 9508      	RET
                 
                 __DIVD21U:
000582 933f      	PUSH R19
000583 934f      	PUSH R20
000584 935f      	PUSH R21
000585 2400      	CLR  R0
000586 2411      	CLR  R1
000587 2744      	CLR  R20
000588 2755      	CLR  R21
000589 e230      	LDI  R19,32
                 __DIVD21U1:
00058a 0faa      	LSL  R26
00058b 1fbb      	ROL  R27
00058c 1f88      	ROL  R24
00058d 1f99      	ROL  R25
00058e 1c00      	ROL  R0
00058f 1c11      	ROL  R1
000590 1f44      	ROL  R20
000591 1f55      	ROL  R21
000592 1a0e      	SUB  R0,R30
000593 0a1f      	SBC  R1,R31
000594 0b46      	SBC  R20,R22
000595 0b57      	SBC  R21,R23
000596 f428      	BRCC __DIVD21U2
000597 0e0e      	ADD  R0,R30
000598 1e1f      	ADC  R1,R31
000599 1f46      	ADC  R20,R22
00059a 1f57      	ADC  R21,R23
00059b c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00059c 60a1      	SBR  R26,1
                 __DIVD21U3:
00059d 953a      	DEC  R19
00059e f759      	BRNE __DIVD21U1
00059f 01fd      	MOVW R30,R26
0005a0 01bc      	MOVW R22,R24
0005a1 01d0      	MOVW R26,R0
0005a2 01ca      	MOVW R24,R20
0005a3 915f      	POP  R21
0005a4 914f      	POP  R20
0005a5 913f      	POP  R19
0005a6 9508      	RET
                 
                 __DIVD21:
0005a7 d012      	RCALL __CHKSIGND
0005a8 dfd9      	RCALL __DIVD21U
0005a9 f40e      	BRTC __DIVD211
0005aa dfb7      	RCALL __ANEGD1
                 __DIVD211:
0005ab 9508      	RET
                 
                 __CHKSIGNW:
0005ac 94e8      	CLT
0005ad fff7      	SBRS R31,7
0005ae c002      	RJMP __CHKSW1
0005af dfae      	RCALL __ANEGW1
0005b0 9468      	SET
                 __CHKSW1:
0005b1 ffb7      	SBRS R27,7
0005b2 c006      	RJMP __CHKSW2
0005b3 95a0      	COM  R26
0005b4 95b0      	COM  R27
0005b5 9611      	ADIW R26,1
0005b6 f800      	BLD  R0,0
0005b7 9403      	INC  R0
0005b8 fa00      	BST  R0,0
                 __CHKSW2:
0005b9 9508      	RET
                 
                 __CHKSIGND:
0005ba 94e8      	CLT
0005bb ff77      	SBRS R23,7
0005bc c002      	RJMP __CHKSD1
0005bd dfa4      	RCALL __ANEGD1
0005be 9468      	SET
                 __CHKSD1:
0005bf ff97      	SBRS R25,7
0005c0 c00b      	RJMP __CHKSD2
0005c1 2400      	CLR  R0
0005c2 95a0      	COM  R26
0005c3 95b0      	COM  R27
0005c4 9580      	COM  R24
0005c5 9590      	COM  R25
0005c6 9611      	ADIW R26,1
0005c7 1d80      	ADC  R24,R0
0005c8 1d90      	ADC  R25,R0
0005c9 f800      	BLD  R0,0
0005ca 9403      	INC  R0
0005cb fa00      	BST  R0,0
                 __CHKSD2:
0005cc 9508      	RET
                 
                 __GETW1P:
0005cd 91ed      	LD   R30,X+
0005ce 91fc      	LD   R31,X
0005cf 9711      	SBIW R26,1
0005d0 9508      	RET
                 
                 __GETW1PF:
0005d1 9005      	LPM  R0,Z+
0005d2 91f4      	LPM  R31,Z
0005d3 2de0      	MOV  R30,R0
0005d4 9508      	RET
                 
                 __PUTPARD1:
0005d5 937a      	ST   -Y,R23
0005d6 936a      	ST   -Y,R22
0005d7 93fa      	ST   -Y,R31
0005d8 93ea      	ST   -Y,R30
0005d9 9508      	RET
                 
                 __SAVELOCR6:
0005da 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005db 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005dc 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005dd 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005de 931a      	ST   -Y,R17
0005df 930a      	ST   -Y,R16
0005e0 9508      	RET
                 
                 __LOADLOCR6:
0005e1 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005e2 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005e3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005e4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005e5 8119      	LDD  R17,Y+1
0005e6 8108      	LD   R16,Y
0005e7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  34 r1 :  11 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  30 r18:  29 r19:  12 r20:  16 r21:  23 r22:  14 r23:  10 
r24:  31 r25:  14 r26: 176 r27:  64 r28:  21 r29:   1 r30: 348 r31:  93 
x  :  27 y  : 219 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :   7 
adiw  :  30 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   1 brne  :  48 brpl  :   1 brsh  :   5 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   2 call  :  96 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  18 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   9 
cp    :   4 cpc   :   8 cpi   :  54 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   4 jmp   :  28 ld    :  43 ldd   :  80 ldi   : 176 
lds   :  32 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  21 movw  :  29 
mul   :   3 muls  :   0 mulsu :   0 neg   :   3 nop   :   0 or    :   1 
ori   :   7 out   :  46 pop   :   4 push  :   4 rcall :  36 ret   :  43 
reti  :   2 rjmp  :  74 rol   :  10 ror   :   0 sbc   :   7 sbci  :   5 
sbi   :   9 sbic  :   0 sbis  :   0 sbiw  :  22 sbr   :   2 sbrc  :   2 
sbrs  :  14 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  95 std   :  31 sts   :  37 sub   :   5 subi  :  17 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bd0   2938     86   3024   16384  18.5%
[.dseg] 0x000060 0x000189      0     41     41    1024   4.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings

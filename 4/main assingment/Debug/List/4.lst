
AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm Mon Apr 10 11:42:30 2023

C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1093): warning: Register r4 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1095): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _started=R5
                 	.DEF _capacity=R6
                 	.DEF _capacity_msb=R7
                 	.DEF _glob_priod=R8
                 	.DEF _glob_priod_msb=R9
                 	.DEF __lcd_x=R4
                 	.DEF __lcd_y=R11
                 	.DEF __lcd_maxx=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0065 	JMP  __RESET
000002 940c 01eb 	JMP  _ext_int0_isr
000004 940c 01ef 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 01fb 	JMP  _timer1_ovf_isr
000012 940c 01f7 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 01f3 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
C:\Users\mykar\Downloads\IUT\Micro lab\4\main assingment\Debug\List\4.asm(1134): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x0,0x0,0x0
                 
                 _0x0:
000035 2530
000036 3a64
000037 3000
000038 6425      	.DB  0x30,0x25,0x64,0x3A,0x0,0x30,0x25,0x64
000039 2000
00003a 2020
00003b 2020
00003c 2020      	.DB  0x0,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00003d 4300
00003e 3a45
00003f 6425
000040 4300      	.DB  0x0,0x43,0x45,0x3A,0x25,0x64,0x0,0x43
000041 3a45
000042 5546
000043 4c4c
000044 5400      	.DB  0x45,0x3A,0x46,0x55,0x4C,0x4C,0x0,0x54
000045 4753
000046 253a
000047 0064      	.DB  0x53,0x47,0x3A,0x25,0x64,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0003      	.DW  0x03
00004a 0005      	.DW  0x05
00004b 0066      	.DW  __REG_VARS*2
                 
00004c 0008      	.DW  0x08
00004d 0160      	.DW  _0x16
00004e 0073      	.DW  _0x0*2+9
                 
00004f 0008      	.DW  0x08
000050 0168      	.DW  _0x16+8
000051 0073      	.DW  _0x0*2+9
                 
000052 0008      	.DW  0x08
000053 0170      	.DW  _0x16+16
000054 0081      	.DW  _0x0*2+23
                 
000055 0008      	.DW  0x08
000056 0178      	.DW  _0x16+24
000057 0073      	.DW  _0x0*2+9
                 
000058 0008      	.DW  0x08
000059 0180      	.DW  _0x16+32
00005a 0081      	.DW  _0x0*2+23
                 
00005b 0008      	.DW  0x08
00005c 0188      	.DW  _0x16+40
00005d 0073      	.DW  _0x0*2+9
                 
00005e 0008      	.DW  0x08
00005f 0190      	.DW  _0x1E
000060 0081      	.DW  _0x0*2+23
                 
000061 0002      	.DW  0x02
000062 01ac      	.DW  __base_y_G100
000063 0090      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000064 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000065 94f8      	CLI
000066 27ee      	CLR  R30
000067 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000068 e0f1      	LDI  R31,1
000069 bffb      	OUT  GICR,R31
00006a bfeb      	OUT  GICR,R30
00006b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006c e08d      	LDI  R24,(14-2)+1
00006d e0a2      	LDI  R26,2
00006e 27bb      	CLR  R27
                 __CLEAR_REG:
00006f 93ed      	ST   X+,R30
000070 958a      	DEC  R24
000071 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000072 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000073 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000074 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008b bfed      	OUT  SPL,R30
00008c e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008f e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000090 940c 020c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;
                 ;char started=0;
                 ;unsigned long counter=0;
                 ;int capacity = 0;
                 ;int glob_priod;
                 ;char temp[16];
                 ;
                 ;void show(int hour, int min, int sec, int mlsec){
                 ; 0000 000B void show(int hour, int min, int sec, int mlsec){
                 
                 	.CSEG
                 _show:
                 ; .FSTART _show
                 ; 0000 000C   if (hour<10){
000092 93ba      	ST   -Y,R27
000093 93aa      	ST   -Y,R26
                 ;	hour -> Y+6
                 ;	min -> Y+4
                 ;	sec -> Y+2
                 ;	mlsec -> Y+0
000094 81ae      	LDD  R26,Y+6
000095 81bf      	LDD  R27,Y+6+1
000096 971a      	SBIW R26,10
000097 f42c      	BRGE _0x3
                 ; 0000 000D   sprintf(temp, "0%d:", hour);
000098 940e 04a6 	CALL SUBOPT_0x0
                +
00009a e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00009b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00009c c004      	RJMP _0x23
                 ; 0000 000E   lcd_gotoxy(0, 0);
                 ; 0000 000F   lcd_puts(temp);
                 ; 0000 0010   }
                 ; 0000 0011   else{
                 _0x3:
                 ; 0000 0012   sprintf(temp, "%d:", hour);
00009d 940e 04a6 	CALL SUBOPT_0x0
                +
00009f e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 1 ) )
0000a0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW1FN _0x0,1
                 _0x23:
0000a1 93fa      	ST   -Y,R31
0000a2 93ea      	ST   -Y,R30
0000a3 85ea      	LDD  R30,Y+10
0000a4 85fb      	LDD  R31,Y+10+1
0000a5 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 0013   lcd_gotoxy(0, 0);
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 940e 04b4 	CALL SUBOPT_0x2
                 ; 0000 0014   lcd_puts(temp);
                 ; 0000 0015   }
                 ; 0000 0016 
                 ; 0000 0017   if (min<10){
0000aa 81ac      	LDD  R26,Y+4
0000ab 81bd      	LDD  R27,Y+4+1
0000ac 971a      	SBIW R26,10
0000ad f42c      	BRGE _0x5
                 ; 0000 0018   sprintf(temp, "0%d:", min);
0000ae 940e 04a6 	CALL SUBOPT_0x0
                +
0000b0 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b2 c004      	RJMP _0x24
                 ; 0000 0019   lcd_gotoxy(3, 0);
                 ; 0000 001A   lcd_puts(temp);
                 ; 0000 001B   }
                 ; 0000 001C   else{
                 _0x5:
                 ; 0000 001D   sprintf(temp, "%d:", min);
0000b3 940e 04a6 	CALL SUBOPT_0x0
                +
0000b5 e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 1 ) )
0000b6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW1FN _0x0,1
                 _0x24:
0000b7 93fa      	ST   -Y,R31
0000b8 93ea      	ST   -Y,R30
0000b9 85e8      	LDD  R30,Y+8
0000ba 85f9      	LDD  R31,Y+8+1
0000bb 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 001E   lcd_gotoxy(3, 0);
0000bd e0e3      	LDI  R30,LOW(3)
0000be 940e 04b4 	CALL SUBOPT_0x2
                 ; 0000 001F   lcd_puts(temp);
                 ; 0000 0020   }
                 ; 0000 0021 
                 ; 0000 0022   if (sec<10){
0000c0 81aa      	LDD  R26,Y+2
0000c1 81bb      	LDD  R27,Y+2+1
0000c2 971a      	SBIW R26,10
0000c3 f42c      	BRGE _0x7
                 ; 0000 0023   sprintf(temp, "0%d:", sec);
0000c4 940e 04a6 	CALL SUBOPT_0x0
                +
0000c6 e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c8 c004      	RJMP _0x25
                 ; 0000 0024   lcd_gotoxy(6, 0);
                 ; 0000 0025   lcd_puts(temp);
                 ; 0000 0026   }
                 ; 0000 0027   else{
                 _0x7:
                 ; 0000 0028   sprintf(temp, "%d:", sec);
0000c9 940e 04a6 	CALL SUBOPT_0x0
                +
0000cb e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 1 ) )
0000cc e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 1 ) )
                 	__POINTW1FN _0x0,1
                 _0x25:
0000cd 93fa      	ST   -Y,R31
0000ce 93ea      	ST   -Y,R30
0000cf 81ee      	LDD  R30,Y+6
0000d0 81ff      	LDD  R31,Y+6+1
0000d1 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 0029   lcd_gotoxy(6, 0);
0000d3 e0e6      	LDI  R30,LOW(6)
0000d4 940e 04b4 	CALL SUBOPT_0x2
                 ; 0000 002A   lcd_puts(temp);
                 ; 0000 002B   }
                 ; 0000 002C 
                 ; 0000 002D   if (mlsec<10){
0000d6 81a8      	LD   R26,Y
0000d7 81b9      	LDD  R27,Y+1
0000d8 971a      	SBIW R26,10
0000d9 f42c      	BRGE _0x9
                 ; 0000 002E   sprintf(temp, "0%d", mlsec);
0000da 940e 04a6 	CALL SUBOPT_0x0
                +
0000dc e6ef     +LDI R30 , LOW ( 2 * _0x0 + ( 5 ) )
0000dd e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 5 ) )
                 	__POINTW1FN _0x0,5
0000de c004      	RJMP _0x26
                 ; 0000 002F   lcd_gotoxy(9, 0);
                 ; 0000 0030   lcd_puts(temp);
                 ; 0000 0031   }
                 ; 0000 0032   else{
                 _0x9:
                 ; 0000 0033   sprintf(temp, "%d", mlsec);
0000df 940e 04a6 	CALL SUBOPT_0x0
                +
0000e1 e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 6 ) )
0000e2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 6 ) )
                 	__POINTW1FN _0x0,6
                 _0x26:
0000e3 93fa      	ST   -Y,R31
0000e4 93ea      	ST   -Y,R30
0000e5 81ec      	LDD  R30,Y+4
0000e6 81fd      	LDD  R31,Y+4+1
0000e7 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 0034   lcd_gotoxy(9, 0);
0000e9 e0e9      	LDI  R30,LOW(9)
0000ea 940e 04b4 	CALL SUBOPT_0x2
                 ; 0000 0035   lcd_puts(temp);
                 ; 0000 0036   }
                 ; 0000 0037 
                 ; 0000 0038 }
0000ec 9628      	ADIW R28,8
0000ed 9508      	RET
                 ; .FEND
                 ;
                 ;void timer_counter(){
                 ; 0000 003A void timer_counter(){
                 _timer_counter:
                 ; .FSTART _timer_counter
                 ; 0000 003B   if(PINB.5 == 0 && started == 0){
0000ee 99b5      	SBIC 0x16,5
0000ef c002      	RJMP _0xC
0000f0 2055      	TST  R5
0000f1 f009      	BREQ _0xD
                 _0xC:
0000f2 c012      	RJMP _0xB
                 _0xD:
                 ; 0000 003C   show(0,0,0,0);
0000f3 940e 04bc 	CALL SUBOPT_0x3
0000f5 940e 04bc 	CALL SUBOPT_0x3
0000f7 940e 04bc 	CALL SUBOPT_0x3
0000f9 940e 04c1 	CALL SUBOPT_0x4
                 ; 0000 003D    counter = 0;
0000fb e0e0      	LDI  R30,LOW(0)
0000fc 93e0 0198 	STS  _counter,R30
0000fe 93e0 0199 	STS  _counter+1,R30
000100 93e0 019a 	STS  _counter+2,R30
000102 93e0 019b 	STS  _counter+3,R30
                 ; 0000 003E   }
                 ; 0000 003F   else if(PINB.5==0 && started == 1){
000104 c00e      	RJMP _0xE
                 _0xB:
000105 99b5      	SBIC 0x16,5
000106 c003      	RJMP _0x10
000107 e0e1      	LDI  R30,LOW(1)
000108 15e5      	CP   R30,R5
000109 f009      	BREQ _0x11
                 _0x10:
00010a c003      	RJMP _0xF
                 _0x11:
                 ; 0000 0040   started = 0;
00010b 2455      	CLR  R5
                 ; 0000 0041   TCCR0 = 0x00;
00010c e0e0      	LDI  R30,LOW(0)
00010d c004      	RJMP _0x27
                 ; 0000 0042   }
                 ; 0000 0043   else if(PINB.4 ==0){
                 _0xF:
00010e 99b4      	SBIC 0x16,4
00010f c003      	RJMP _0x13
                 ; 0000 0044   started = 1;
000110 e0e1      	LDI  R30,LOW(1)
000111 2e5e      	MOV  R5,R30
                 ; 0000 0045   TCCR0 = 0x01;
                 _0x27:
000112 bfe3      	OUT  0x33,R30
                 ; 0000 0046   }
                 ; 0000 0047 }
                 _0x13:
                 _0xE:
000113 9508      	RET
                 ; .FEND
                 ;
                 ;void parking(){
                 ; 0000 0049 void parking(){
                 _parking:
                 ; .FSTART _parking
                 ; 0000 004A   if (PINB.3 == 0)   // car out
000114 99b3      	SBIC 0x16,3
000115 c00d      	RJMP _0x14
                 ; 0000 004B   {
                 ; 0000 004C     if (capacity < 1000)
000116 eee8      	LDI  R30,LOW(1000)
000117 e0f3      	LDI  R31,HIGH(1000)
000118 166e      	CP   R6,R30
000119 067f      	CPC  R7,R31
00011a f41c      	BRGE _0x15
                 ; 0000 004D     {
                 ; 0000 004E         capacity++;
00011b 01f3      	MOVW R30,R6
00011c 9631      	ADIW R30,1
00011d 013f      	MOVW R6,R30
                 ; 0000 004F     }
                 ; 0000 0050     lcd_gotoxy(0,1);
                 _0x15:
00011e 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 0051     lcd_puts("       ");
                +
000120 e6a0     +LDI R26 , LOW ( _0x16 + ( 0 ) )
000121 e0b1     +LDI R27 , HIGH ( _0x16 + ( 0 ) )
                 	__POINTW2MN _0x16,0
000122 c025      	RJMP _0x28
                 ; 0000 0052     lcd_gotoxy(0, 1);
                 ; 0000 0053     sprintf(temp, "CE:%d", capacity);
                 ; 0000 0054     lcd_puts(temp);
                 ; 0000 0055   }
                 ; 0000 0056   else if (PINB.7 == 0)  // car in
                 _0x14:
000123 99b7      	SBIC 0x16,7
000124 c034      	RJMP _0x18
                 ; 0000 0057   {
                 ; 0000 0058 
                 ; 0000 0059     if(capacity == 0){
000125 2c06      	MOV  R0,R6
000126 2807      	OR   R0,R7
000127 f459      	BRNE _0x19
                 ; 0000 005A     lcd_gotoxy(0,1);
000128 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 005B     lcd_puts("       ");
                +
00012a e6a8     +LDI R26 , LOW ( _0x16 + ( 8 ) )
00012b e0b1     +LDI R27 , HIGH ( _0x16 + ( 8 ) )
                 	__POINTW2MN _0x16,8
00012c 940e 02a6 	CALL _lcd_puts
                 ; 0000 005C     lcd_gotoxy(0,1);
00012e 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 005D     lcd_puts("CE:FULL");
                +
000130 e7a0     +LDI R26 , LOW ( _0x16 + ( 16 ) )
000131 e0b1     +LDI R27 , HIGH ( _0x16 + ( 16 ) )
                 	__POINTW2MN _0x16,16
000132 c024      	RJMP _0x29
                 ; 0000 005E     }
                 ; 0000 005F     else{
                 _0x19:
                 ; 0000 0060     capacity--;
000133 01f3      	MOVW R30,R6
000134 9731      	SBIW R30,1
000135 013f      	MOVW R6,R30
                 ; 0000 0061     if (capacity == 0)
000136 2c06      	MOV  R0,R6
000137 2807      	OR   R0,R7
000138 f459      	BRNE _0x1B
                 ; 0000 0062     {
                 ; 0000 0063       lcd_gotoxy(0,1);
000139 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 0064     lcd_puts("       ");
                +
00013b e7a8     +LDI R26 , LOW ( _0x16 + ( 24 ) )
00013c e0b1     +LDI R27 , HIGH ( _0x16 + ( 24 ) )
                 	__POINTW2MN _0x16,24
00013d 940e 02a6 	CALL _lcd_puts
                 ; 0000 0065       lcd_gotoxy(0, 1);
00013f 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 0066       lcd_puts("CE:FULL");
                +
000141 e8a0     +LDI R26 , LOW ( _0x16 + ( 32 ) )
000142 e0b1     +LDI R27 , HIGH ( _0x16 + ( 32 ) )
                 	__POINTW2MN _0x16,32
000143 c013      	RJMP _0x29
                 ; 0000 0067     }
                 ; 0000 0068     else
                 _0x1B:
                 ; 0000 0069     {
                 ; 0000 006A       lcd_gotoxy(0,1);
000144 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 006B     lcd_puts("       ");
                +
000146 e8a8     +LDI R26 , LOW ( _0x16 + ( 40 ) )
000147 e0b1     +LDI R27 , HIGH ( _0x16 + ( 40 ) )
                 	__POINTW2MN _0x16,40
                 _0x28:
000148 940e 02a6 	CALL _lcd_puts
                 ; 0000 006C       lcd_gotoxy(0, 1);
00014a 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 006D       sprintf(temp, "CE:%d", capacity);
00014c 940e 04a6 	CALL SUBOPT_0x0
                +
00014e e7eb     +LDI R30 , LOW ( 2 * _0x0 + ( 17 ) )
00014f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 17 ) )
                 	__POINTW1FN _0x0,17
000150 93fa      	ST   -Y,R31
000151 93ea      	ST   -Y,R30
000152 01f3      	MOVW R30,R6
000153 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 006E       lcd_puts(temp);
000155 e9ac      	LDI  R26,LOW(_temp)
000156 e0b1      	LDI  R27,HIGH(_temp)
                 _0x29:
000157 940e 02a6 	CALL _lcd_puts
                 ; 0000 006F     }
                 ; 0000 0070     }
                 ; 0000 0071   }
                 ; 0000 0072 }
                 _0x18:
000159 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x16:
000160           	.BYTE 0x30
                 ;
                 ;void clock(){
                 ; 0000 0074 void clock(){
                 
                 	.CSEG
                 _clock:
                 ; .FSTART _clock
                 ; 0000 0075   short int hour, minute,second,milisecond, number;
                 ; 0000 0076   TCNT0 = 0xB2;
00015a 9724      	SBIW R28,4
00015b 940e 05d0 	CALL __SAVELOCR6
                 ;	hour -> R16,R17
                 ;	minute -> R18,R19
                 ;	second -> R20,R21
                 ;	milisecond -> Y+8
                 ;	number -> Y+6
00015d ebe2      	LDI  R30,LOW(178)
00015e bfe2      	OUT  0x32,R30
                 ; 0000 0077 
                 ; 0000 0078   if (counter == 0)
00015f 91e0 0198 	LDS  R30,_counter
000161 91f0 0199 	LDS  R31,_counter+1
000163 9160 019a 	LDS  R22,_counter+2
000165 9170 019b 	LDS  R23,_counter+3
000167 940e 05cc 	CALL __CPD10
000169 f441      	BRNE _0x1D
                 ; 0000 0079   {
                 ; 0000 007A     show(0,0,0,0);
00016a 940e 04bc 	CALL SUBOPT_0x3
00016c 940e 04bc 	CALL SUBOPT_0x3
00016e 940e 04bc 	CALL SUBOPT_0x3
000170 940e 04c1 	CALL SUBOPT_0x4
                 ; 0000 007B   }
                 ; 0000 007C   counter++;
                 _0x1D:
000172 e9a8      	LDI  R26,LOW(_counter)
000173 e0b1      	LDI  R27,HIGH(_counter)
000174 940e 05b9 	CALL __GETD1P_INC
                +
000176 5fef     +SUBI R30 , LOW ( - 1 )
000177 4fff     +SBCI R31 , HIGH ( - 1 )
000178 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000179 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00017a 940e 05be 	CALL __PUTDP1_DEC
                 ; 0000 007D   number = counter;
00017c 91e0 0198 	LDS  R30,_counter
00017e 91f0 0199 	LDS  R31,_counter+1
000180 940e 04ca 	CALL SUBOPT_0x6
                 ; 0000 007E   milisecond = number % 100;
000182 e6e4      	LDI  R30,LOW(100)
000183 e0f0      	LDI  R31,HIGH(100)
000184 940e 0599 	CALL __MODW21
000186 87e8      	STD  Y+8,R30
000187 87f9      	STD  Y+8+1,R31
                 ; 0000 007F   number = number / 100;
000188 81ae      	LDD  R26,Y+6
000189 81bf      	LDD  R27,Y+6+1
00018a e6e4      	LDI  R30,LOW(100)
00018b e0f0      	LDI  R31,HIGH(100)
00018c 940e 04cf 	CALL SUBOPT_0x7
                 ; 0000 0080   second = number % 60;
00018e 940e 04d2 	CALL SUBOPT_0x8
000190 01af      	MOVW R20,R30
                 ; 0000 0081   number = number / 60;
000191 940e 04d7 	CALL SUBOPT_0x9
                 ; 0000 0082   minute = number % 60;
000193 940e 04d2 	CALL SUBOPT_0x8
000195 019f      	MOVW R18,R30
                 ; 0000 0083   number = number / 60;
000196 940e 04d7 	CALL SUBOPT_0x9
                 ; 0000 0084   hour = number % 60;
000198 940e 04d2 	CALL SUBOPT_0x8
00019a 018f      	MOVW R16,R30
                 ; 0000 0085   number = number / 60;
00019b 81ae      	LDD  R26,Y+6
00019c 81bf      	LDD  R27,Y+6+1
00019d e3ec      	LDI  R30,LOW(60)
00019e e0f0      	LDI  R31,HIGH(60)
00019f 940e 056f 	CALL __DIVW21
0001a1 83ee      	STD  Y+6,R30
0001a2 83ff      	STD  Y+6+1,R31
                 ; 0000 0086   show(hour,minute,second,milisecond);
0001a3 931a      	ST   -Y,R17
0001a4 930a      	ST   -Y,R16
0001a5 933a      	ST   -Y,R19
0001a6 932a      	ST   -Y,R18
0001a7 935a      	ST   -Y,R21
0001a8 934a      	ST   -Y,R20
0001a9 85ae      	LDD  R26,Y+14
0001aa 85bf      	LDD  R27,Y+14+1
0001ab dee6      	RCALL _show
                 ; 0000 0087 }
0001ac 940e 05d7 	CALL __LOADLOCR6
0001ae 962a      	ADIW R28,10
0001af 9508      	RET
                 ; .FEND
                 ;
                 ;void wave(){
                 ; 0000 0089 void wave(){
                 _wave:
                 ; .FSTART _wave
                 ; 0000 008A   int period;
                 ; 0000 008B   unsigned long a = PINA;
                 ; 0000 008C   period = (a * 39212)/1000+1;
0001b0 9724      	SBIW R28,4
0001b1 931a      	ST   -Y,R17
0001b2 930a      	ST   -Y,R16
                 ;	period -> R16,R17
                 ;	a -> Y+2
0001b3 b3e9      	IN   R30,0x19
0001b4 27ff      	CLR  R31
0001b5 2766      	CLR  R22
0001b6 2777      	CLR  R23
                +
0001b7 83ea     +STD Y + 2 , R30
0001b8 83fb     +STD Y + 2 + 1 , R31
0001b9 836c     +STD Y + 2 + 2 , R22
0001ba 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                +
0001bb e2ac     +LDI R26 , LOW ( 0x992C )
0001bc e9b9     +LDI R27 , HIGH ( 0x992C )
0001bd e080     +LDI R24 , BYTE3 ( 0x992C )
0001be e090     +LDI R25 , BYTE4 ( 0x992C )
                 	__GETD2N 0x992C
0001bf 940e 053c 	CALL __MULD12U
0001c1 01df      	MOVW R26,R30
0001c2 01cb      	MOVW R24,R22
                +
0001c3 eee8     +LDI R30 , LOW ( 0x3E8 )
0001c4 e0f3     +LDI R31 , HIGH ( 0x3E8 )
0001c5 e060     +LDI R22 , BYTE3 ( 0x3E8 )
0001c6 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0001c7 940e 0574 	CALL __DIVD21U
0001c9 9631      	ADIW R30,1
0001ca 018f      	MOVW R16,R30
                 ; 0000 008D   glob_priod = period;
0001cb 0148      	MOVW R8,R16
                 ; 0000 008E   TCNT1L = period & 0x00FF;
0001cc bdec      	OUT  0x2C,R30
                 ; 0000 008F   TCNT1H = period >> 8;
0001cd 940e 0532 	CALL __ASRW8
0001cf bded      	OUT  0x2D,R30
                 ; 0000 0090   lcd_gotoxy(7, 1);
0001d0 e0e7      	LDI  R30,LOW(7)
0001d1 93ea      	ST   -Y,R30
0001d2 e0a1      	LDI  R26,LOW(1)
0001d3 d0a4      	RCALL _lcd_gotoxy
                 ; 0000 0091   sprintf(temp, "TSG:%d", period);
0001d4 940e 04a6 	CALL SUBOPT_0x0
                +
0001d6 e8e9     +LDI R30 , LOW ( 2 * _0x0 + ( 31 ) )
0001d7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 31 ) )
                 	__POINTW1FN _0x0,31
0001d8 93fa      	ST   -Y,R31
0001d9 93ea      	ST   -Y,R30
0001da 01f8      	MOVW R30,R16
0001db 940e 04ab 	CALL SUBOPT_0x1
                 ; 0000 0092   lcd_puts(temp);
0001dd e9ac      	LDI  R26,LOW(_temp)
0001de e0b1      	LDI  R27,HIGH(_temp)
0001df d0c6      	RCALL _lcd_puts
                 ; 0000 0093 }
0001e0 8119      	LDD  R17,Y+1
0001e1 8108      	LDD  R16,Y+0
0001e2 9626      	ADIW R28,6
0001e3 9508      	RET
                 ; .FEND
                 ;
                 ;void init_timer1(){
                 ; 0000 0095 void init_timer1(){
                 _init_timer1:
                 ; .FSTART _init_timer1
                 ; 0000 0096   TCNT1L = glob_priod & 0x00FF;
0001e4 2de8      	MOV  R30,R8
0001e5 bdec      	OUT  0x2C,R30
                 ; 0000 0097   TCNT1H = glob_priod >> 8;
0001e6 01f4      	MOVW R30,R8
0001e7 940e 0532 	CALL __ASRW8
0001e9 bded      	OUT  0x2D,R30
                 ; 0000 0098 }
0001ea 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 009B {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0001eb 940e 04dc 	CALL SUBOPT_0xA
                 ; 0000 009C   parking();
0001ed df26      	RCALL _parking
                 ; 0000 009D }
0001ee c00f      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 00A0 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
0001ef 940e 04dc 	CALL SUBOPT_0xA
                 ; 0000 00A1  timer_counter();
0001f1 defc      	RCALL _timer_counter
                 ; 0000 00A2 }
0001f2 c00b      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 00A5 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0001f3 940e 04dc 	CALL SUBOPT_0xA
                 ; 0000 00A6     wave();
0001f5 dfba      	RCALL _wave
                 ; 0000 00A7 }
0001f6 c007      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00AA {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0001f7 940e 04dc 	CALL SUBOPT_0xA
                 ; 0000 00AB     clock();
0001f9 df60      	RCALL _clock
                 ; 0000 00AC }
0001fa c003      	RJMP _0x2A
                 ; .FEND
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 00AF {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0001fb 940e 04dc 	CALL SUBOPT_0xA
                 ; 0000 00B0   init_timer1();
0001fd dfe6      	RCALL _init_timer1
                 ; 0000 00B1 }
                 _0x2A:
0001fe 91e9      	LD   R30,Y+
0001ff bfef      	OUT  SREG,R30
000200 91f9      	LD   R31,Y+
000201 91e9      	LD   R30,Y+
000202 91b9      	LD   R27,Y+
000203 91a9      	LD   R26,Y+
000204 9199      	LD   R25,Y+
000205 9189      	LD   R24,Y+
000206 9179      	LD   R23,Y+
000207 9169      	LD   R22,Y+
000208 90f9      	LD   R15,Y+
000209 9019      	LD   R1,Y+
00020a 9009      	LD   R0,Y+
00020b 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00B4 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B5 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00020c e0e0      	LDI  R30,LOW(0)
00020d bbea      	OUT  0x1A,R30
                 ; 0000 00B6 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00020e bbeb      	OUT  0x1B,R30
                 ; 0000 00B7 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00020f bbe7      	OUT  0x17,R30
                 ; 0000 00B8 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000210 bbe8      	OUT  0x18,R30
                 ; 0000 00B9 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000211 efef      	LDI  R30,LOW(255)
000212 bbe4      	OUT  0x14,R30
                 ; 0000 00BA PORTC=0xFF;
000213 bbe5      	OUT  0x15,R30
                 ; 0000 00BB DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000214 efe0      	LDI  R30,LOW(240)
000215 bbe1      	OUT  0x11,R30
                 ; 0000 00BC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000216 e0e0      	LDI  R30,LOW(0)
000217 bbe2      	OUT  0x12,R30
                 ; 0000 00BD TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
000218 e0e5      	LDI  R30,LOW(5)
000219 bfe3      	OUT  0x33,R30
                 ; 0000 00BE TCNT0=0xB2;
00021a ebe2      	LDI  R30,LOW(178)
00021b bfe2      	OUT  0x32,R30
                 ; 0000 00BF OCR0=0x00;
00021c e0e0      	LDI  R30,LOW(0)
00021d bfec      	OUT  0x3C,R30
                 ; 0000 00C0 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00021e e5e0      	LDI  R30,LOW(80)
00021f bdef      	OUT  0x2F,R30
                 ; 0000 00C1 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
000220 e1ea      	LDI  R30,LOW(26)
000221 bdee      	OUT  0x2E,R30
                 ; 0000 00C2 TCNT1H=0x00;
000222 e0e0      	LDI  R30,LOW(0)
000223 bded      	OUT  0x2D,R30
                 ; 0000 00C3 TCNT1L=0x00;
000224 bdec      	OUT  0x2C,R30
                 ; 0000 00C4 ICR1H=0xFF;
000225 efef      	LDI  R30,LOW(255)
000226 bde7      	OUT  0x27,R30
                 ; 0000 00C5 ICR1L=0xFF;
000227 bde6      	OUT  0x26,R30
                 ; 0000 00C6 OCR1AH=0x00;
000228 e0e0      	LDI  R30,LOW(0)
000229 bdeb      	OUT  0x2B,R30
                 ; 0000 00C7 OCR1AL=0x00;
00022a bdea      	OUT  0x2A,R30
                 ; 0000 00C8 OCR1BH=0x00;
00022b bde9      	OUT  0x29,R30
                 ; 0000 00C9 OCR1BL=0x00;
00022c bde8      	OUT  0x28,R30
                 ; 0000 00CA ASSR=0<<AS2;
00022d bde2      	OUT  0x22,R30
                 ; 0000 00CB TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00022e bde5      	OUT  0x25,R30
                 ; 0000 00CC TCNT2=0x00;
00022f bde4      	OUT  0x24,R30
                 ; 0000 00CD OCR2=0x00;
000230 bde3      	OUT  0x23,R30
                 ; 0000 00CE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000231 e0e5      	LDI  R30,LOW(5)
000232 bfe9      	OUT  0x39,R30
                 ; 0000 00CF GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
000233 b7eb      	IN   R30,0x3B
000234 6ee0      	ORI  R30,LOW(0xE0)
000235 bfeb      	OUT  0x3B,R30
                 ; 0000 00D0 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000236 e0e0      	LDI  R30,LOW(0)
000237 bfe5      	OUT  0x35,R30
                 ; 0000 00D1 MCUCSR=(0<<ISC2);
000238 bfe4      	OUT  0x34,R30
                 ; 0000 00D2 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
000239 eee0      	LDI  R30,LOW(224)
00023a bfea      	OUT  0x3A,R30
                 ; 0000 00D3 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00023b e0e0      	LDI  R30,LOW(0)
00023c b9ea      	OUT  0xA,R30
                 ; 0000 00D4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00023d e8e0      	LDI  R30,LOW(128)
00023e b9e8      	OUT  0x8,R30
                 ; 0000 00D5 SFIOR=(0<<ACME);
00023f e0e0      	LDI  R30,LOW(0)
000240 bfe0      	OUT  0x30,R30
                 ; 0000 00D6 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000241 b9e6      	OUT  0x6,R30
                 ; 0000 00D7 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000242 b9ed      	OUT  0xD,R30
                 ; 0000 00D8 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000243 bfe6      	OUT  0x36,R30
                 ; 0000 00D9 lcd_init(16);
000244 e1a0      	LDI  R26,LOW(16)
000245 d071      	RCALL _lcd_init
                 ; 0000 00DA #asm("sei")
000246 9478      	sei
                 ; 0000 00DB 
                 ; 0000 00DC 
                 ; 0000 00DD TCCR0 = 0x00;
000247 e0e0      	LDI  R30,LOW(0)
000248 bfe3      	OUT  0x33,R30
                 ; 0000 00DE show(0,0,0,0);
000249 940e 04bc 	CALL SUBOPT_0x3
00024b 940e 04bc 	CALL SUBOPT_0x3
00024d 940e 04bc 	CALL SUBOPT_0x3
00024f 940e 04c1 	CALL SUBOPT_0x4
                 ; 0000 00DF lcd_gotoxy(0, 1);
000251 940e 04c5 	CALL SUBOPT_0x5
                 ; 0000 00E0 lcd_puts("CE:FULL");
                +
000253 e9a0     +LDI R26 , LOW ( _0x1E + ( 0 ) )
000254 e0b1     +LDI R27 , HIGH ( _0x1E + ( 0 ) )
                 	__POINTW2MN _0x1E,0
000255 d050      	RCALL _lcd_puts
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3 while (1)
                 _0x1F:
                 ; 0000 00E4       {}
000256 cfff      	RJMP _0x1F
                 ; 0000 00E5 }
                 _0x22:
000257 cfff      	RJMP _0x22
                 ; .FEND
                 
                 	.DSEG
                 _0x1E:
000190           	.BYTE 0x8
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000258 93aa      	ST   -Y,R26
000259 b3e5      	IN   R30,0x15
00025a 70ef      	ANDI R30,LOW(0xF)
00025b 2fae      	MOV  R26,R30
00025c 81e8      	LD   R30,Y
00025d 7fe0      	ANDI R30,LOW(0xF0)
00025e 2bea      	OR   R30,R26
00025f bbe5      	OUT  0x15,R30
                +
000260 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000261 958a     +DEC R24
000262 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000263 9aaa      	SBI  0x15,2
                +
000264 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000265 958a     +DEC R24
000266 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000267 98aa      	CBI  0x15,2
                +
000268 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000269 958a     +DEC R24
00026a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00026b c077      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00026c 93aa      	ST   -Y,R26
00026d 81a8      	LD   R26,Y
00026e dfe9      	RCALL __lcd_write_nibble_G100
00026f 81e8          ld    r30,y
000270 95e2          swap  r30
000271 83e8          st    y,r30
000272 81a8      	LD   R26,Y
000273 dfe4      	RCALL __lcd_write_nibble_G100
                +
000274 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000275 958a     +DEC R24
000276 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000277 c06b      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000278 93aa      	ST   -Y,R26
000279 81e8      	LD   R30,Y
00027a e0f0      	LDI  R31,0
00027b 55e4      	SUBI R30,LOW(-__base_y_G100)
00027c 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00027d 81e0      	LD   R30,Z
00027e 81a9      	LDD  R26,Y+1
00027f 0fae      	ADD  R26,R30
000280 dfeb      	RCALL __lcd_write_data
000281 8049      	LDD  R4,Y+1
000282 80b8      	LDD  R11,Y+0
000283 9622      	ADIW R28,2
000284 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000285 e0a2      	LDI  R26,LOW(2)
000286 940e 04ea 	CALL SUBOPT_0xB
000288 e0ac      	LDI  R26,LOW(12)
000289 dfe2      	RCALL __lcd_write_data
00028a e0a1      	LDI  R26,LOW(1)
00028b 940e 04ea 	CALL SUBOPT_0xB
00028d e0e0      	LDI  R30,LOW(0)
00028e 2ebe      	MOV  R11,R30
00028f 2e4e      	MOV  R4,R30
000290 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000291 93aa      	ST   -Y,R26
000292 81a8      	LD   R26,Y
000293 30aa      	CPI  R26,LOW(0xA)
000294 f011      	BREQ _0x2000005
000295 144a      	CP   R4,R10
000296 f048      	BRLO _0x2000004
                 _0x2000005:
000297 e0e0      	LDI  R30,LOW(0)
000298 93ea      	ST   -Y,R30
000299 94b3      	INC  R11
00029a 2dab      	MOV  R26,R11
00029b dfdc      	RCALL _lcd_gotoxy
00029c 81a8      	LD   R26,Y
00029d 30aa      	CPI  R26,LOW(0xA)
00029e f409      	BRNE _0x2000007
00029f c043      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0002a0 9443      	INC  R4
0002a1 9aa8      	SBI  0x15,0
0002a2 81a8      	LD   R26,Y
0002a3 dfc8      	RCALL __lcd_write_data
0002a4 98a8      	CBI  0x15,0
0002a5 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002a6 93ba      	ST   -Y,R27
0002a7 93aa      	ST   -Y,R26
0002a8 931a      	ST   -Y,R17
                 _0x2000008:
0002a9 81a9      	LDD  R26,Y+1
0002aa 81ba      	LDD  R27,Y+1+1
0002ab 91ed      	LD   R30,X+
0002ac 83a9      	STD  Y+1,R26
0002ad 83ba      	STD  Y+1+1,R27
0002ae 2f1e      	MOV  R17,R30
0002af 30e0      	CPI  R30,0
0002b0 f019      	BREQ _0x200000A
0002b1 2fa1      	MOV  R26,R17
0002b2 dfde      	RCALL _lcd_putchar
0002b3 cff5      	RJMP _0x2000008
                 _0x200000A:
0002b4 8118      	LDD  R17,Y+0
0002b5 9623      	ADIW R28,3
0002b6 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002b7 93aa      	ST   -Y,R26
0002b8 b3e4      	IN   R30,0x14
0002b9 6fe0      	ORI  R30,LOW(0xF0)
0002ba bbe4      	OUT  0x14,R30
0002bb 9aa2      	SBI  0x14,2
0002bc 9aa0      	SBI  0x14,0
0002bd 9aa1      	SBI  0x14,1
0002be 98aa      	CBI  0x15,2
0002bf 98a8      	CBI  0x15,0
0002c0 98a9      	CBI  0x15,1
0002c1 80a8      	LDD  R10,Y+0
0002c2 81e8      	LD   R30,Y
0002c3 58e0      	SUBI R30,-LOW(128)
                +
0002c4 93e0 01ae+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002c6 81e8      	LD   R30,Y
0002c7 54e0      	SUBI R30,-LOW(192)
                +
0002c8 93e0 01af+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002ca e1a4      	LDI  R26,LOW(20)
0002cb e0b0      	LDI  R27,0
0002cc 940e 0520 	CALL _delay_ms
0002ce 940e 04f0 	CALL SUBOPT_0xC
0002d0 940e 04f0 	CALL SUBOPT_0xC
0002d2 940e 04f0 	CALL SUBOPT_0xC
0002d4 e2a0      	LDI  R26,LOW(32)
0002d5 df82      	RCALL __lcd_write_nibble_G100
                +
0002d6 ec88     +LDI R24 , LOW ( 200 )
0002d7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002d8 9701     +SBIW R24 , 1
0002d9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002da e2a8      	LDI  R26,LOW(40)
0002db df90      	RCALL __lcd_write_data
0002dc e0a4      	LDI  R26,LOW(4)
0002dd df8e      	RCALL __lcd_write_data
0002de e8a5      	LDI  R26,LOW(133)
0002df df8c      	RCALL __lcd_write_data
0002e0 e0a6      	LDI  R26,LOW(6)
0002e1 df8a      	RCALL __lcd_write_data
0002e2 dfa2      	RCALL _lcd_clear
                 _0x2080002:
0002e3 9621      	ADIW R28,1
0002e4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0002e5 93ba      	ST   -Y,R27
0002e6 93aa      	ST   -Y,R26
0002e7 931a      	ST   -Y,R17
0002e8 930a      	ST   -Y,R16
0002e9 81aa      	LDD  R26,Y+2
0002ea 81bb      	LDD  R27,Y+2+1
0002eb 9612      	ADIW R26,2
0002ec 940e 05b5 	CALL __GETW1P
0002ee 9730      	SBIW R30,0
0002ef f159      	BREQ _0x2020010
0002f0 81aa      	LDD  R26,Y+2
0002f1 81bb      	LDD  R27,Y+2+1
0002f2 9614      	ADIW R26,4
0002f3 940e 05b5 	CALL __GETW1P
0002f5 018f      	MOVW R16,R30
0002f6 9730      	SBIW R30,0
0002f7 f061      	BREQ _0x2020012
                +
0002f8 3002     +CPI R16 , LOW ( 2 )
0002f9 e0e0     +LDI R30 , HIGH ( 2 )
0002fa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002fb f098      	BRLO _0x2020013
0002fc 01f8      	MOVW R30,R16
0002fd 9731      	SBIW R30,1
0002fe 018f      	MOVW R16,R30
                +
0002ff 81aa     +LDD R26 , Y + 2
000300 81bb     +LDD R27 , Y + 2 + 1
000301 9614     +ADIW R26 , 4
000302 93ed     +ST X + , R30
000303 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000304 81aa      	LDD  R26,Y+2
000305 81bb      	LDD  R27,Y+2+1
000306 9612      	ADIW R26,2
000307 91ed      	LD   R30,X+
000308 91fd      	LD   R31,X+
000309 9631      	ADIW R30,1
00030a 93fe      	ST   -X,R31
00030b 93ee      	ST   -X,R30
00030c 9731      	SBIW R30,1
00030d 81ac      	LDD  R26,Y+4
00030e 83a0      	STD  Z+0,R26
                 _0x2020013:
00030f 81aa      	LDD  R26,Y+2
000310 81bb      	LDD  R27,Y+2+1
000311 940e 05b5 	CALL __GETW1P
000313 23ff      	TST  R31
000314 f02a      	BRMI _0x2020014
000315 91ed      	LD   R30,X+
000316 91fd      	LD   R31,X+
000317 9631      	ADIW R30,1
000318 93fe      	ST   -X,R31
000319 93ee      	ST   -X,R30
                 _0x2020014:
00031a c006      	RJMP _0x2020015
                 _0x2020010:
00031b 81aa      	LDD  R26,Y+2
00031c 81bb      	LDD  R27,Y+2+1
00031d efef      	LDI  R30,LOW(65535)
00031e efff      	LDI  R31,HIGH(65535)
00031f 93ed      	ST   X+,R30
000320 93fc      	ST   X,R31
                 _0x2020015:
000321 8119      	LDD  R17,Y+1
000322 8108      	LDD  R16,Y+0
000323 9625      	ADIW R28,5
000324 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000325 93ba      	ST   -Y,R27
000326 93aa      	ST   -Y,R26
000327 9726      	SBIW R28,6
000328 940e 05d0 	CALL __SAVELOCR6
00032a e010      	LDI  R17,0
00032b 85ac      	LDD  R26,Y+12
00032c 85bd      	LDD  R27,Y+12+1
00032d e0e0      	LDI  R30,LOW(0)
00032e e0f0      	LDI  R31,HIGH(0)
00032f 93ed      	ST   X+,R30
000330 93fc      	ST   X,R31
                 _0x2020016:
000331 89ea      	LDD  R30,Y+18
000332 89fb      	LDD  R31,Y+18+1
000333 9631      	ADIW R30,1
000334 8bea      	STD  Y+18,R30
000335 8bfb      	STD  Y+18+1,R31
000336 9731      	SBIW R30,1
000337 91e4      	LPM  R30,Z
000338 2f2e      	MOV  R18,R30
000339 30e0      	CPI  R30,0
00033a f409      	BRNE PC+2
00033b c115      	RJMP _0x2020018
00033c 2fe1      	MOV  R30,R17
00033d 30e0      	CPI  R30,0
00033e f439      	BRNE _0x202001C
00033f 3225      	CPI  R18,37
000340 f411      	BRNE _0x202001D
000341 e011      	LDI  R17,LOW(1)
000342 c002      	RJMP _0x202001E
                 _0x202001D:
000343 940e 04f8 	CALL SUBOPT_0xD
                 _0x202001E:
000345 c10a      	RJMP _0x202001B
                 _0x202001C:
000346 30e1      	CPI  R30,LOW(0x1)
000347 f4a9      	BRNE _0x202001F
000348 3225      	CPI  R18,37
000349 f419      	BRNE _0x2020020
00034a 940e 04f8 	CALL SUBOPT_0xD
00034c c102      	RJMP _0x20200CC
                 _0x2020020:
00034d e012      	LDI  R17,LOW(2)
00034e e040      	LDI  R20,LOW(0)
00034f e000      	LDI  R16,LOW(0)
000350 322d      	CPI  R18,45
000351 f411      	BRNE _0x2020021
000352 e001      	LDI  R16,LOW(1)
000353 c0fc      	RJMP _0x202001B
                 _0x2020021:
000354 322b      	CPI  R18,43
000355 f411      	BRNE _0x2020022
000356 e24b      	LDI  R20,LOW(43)
000357 c0f8      	RJMP _0x202001B
                 _0x2020022:
000358 3220      	CPI  R18,32
000359 f411      	BRNE _0x2020023
00035a e240      	LDI  R20,LOW(32)
00035b c0f4      	RJMP _0x202001B
                 _0x2020023:
00035c c002      	RJMP _0x2020024
                 _0x202001F:
00035d 30e2      	CPI  R30,LOW(0x2)
00035e f439      	BRNE _0x2020025
                 _0x2020024:
00035f e050      	LDI  R21,LOW(0)
000360 e013      	LDI  R17,LOW(3)
000361 3320      	CPI  R18,48
000362 f411      	BRNE _0x2020026
000363 6800      	ORI  R16,LOW(128)
000364 c0eb      	RJMP _0x202001B
                 _0x2020026:
000365 c003      	RJMP _0x2020027
                 _0x2020025:
000366 30e3      	CPI  R30,LOW(0x3)
000367 f009      	BREQ PC+2
000368 c0e7      	RJMP _0x202001B
                 _0x2020027:
000369 3320      	CPI  R18,48
00036a f010      	BRLO _0x202002A
00036b 332a      	CPI  R18,58
00036c f008      	BRLO _0x202002B
                 _0x202002A:
00036d c007      	RJMP _0x2020029
                 _0x202002B:
00036e e0aa      	LDI  R26,LOW(10)
00036f 9f5a      	MUL  R21,R26
000370 2d50      	MOV  R21,R0
000371 2fe2      	MOV  R30,R18
000372 53e0      	SUBI R30,LOW(48)
000373 0f5e      	ADD  R21,R30
000374 c0db      	RJMP _0x202001B
                 _0x2020029:
000375 2fe2      	MOV  R30,R18
000376 36e3      	CPI  R30,LOW(0x63)
000377 f449      	BRNE _0x202002F
000378 940e 04ff 	CALL SUBOPT_0xE
00037a 89e8      	LDD  R30,Y+16
00037b 89f9      	LDD  R31,Y+16+1
00037c 81a4      	LDD  R26,Z+4
00037d 93aa      	ST   -Y,R26
00037e 940e 0505 	CALL SUBOPT_0xF
000380 c0ce      	RJMP _0x2020030
                 _0x202002F:
000381 37e3      	CPI  R30,LOW(0x73)
000382 f441      	BRNE _0x2020032
000383 940e 04ff 	CALL SUBOPT_0xE
000385 940e 050b 	CALL SUBOPT_0x10
000387 940e 048d 	CALL _strlen
000389 2f1e      	MOV  R17,R30
00038a c00a      	RJMP _0x2020033
                 _0x2020032:
00038b 37e0      	CPI  R30,LOW(0x70)
00038c f461      	BRNE _0x2020035
00038d 940e 04ff 	CALL SUBOPT_0xE
00038f 940e 050b 	CALL SUBOPT_0x10
000391 940e 0499 	CALL _strlenf
000393 2f1e      	MOV  R17,R30
000394 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000395 6002      	ORI  R16,LOW(2)
000396 770f      	ANDI R16,LOW(127)
000397 e030      	LDI  R19,LOW(0)
000398 c034      	RJMP _0x2020036
                 _0x2020035:
000399 36e4      	CPI  R30,LOW(0x64)
00039a f011      	BREQ _0x2020039
00039b 36e9      	CPI  R30,LOW(0x69)
00039c f411      	BRNE _0x202003A
                 _0x2020039:
00039d 6004      	ORI  R16,LOW(4)
00039e c002      	RJMP _0x202003B
                 _0x202003A:
00039f 37e5      	CPI  R30,LOW(0x75)
0003a0 f431      	BRNE _0x202003C
                 _0x202003B:
0003a1 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0003a2 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0003a3 83ee      	STD  Y+6,R30
0003a4 83ff      	STD  Y+6+1,R31
0003a5 e015      	LDI  R17,LOW(5)
0003a6 c00c      	RJMP _0x202003D
                 _0x202003C:
0003a7 35e8      	CPI  R30,LOW(0x58)
0003a8 f411      	BRNE _0x202003F
0003a9 6008      	ORI  R16,LOW(8)
0003aa c003      	RJMP _0x2020040
                 _0x202003F:
0003ab 37e8      	CPI  R30,LOW(0x78)
0003ac f009      	BREQ PC+2
0003ad c0a1      	RJMP _0x2020071
                 _0x2020040:
0003ae e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0003af e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0003b0 83ee      	STD  Y+6,R30
0003b1 83ff      	STD  Y+6+1,R31
0003b2 e014      	LDI  R17,LOW(4)
                 _0x202003D:
0003b3 ff02      	SBRS R16,2
0003b4 c014      	RJMP _0x2020042
0003b5 940e 04ff 	CALL SUBOPT_0xE
0003b7 940e 0511 	CALL SUBOPT_0x11
0003b9 85ab      	LDD  R26,Y+11
0003ba 23aa      	TST  R26
0003bb f43a      	BRPL _0x2020043
0003bc 85ea      	LDD  R30,Y+10
0003bd 85fb      	LDD  R31,Y+10+1
0003be 940e 052e 	CALL __ANEGW1
0003c0 87ea      	STD  Y+10,R30
0003c1 87fb      	STD  Y+10+1,R31
0003c2 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
0003c3 3040      	CPI  R20,0
0003c4 f011      	BREQ _0x2020044
0003c5 5f1f      	SUBI R17,-LOW(1)
0003c6 c001      	RJMP _0x2020045
                 _0x2020044:
0003c7 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0003c8 c004      	RJMP _0x2020046
                 _0x2020042:
0003c9 940e 04ff 	CALL SUBOPT_0xE
0003cb 940e 0511 	CALL SUBOPT_0x11
                 _0x2020046:
                 _0x2020036:
0003cd fd00      	SBRC R16,0
0003ce c011      	RJMP _0x2020047
                 _0x2020048:
0003cf 1715      	CP   R17,R21
0003d0 f478      	BRSH _0x202004A
0003d1 ff07      	SBRS R16,7
0003d2 c008      	RJMP _0x202004B
0003d3 ff02      	SBRS R16,2
0003d4 c004      	RJMP _0x202004C
0003d5 7f0b      	ANDI R16,LOW(251)
0003d6 2f24      	MOV  R18,R20
0003d7 5011      	SUBI R17,LOW(1)
0003d8 c001      	RJMP _0x202004D
                 _0x202004C:
0003d9 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003da c001      	RJMP _0x202004E
                 _0x202004B:
0003db e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003dc 940e 04f8 	CALL SUBOPT_0xD
0003de 5051      	SUBI R21,LOW(1)
0003df cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003e0 2f31      	MOV  R19,R17
0003e1 ff01      	SBRS R16,1
0003e2 c017      	RJMP _0x202004F
                 _0x2020050:
0003e3 3030      	CPI  R19,0
0003e4 f0a1      	BREQ _0x2020052
0003e5 ff03      	SBRS R16,3
0003e6 c006      	RJMP _0x2020053
0003e7 81ee      	LDD  R30,Y+6
0003e8 81ff      	LDD  R31,Y+6+1
0003e9 9125      	LPM  R18,Z+
0003ea 83ee      	STD  Y+6,R30
0003eb 83ff      	STD  Y+6+1,R31
0003ec c005      	RJMP _0x2020054
                 _0x2020053:
0003ed 81ae      	LDD  R26,Y+6
0003ee 81bf      	LDD  R27,Y+6+1
0003ef 912d      	LD   R18,X+
0003f0 83ae      	STD  Y+6,R26
0003f1 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003f2 940e 04f8 	CALL SUBOPT_0xD
0003f4 3050      	CPI  R21,0
0003f5 f009      	BREQ _0x2020055
0003f6 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003f7 5031      	SUBI R19,LOW(1)
0003f8 cfea      	RJMP _0x2020050
                 _0x2020052:
0003f9 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003fa e320      	LDI  R18,LOW(48)
0003fb 81ee      	LDD  R30,Y+6
0003fc 81ff      	LDD  R31,Y+6+1
0003fd 940e 05c3 	CALL __GETW1PF
0003ff 87e8      	STD  Y+8,R30
000400 87f9      	STD  Y+8+1,R31
000401 81ee      	LDD  R30,Y+6
000402 81ff      	LDD  R31,Y+6+1
000403 9632      	ADIW R30,2
000404 83ee      	STD  Y+6,R30
000405 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000406 85e8      	LDD  R30,Y+8
000407 85f9      	LDD  R31,Y+8+1
000408 85aa      	LDD  R26,Y+10
000409 85bb      	LDD  R27,Y+10+1
00040a 17ae      	CP   R26,R30
00040b 07bf      	CPC  R27,R31
00040c f050      	BRLO _0x202005C
00040d 5f2f      	SUBI R18,-LOW(1)
00040e 85a8      	LDD  R26,Y+8
00040f 85b9      	LDD  R27,Y+8+1
000410 85ea      	LDD  R30,Y+10
000411 85fb      	LDD  R31,Y+10+1
000412 1bea      	SUB  R30,R26
000413 0bfb      	SBC  R31,R27
000414 87ea      	STD  Y+10,R30
000415 87fb      	STD  Y+10+1,R31
000416 cfef      	RJMP _0x202005A
                 _0x202005C:
000417 332a      	CPI  R18,58
000418 f028      	BRLO _0x202005D
000419 ff03      	SBRS R16,3
00041a c002      	RJMP _0x202005E
00041b 5f29      	SUBI R18,-LOW(7)
00041c c001      	RJMP _0x202005F
                 _0x202005E:
00041d 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00041e fd04      	SBRC R16,4
00041f c01a      	RJMP _0x2020061
000420 3321      	CPI  R18,49
000421 f420      	BRSH _0x2020063
000422 85a8      	LDD  R26,Y+8
000423 85b9      	LDD  R27,Y+8+1
000424 9711      	SBIW R26,1
000425 f409      	BRNE _0x2020062
                 _0x2020063:
000426 c009      	RJMP _0x20200CD
                 _0x2020062:
000427 1753      	CP   R21,R19
000428 f010      	BRLO _0x2020067
000429 ff00      	SBRS R16,0
00042a c001      	RJMP _0x2020068
                 _0x2020067:
00042b c013      	RJMP _0x2020066
                 _0x2020068:
00042c e220      	LDI  R18,LOW(32)
00042d ff07      	SBRS R16,7
00042e c00b      	RJMP _0x2020069
00042f e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000430 6100      	ORI  R16,LOW(16)
000431 ff02      	SBRS R16,2
000432 c007      	RJMP _0x202006A
000433 7f0b      	ANDI R16,LOW(251)
000434 934a      	ST   -Y,R20
000435 940e 0505 	CALL SUBOPT_0xF
000437 3050      	CPI  R21,0
000438 f009      	BREQ _0x202006B
000439 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
00043a 940e 04f8 	CALL SUBOPT_0xD
00043c 3050      	CPI  R21,0
00043d f009      	BREQ _0x202006C
00043e 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00043f 5031      	SUBI R19,LOW(1)
000440 85a8      	LDD  R26,Y+8
000441 85b9      	LDD  R27,Y+8+1
000442 9712      	SBIW R26,2
000443 f008      	BRLO _0x2020059
000444 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000445 ff00      	SBRS R16,0
000446 c008      	RJMP _0x202006D
                 _0x202006E:
000447 3050      	CPI  R21,0
000448 f031      	BREQ _0x2020070
000449 5051      	SUBI R21,LOW(1)
00044a e2e0      	LDI  R30,LOW(32)
00044b 93ea      	ST   -Y,R30
00044c 940e 0505 	CALL SUBOPT_0xF
00044e cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00044f e010      	LDI  R17,LOW(0)
                 _0x202001B:
000450 cee0      	RJMP _0x2020016
                 _0x2020018:
000451 85ac      	LDD  R26,Y+12
000452 85bd      	LDD  R27,Y+12+1
000453 940e 05b5 	CALL __GETW1P
000455 940e 05d7 	CALL __LOADLOCR6
000457 9664      	ADIW R28,20
000458 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000459 92ff      	PUSH R15
00045a 2ef8      	MOV  R15,R24
00045b 9726      	SBIW R28,6
00045c 940e 05d2 	CALL __SAVELOCR4
00045e 940e 0519 	CALL SUBOPT_0x12
000460 9730      	SBIW R30,0
000461 f419      	BRNE _0x2020072
000462 efef      	LDI  R30,LOW(65535)
000463 efff      	LDI  R31,HIGH(65535)
000464 c023      	RJMP _0x2080001
                 _0x2020072:
000465 01de      	MOVW R26,R28
000466 9616      	ADIW R26,6
000467 940e 052a 	CALL __ADDW2R15
000469 018d      	MOVW R16,R26
00046a 940e 0519 	CALL SUBOPT_0x12
00046c 83ee      	STD  Y+6,R30
00046d 83ff      	STD  Y+6+1,R31
00046e e0e0      	LDI  R30,LOW(0)
00046f 87e8      	STD  Y+8,R30
000470 87e9      	STD  Y+8+1,R30
000471 01de      	MOVW R26,R28
000472 961a      	ADIW R26,10
000473 940e 052a 	CALL __ADDW2R15
000475 940e 05b5 	CALL __GETW1P
000477 93fa      	ST   -Y,R31
000478 93ea      	ST   -Y,R30
000479 931a      	ST   -Y,R17
00047a 930a      	ST   -Y,R16
00047b eee5      	LDI  R30,LOW(_put_buff_G101)
00047c e0f2      	LDI  R31,HIGH(_put_buff_G101)
00047d 93fa      	ST   -Y,R31
00047e 93ea      	ST   -Y,R30
00047f 01de      	MOVW R26,R28
000480 961a      	ADIW R26,10
000481 dea3      	RCALL __print_G101
000482 019f      	MOVW R18,R30
000483 81ae      	LDD  R26,Y+6
000484 81bf      	LDD  R27,Y+6+1
000485 e0e0      	LDI  R30,LOW(0)
000486 93ec      	ST   X,R30
000487 01f9      	MOVW R30,R18
                 _0x2080001:
000488 940e 05d9 	CALL __LOADLOCR4
00048a 962a      	ADIW R28,10
00048b 90ff      	POP  R15
00048c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00048d 93ba      	ST   -Y,R27
00048e 93aa      	ST   -Y,R26
00048f 91a9          ld   r26,y+
000490 91b9          ld   r27,y+
000491 27ee          clr  r30
000492 27ff          clr  r31
                 strlen0:
000493 916d          ld   r22,x+
000494 2366          tst  r22
000495 f011          breq strlen1
000496 9631          adiw r30,1
000497 cffb          rjmp strlen0
                 strlen1:
000498 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000499 93ba      	ST   -Y,R27
00049a 93aa      	ST   -Y,R26
00049b 27aa          clr  r26
00049c 27bb          clr  r27
00049d 91e9          ld   r30,y+
00049e 91f9          ld   r31,y+
                 strlenf0:
00049f 9005      	lpm  r0,z+
0004a0 2000          tst  r0
0004a1 f011          breq strlenf1
0004a2 9611          adiw r26,1
0004a3 cffb          rjmp strlenf0
                 strlenf1:
0004a4 01fd          movw r30,r26
0004a5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _counter:
000198           	.BYTE 0x4
                 _temp:
00019c           	.BYTE 0x10
                 __base_y_G100:
0001ac           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x0:
0004a6 e9ec      	LDI  R30,LOW(_temp)
0004a7 e0f1      	LDI  R31,HIGH(_temp)
0004a8 93fa      	ST   -Y,R31
0004a9 93ea      	ST   -Y,R30
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1:
0004ab 940e 0537 	CALL __CWD1
0004ad 940e 05c7 	CALL __PUTPARD1
0004af e084      	LDI  R24,4
0004b0 940e 0459 	CALL _sprintf
0004b2 9628      	ADIW R28,8
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2:
0004b4 93ea      	ST   -Y,R30
0004b5 e0a0      	LDI  R26,LOW(0)
0004b6 940e 0278 	CALL _lcd_gotoxy
0004b8 e9ac      	LDI  R26,LOW(_temp)
0004b9 e0b1      	LDI  R27,HIGH(_temp)
0004ba 940c 02a6 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0004bc e0e0      	LDI  R30,LOW(0)
0004bd e0f0      	LDI  R31,HIGH(0)
0004be 93fa      	ST   -Y,R31
0004bf 93ea      	ST   -Y,R30
0004c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0004c1 e0a0      	LDI  R26,LOW(0)
0004c2 e0b0      	LDI  R27,0
0004c3 940c 0092 	JMP  _show
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x5:
0004c5 e0e0      	LDI  R30,LOW(0)
0004c6 93ea      	ST   -Y,R30
0004c7 e0a1      	LDI  R26,LOW(1)
0004c8 940c 0278 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0004ca 83ee      	STD  Y+6,R30
0004cb 83ff      	STD  Y+6+1,R31
0004cc 81ae      	LDD  R26,Y+6
0004cd 81bf      	LDD  R27,Y+6+1
0004ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0004cf 940e 056f 	CALL __DIVW21
0004d1 cff8      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0004d2 e3ec      	LDI  R30,LOW(60)
0004d3 e0f0      	LDI  R31,HIGH(60)
0004d4 940e 0599 	CALL __MODW21
0004d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004d7 81ae      	LDD  R26,Y+6
0004d8 81bf      	LDD  R27,Y+6+1
0004d9 e3ec      	LDI  R30,LOW(60)
0004da e0f0      	LDI  R31,HIGH(60)
0004db cff3      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0xA:
0004dc 920a      	ST   -Y,R0
0004dd 921a      	ST   -Y,R1
0004de 92fa      	ST   -Y,R15
0004df 936a      	ST   -Y,R22
0004e0 937a      	ST   -Y,R23
0004e1 938a      	ST   -Y,R24
0004e2 939a      	ST   -Y,R25
0004e3 93aa      	ST   -Y,R26
0004e4 93ba      	ST   -Y,R27
0004e5 93ea      	ST   -Y,R30
0004e6 93fa      	ST   -Y,R31
0004e7 b7ef      	IN   R30,SREG
0004e8 93ea      	ST   -Y,R30
0004e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0004ea 940e 026c 	CALL __lcd_write_data
0004ec e0a3      	LDI  R26,LOW(3)
0004ed e0b0      	LDI  R27,0
0004ee 940c 0520 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
0004f0 e3a0      	LDI  R26,LOW(48)
0004f1 940e 0258 	CALL __lcd_write_nibble_G100
                +
0004f3 ec88     +LDI R24 , LOW ( 200 )
0004f4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004f5 9701     +SBIW R24 , 1
0004f6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
0004f8 932a      	ST   -Y,R18
0004f9 85ad      	LDD  R26,Y+13
0004fa 85be      	LDD  R27,Y+13+1
0004fb 85ef      	LDD  R30,Y+15
0004fc 89f8      	LDD  R31,Y+15+1
0004fd 9509      	ICALL
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xE:
0004ff 89e8      	LDD  R30,Y+16
000500 89f9      	LDD  R31,Y+16+1
000501 9734      	SBIW R30,4
000502 8be8      	STD  Y+16,R30
000503 8bf9      	STD  Y+16+1,R31
000504 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xF:
000505 85ad      	LDD  R26,Y+13
000506 85be      	LDD  R27,Y+13+1
000507 85ef      	LDD  R30,Y+15
000508 89f8      	LDD  R31,Y+15+1
000509 9509      	ICALL
00050a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
00050b 89a8      	LDD  R26,Y+16
00050c 89b9      	LDD  R27,Y+16+1
00050d 9614      	ADIW R26,4
00050e 940e 05b5 	CALL __GETW1P
000510 cfb9      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
000511 89a8      	LDD  R26,Y+16
000512 89b9      	LDD  R27,Y+16+1
000513 9614      	ADIW R26,4
000514 940e 05b5 	CALL __GETW1P
000516 87ea      	STD  Y+10,R30
000517 87fb      	STD  Y+10+1,R31
000518 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000519 01de      	MOVW R26,R28
00051a 961c      	ADIW R26,12
00051b 940e 052a 	CALL __ADDW2R15
00051d 940e 05b5 	CALL __GETW1P
00051f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000520 9610      	adiw r26,0
000521 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000522 ed80     +LDI R24 , LOW ( 0x7D0 )
000523 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000524 9701     +SBIW R24 , 1
000525 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000526 95a8      	wdr
000527 9711      	sbiw r26,1
000528 f7c9      	brne __delay_ms0
                 __delay_ms1:
000529 9508      	ret
                 
                 __ADDW2R15:
00052a 2400      	CLR  R0
00052b 0daf      	ADD  R26,R15
00052c 1db0      	ADC  R27,R0
00052d 9508      	RET
                 
                 __ANEGW1:
00052e 95f1      	NEG  R31
00052f 95e1      	NEG  R30
000530 40f0      	SBCI R31,0
000531 9508      	RET
                 
                 __ASRW8:
000532 2fef      	MOV  R30,R31
000533 27ff      	CLR  R31
000534 fde7      	SBRC R30,7
000535 efff      	SER  R31
000536 9508      	RET
                 
                 __CWD1:
000537 2f6f      	MOV  R22,R31
000538 0f66      	ADD  R22,R22
000539 0b66      	SBC  R22,R22
00053a 2f76      	MOV  R23,R22
00053b 9508      	RET
                 
                 __MULD12U:
00053c 9f7a      	MUL  R23,R26
00053d 2d70      	MOV  R23,R0
00053e 9f6b      	MUL  R22,R27
00053f 0d70      	ADD  R23,R0
000540 9ff8      	MUL  R31,R24
000541 0d70      	ADD  R23,R0
000542 9fe9      	MUL  R30,R25
000543 0d70      	ADD  R23,R0
000544 9f6a      	MUL  R22,R26
000545 2d60      	MOV  R22,R0
000546 0d71      	ADD  R23,R1
000547 9ffb      	MUL  R31,R27
000548 0d60      	ADD  R22,R0
000549 1d71      	ADC  R23,R1
00054a 9fe8      	MUL  R30,R24
00054b 0d60      	ADD  R22,R0
00054c 1d71      	ADC  R23,R1
00054d 2788      	CLR  R24
00054e 9ffa      	MUL  R31,R26
00054f 2df0      	MOV  R31,R0
000550 0d61      	ADD  R22,R1
000551 1f78      	ADC  R23,R24
000552 9feb      	MUL  R30,R27
000553 0df0      	ADD  R31,R0
000554 1d61      	ADC  R22,R1
000555 1f78      	ADC  R23,R24
000556 9fea      	MUL  R30,R26
000557 2de0      	MOV  R30,R0
000558 0df1      	ADD  R31,R1
000559 1f68      	ADC  R22,R24
00055a 1f78      	ADC  R23,R24
00055b 9508      	RET
                 
                 __DIVW21U:
00055c 2400      	CLR  R0
00055d 2411      	CLR  R1
00055e e190      	LDI  R25,16
                 __DIVW21U1:
00055f 0faa      	LSL  R26
000560 1fbb      	ROL  R27
000561 1c00      	ROL  R0
000562 1c11      	ROL  R1
000563 1a0e      	SUB  R0,R30
000564 0a1f      	SBC  R1,R31
000565 f418      	BRCC __DIVW21U2
000566 0e0e      	ADD  R0,R30
000567 1e1f      	ADC  R1,R31
000568 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000569 60a1      	SBR  R26,1
                 __DIVW21U3:
00056a 959a      	DEC  R25
00056b f799      	BRNE __DIVW21U1
00056c 01fd      	MOVW R30,R26
00056d 01d0      	MOVW R26,R0
00056e 9508      	RET
                 
                 __DIVW21:
00056f d037      	RCALL __CHKSIGNW
000570 dfeb      	RCALL __DIVW21U
000571 f40e      	BRTC __DIVW211
000572 dfbb      	RCALL __ANEGW1
                 __DIVW211:
000573 9508      	RET
                 
                 __DIVD21U:
000574 933f      	PUSH R19
000575 934f      	PUSH R20
000576 935f      	PUSH R21
000577 2400      	CLR  R0
000578 2411      	CLR  R1
000579 2744      	CLR  R20
00057a 2755      	CLR  R21
00057b e230      	LDI  R19,32
                 __DIVD21U1:
00057c 0faa      	LSL  R26
00057d 1fbb      	ROL  R27
00057e 1f88      	ROL  R24
00057f 1f99      	ROL  R25
000580 1c00      	ROL  R0
000581 1c11      	ROL  R1
000582 1f44      	ROL  R20
000583 1f55      	ROL  R21
000584 1a0e      	SUB  R0,R30
000585 0a1f      	SBC  R1,R31
000586 0b46      	SBC  R20,R22
000587 0b57      	SBC  R21,R23
000588 f428      	BRCC __DIVD21U2
000589 0e0e      	ADD  R0,R30
00058a 1e1f      	ADC  R1,R31
00058b 1f46      	ADC  R20,R22
00058c 1f57      	ADC  R21,R23
00058d c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00058e 60a1      	SBR  R26,1
                 __DIVD21U3:
00058f 953a      	DEC  R19
000590 f759      	BRNE __DIVD21U1
000591 01fd      	MOVW R30,R26
000592 01bc      	MOVW R22,R24
000593 01d0      	MOVW R26,R0
000594 01ca      	MOVW R24,R20
000595 915f      	POP  R21
000596 914f      	POP  R20
000597 913f      	POP  R19
000598 9508      	RET
                 
                 __MODW21:
000599 94e8      	CLT
00059a ffb7      	SBRS R27,7
00059b c004      	RJMP __MODW211
00059c 95a0      	COM  R26
00059d 95b0      	COM  R27
00059e 9611      	ADIW R26,1
00059f 9468      	SET
                 __MODW211:
0005a0 fdf7      	SBRC R31,7
0005a1 df8c      	RCALL __ANEGW1
0005a2 dfb9      	RCALL __DIVW21U
0005a3 01fd      	MOVW R30,R26
0005a4 f40e      	BRTC __MODW212
0005a5 df88      	RCALL __ANEGW1
                 __MODW212:
0005a6 9508      	RET
                 
                 __CHKSIGNW:
0005a7 94e8      	CLT
0005a8 fff7      	SBRS R31,7
0005a9 c002      	RJMP __CHKSW1
0005aa df83      	RCALL __ANEGW1
0005ab 9468      	SET
                 __CHKSW1:
0005ac ffb7      	SBRS R27,7
0005ad c006      	RJMP __CHKSW2
0005ae 95a0      	COM  R26
0005af 95b0      	COM  R27
0005b0 9611      	ADIW R26,1
0005b1 f800      	BLD  R0,0
0005b2 9403      	INC  R0
0005b3 fa00      	BST  R0,0
                 __CHKSW2:
0005b4 9508      	RET
                 
                 __GETW1P:
0005b5 91ed      	LD   R30,X+
0005b6 91fc      	LD   R31,X
0005b7 9711      	SBIW R26,1
0005b8 9508      	RET
                 
                 __GETD1P_INC:
0005b9 91ed      	LD   R30,X+
0005ba 91fd      	LD   R31,X+
0005bb 916d      	LD   R22,X+
0005bc 917d      	LD   R23,X+
0005bd 9508      	RET
                 
                 __PUTDP1_DEC:
0005be 937e      	ST   -X,R23
0005bf 936e      	ST   -X,R22
0005c0 93fe      	ST   -X,R31
0005c1 93ee      	ST   -X,R30
0005c2 9508      	RET
                 
                 __GETW1PF:
0005c3 9005      	LPM  R0,Z+
0005c4 91f4      	LPM  R31,Z
0005c5 2de0      	MOV  R30,R0
0005c6 9508      	RET
                 
                 __PUTPARD1:
0005c7 937a      	ST   -Y,R23
0005c8 936a      	ST   -Y,R22
0005c9 93fa      	ST   -Y,R31
0005ca 93ea      	ST   -Y,R30
0005cb 9508      	RET
                 
                 __CPD10:
0005cc 9730      	SBIW R30,0
0005cd 4060      	SBCI R22,0
0005ce 4070      	SBCI R23,0
0005cf 9508      	RET
                 
                 __SAVELOCR6:
0005d0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005d1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005d4 931a      	ST   -Y,R17
0005d5 930a      	ST   -Y,R16
0005d6 9508      	RET
                 
                 __LOADLOCR6:
0005d7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005d8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005d9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005da 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005db 8119      	LDD  R17,Y+1
0005dc 8108      	LD   R16,Y
0005dd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  40 r1 :  17 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   8 r7 :   3 
r8 :   3 r9 :   0 r10:   2 r11:   4 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  41 r17:  27 r18:  31 r19:  13 r20:  18 r21:  24 r22:  33 r23:  25 
r24:  37 r25:  12 r26: 144 r27:  69 r28:  19 r29:   1 r30: 302 r31: 112 
x  :  31 y  : 248 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  12 add   :  15 
adiw  :  31 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  19 
brge  :   5 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 119 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  19 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   6 cpc   :   3 cpi   :  33 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   3 jmp   :  26 ld    :  42 ldd   : 102 ldi   : 180 
lds   :   6 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  28 movw  :  35 
mul   :  11 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   8 out   :  52 pop   :   4 push  :   4 rcall :  31 ret   :  46 
reti  :   1 rjmp  :  87 rol   :  10 ror   :   0 sbc   :   6 sbci  :   7 
sbi   :   5 sbic  :   5 sbis  :   0 sbiw  :  27 sbr   :   2 sbrc  :   4 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   1 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  99 std   :  39 sts   :   6 sub   :   3 subi  :  17 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000bbc   2886    118   3004   16384  18.3%
[.dseg] 0x000060 0x0001b0      0     80     80    1024   7.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 9 warnings


AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 1\Debug\List\7.asm Sat Jun 03 10:23:58 2023

C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 1\Debug\List\7.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 1\Debug\List\7.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 1\Debug\List\7.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0095 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x20003:
000033 0000
000034 0000
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000037 0000
000038 0000
000039 0000
00003a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003b 0000
00003c 0000
00003d 0000
00003e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003f 0000
000040 0000
000041 0000
000042 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000043 0000
000044 0000
000045 0000
000046 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000047 0000
000048 0000
000049 0000
00004a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004b 0000
00004c 0000
00004d 0000
00004e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004f 0000
000050 0000
000051 0000
000052 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000053 0000
000054 0000
000055 0000
000056 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000057 0000
000058 0000
000059 0000
00005a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005b 0000
00005c 0000
00005d 0000
00005e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005f 0000
000060 0000
000061 0000
000062 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000063 0000
000064 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x20000:
000065 500d
000066 7261
000067 2074
000068 2031      	.DB  0xD,0x50,0x61,0x72,0x74,0x20,0x31,0x20
000069 7369
00006a 7220
00006b 6e75
00006c 696e      	.DB  0x69,0x73,0x20,0x72,0x75,0x6E,0x6E,0x69
00006d 676e
00006e 0d21
00006f 3c00
000070 003c      	.DB  0x6E,0x67,0x21,0xD,0x0,0x3C,0x3C,0x0
000071 3e3e
000072 3e00
000073 0d3e
000074 5000      	.DB  0x3E,0x3E,0x0,0x3E,0x3E,0xD,0x0,0x50
000075 7261
000076 2074
000077 2031
000078 7369      	.DB  0x61,0x72,0x74,0x20,0x31,0x20,0x69,0x73
000079 6520
00007a 646e
00007b 6e69
00007c 2167      	.DB  0x20,0x65,0x6E,0x64,0x69,0x6E,0x67,0x21
00007d 000d      	.DB  0xD,0x0
                 _0x2000003:
00007e c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00007f 0015      	.DW  0x15
000080 0160      	.DW  _0x20004
000081 00ca      	.DW  _0x20000*2
                 
000082 0003      	.DW  0x03
000083 0175      	.DW  _0x20004+21
000084 00df      	.DW  _0x20000*2+21
                 
000085 0003      	.DW  0x03
000086 0178      	.DW  _0x20004+24
000087 00e2      	.DW  _0x20000*2+24
                 
000088 0003      	.DW  0x03
000089 017b      	.DW  _0x20004+27
00008a 00df      	.DW  _0x20000*2+21
                 
00008b 0004      	.DW  0x04
00008c 017e      	.DW  _0x20004+30
00008d 00e5      	.DW  _0x20000*2+27
                 
00008e 0013      	.DW  0x13
00008f 0182      	.DW  _0x20004+34
000090 00e9      	.DW  _0x20000*2+31
                 
000091 0002      	.DW  0x02
000092 0195      	.DW  __base_y_G100
000093 00fc      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000094 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000095 94f8      	CLI
000096 27ee      	CLR  R30
000097 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000098 e0f1      	LDI  R31,1
000099 bffb      	OUT  GICR,R31
00009a bfeb      	OUT  GICR,R30
00009b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00009c e08d      	LDI  R24,(14-2)+1
00009d e0a2      	LDI  R26,2
00009e 27bb      	CLR  R27
                 __CLEAR_REG:
00009f 93ed      	ST   X+,R30
0000a0 958a      	DEC  R24
0000a1 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a2 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a3 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a4 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a5 93ed      	ST   X+,R30
0000a6 9701      	SBIW R24,1
0000a7 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a8 efee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a9 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000aa 9185      	LPM  R24,Z+
0000ab 9195      	LPM  R25,Z+
0000ac 9700      	SBIW R24,0
0000ad f061      	BREQ __GLOBAL_INI_END
0000ae 91a5      	LPM  R26,Z+
0000af 91b5      	LPM  R27,Z+
0000b0 9005      	LPM  R0,Z+
0000b1 9015      	LPM  R1,Z+
0000b2 01bf      	MOVW R22,R30
0000b3 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b4 9005      	LPM  R0,Z+
0000b5 920d      	ST   X+,R0
0000b6 9701      	SBIW R24,1
0000b7 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b8 01fb      	MOVW R30,R22
0000b9 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ba e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bb bfed      	OUT  SPL,R30
0000bc e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bd bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000be e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000bf e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c0 940c 00c2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 
                 ; 0000 0006       init();
0000c2 d042      	RCALL _init
                 ; 0000 0007       q1();
0000c3 d002      	RCALL _q1
                 ; 0000 0008       while (1)
                 _0x3:
                 ; 0000 0009       {
                 ; 0000 000A 
                 ; 0000 000B       }
0000c4 cfff      	RJMP _0x3
                 ; 0000 000C }
                 _0x6:
0000c5 cfff      	RJMP _0x6
                 ; .FEND
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <header.h>
                 ;
                 ;void q1()
                 ; 0001 0006 {
                 
                 	.CSEG
                 _q1:
                 ; .FSTART _q1
                 ; 0001 0007     unsigned char string[100] = "";
                 ; 0001 0008     unsigned char gt ='';
                 ; 0001 0009     int i = 0;
                 ; 0001 000A     puts("\rPart 1 is running!\r");
0000c6 97ef      	SBIW R28,63
0000c7 97a5      	SBIW R28,37
0000c8 e684      	LDI  R24,100
0000c9 e0a0      	LDI  R26,LOW(0)
0000ca e0b0      	LDI  R27,HIGH(0)
0000cb e6e6      	LDI  R30,LOW(_0x20003*2)
0000cc e0f0      	LDI  R31,HIGH(_0x20003*2)
0000cd 940e 020b 	CALL __INITLOCB
0000cf 940e 0201 	CALL __SAVELOCR4
                 ;	string -> Y+4
                 ;	gt -> R17
                 ;	i -> R18,R19
0000d1 e010      	LDI  R17,0
                +
0000d2 e020     +LDI R18 , LOW ( 0 )
0000d3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0000d4 e6a0     +LDI R26 , LOW ( _0x20004 + ( 0 ) )
0000d5 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 0 ) )
                 	__POINTW2MN _0x20004,0
0000d6 940e 01cd 	CALL _puts
                 ; 0001 000B     gt = getchar();
0000d8 940e 01db 	CALL SUBOPT_0x0
                 ; 0001 000C     putchar(gt);
                 ; 0001 000D     while (gt != '\r')
                 _0x20005:
0000da 301d      	CPI  R17,13
0000db f059      	BREQ _0x20007
                 ; 0001 000E     {
                 ; 0001 000F         string[i] = gt;
0000dc 01f9      	MOVW R30,R18
0000dd 01de      	MOVW R26,R28
0000de 9614      	ADIW R26,4
0000df 0fea      	ADD  R30,R26
0000e0 1ffb      	ADC  R31,R27
0000e1 8310      	ST   Z,R17
                 ; 0001 0010         gt = getchar();
0000e2 940e 01db 	CALL SUBOPT_0x0
                 ; 0001 0011         putchar(gt);
                 ; 0001 0012         i++;
                +
0000e4 5f2f     +SUBI R18 , LOW ( - 1 )
0000e5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0001 0013     }
0000e6 cff3      	RJMP _0x20005
                 _0x20007:
                 ; 0001 0014     lcd_puts("<<");
                +
0000e7 e7a5     +LDI R26 , LOW ( _0x20004 + ( 21 ) )
0000e8 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 21 ) )
                 	__POINTW2MN _0x20004,21
0000e9 d09f      	RCALL _lcd_puts
                 ; 0001 0015     lcd_puts(string);
0000ea 01de      	MOVW R26,R28
0000eb 9614      	ADIW R26,4
0000ec d09c      	RCALL _lcd_puts
                 ; 0001 0016     lcd_puts(">>");
                +
0000ed e7a8     +LDI R26 , LOW ( _0x20004 + ( 24 ) )
0000ee e0b1     +LDI R27 , HIGH ( _0x20004 + ( 24 ) )
                 	__POINTW2MN _0x20004,24
0000ef d099      	RCALL _lcd_puts
                 ; 0001 0017     puts("<<");
                +
0000f0 e7ab     +LDI R26 , LOW ( _0x20004 + ( 27 ) )
0000f1 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 27 ) )
                 	__POINTW2MN _0x20004,27
0000f2 940e 01cd 	CALL _puts
                 ; 0001 0018     puts(string);
0000f4 01de      	MOVW R26,R28
0000f5 9614      	ADIW R26,4
0000f6 940e 01cd 	CALL _puts
                 ; 0001 0019     puts(">>\r");
                +
0000f8 e7ae     +LDI R26 , LOW ( _0x20004 + ( 30 ) )
0000f9 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 30 ) )
                 	__POINTW2MN _0x20004,30
0000fa 940e 01cd 	CALL _puts
                 ; 0001 001A     puts("Part 1 is ending!\r");
                +
0000fc e8a2     +LDI R26 , LOW ( _0x20004 + ( 34 ) )
0000fd e0b1     +LDI R27 , HIGH ( _0x20004 + ( 34 ) )
                 	__POINTW2MN _0x20004,34
0000fe 940e 01cd 	CALL _puts
                 ; 0001 001B }
000100 940e 0206 	CALL __LOADLOCR4
000102 96ef      	ADIW R28,63
000103 96a9      	ADIW R28,41
000104 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20004:
000160           	.BYTE 0x35
                 ;
                 ;void init()
                 ; 0001 001E {
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0001 001F     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
000105 e0e0      	LDI  R30,LOW(0)
000106 bbea      	OUT  0x1A,R30
                 ; 0001 0020     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
000107 bbeb      	OUT  0x1B,R30
                 ; 0001 0021     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
000108 bbe7      	OUT  0x17,R30
                 ; 0001 0022     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
000109 bbe8      	OUT  0x18,R30
                 ; 0001 0023     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
00010a efef      	LDI  R30,LOW(255)
00010b bbe4      	OUT  0x14,R30
                 ; 0001 0024     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
00010c e0e0      	LDI  R30,LOW(0)
00010d bbe5      	OUT  0x15,R30
                 ; 0001 0025     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
00010e bbe1      	OUT  0x11,R30
                 ; 0001 0026     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
00010f bbe2      	OUT  0x12,R30
                 ; 0001 0027     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
000110 bfe3      	OUT  0x33,R30
                 ; 0001 0028     TCNT0 = 0x00;
000111 bfe2      	OUT  0x32,R30
                 ; 0001 0029     OCR0 = 0x00;
000112 bfec      	OUT  0x3C,R30
                 ; 0001 002A     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
000113 bdef      	OUT  0x2F,R30
                 ; 0001 002B     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
000114 bdee      	OUT  0x2E,R30
                 ; 0001 002C     TCNT1H = 0x00;
000115 bded      	OUT  0x2D,R30
                 ; 0001 002D     TCNT1L = 0x00;
000116 bdec      	OUT  0x2C,R30
                 ; 0001 002E     ICR1H = 0x00;
000117 bde7      	OUT  0x27,R30
                 ; 0001 002F     ICR1L = 0x00;
000118 bde6      	OUT  0x26,R30
                 ; 0001 0030     OCR1AH = 0x00;
000119 bdeb      	OUT  0x2B,R30
                 ; 0001 0031     OCR1AL = 0x00;
00011a bdea      	OUT  0x2A,R30
                 ; 0001 0032     OCR1BH = 0x00;
00011b bde9      	OUT  0x29,R30
                 ; 0001 0033     OCR1BL = 0x00;
00011c bde8      	OUT  0x28,R30
                 ; 0001 0034     ASSR = 0 << AS2;
00011d bde2      	OUT  0x22,R30
                 ; 0001 0035     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
00011e bde5      	OUT  0x25,R30
                 ; 0001 0036     TCNT2 = 0x00;
00011f bde4      	OUT  0x24,R30
                 ; 0001 0037     OCR2 = 0x00;
000120 bde3      	OUT  0x23,R30
                 ; 0001 0038     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
000121 bfe9      	OUT  0x39,R30
                 ; 0001 0039     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
000122 bfe5      	OUT  0x35,R30
                 ; 0001 003A     MCUCSR = (0 << ISC2);
000123 bfe4      	OUT  0x34,R30
                 ; 0001 003B     UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << UPE) | (0 << U2X) | (0 << MPCM);
000124 b9eb      	OUT  0xB,R30
                 ; 0001 003C     UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (1 << RXEN) | (1 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
000125 e1e8      	LDI  R30,LOW(24)
000126 b9ea      	OUT  0xA,R30
                 ; 0001 003D     UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 <<  ...
000127 e8e6      	LDI  R30,LOW(134)
000128 bde0      	OUT  0x20,R30
                 ; 0001 003E     UBRRH = 0x00;
000129 e0e0      	LDI  R30,LOW(0)
00012a bde0      	OUT  0x20,R30
                 ; 0001 003F     UBRRL = 0x33;
00012b e3e3      	LDI  R30,LOW(51)
00012c b9e9      	OUT  0x9,R30
                 ; 0001 0040     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
00012d e8e0      	LDI  R30,LOW(128)
00012e b9e8      	OUT  0x8,R30
                 ; 0001 0041     SFIOR = (0 << ACME);
00012f e0e0      	LDI  R30,LOW(0)
000130 bfe0      	OUT  0x30,R30
                 ; 0001 0042     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
000131 b9e6      	OUT  0x6,R30
                 ; 0001 0043     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
000132 b9ed      	OUT  0xD,R30
                 ; 0001 0044     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
000133 bfe6      	OUT  0x36,R30
                 ; 0001 0045     lcd_init(16);
000134 e1a0      	LDI  R26,LOW(16)
000135 d05e      	RCALL _lcd_init
                 ; 0001 0046 }
000136 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000137 93aa      	ST   -Y,R26
000138 b3e5      	IN   R30,0x15
000139 70ef      	ANDI R30,LOW(0xF)
00013a 2fae      	MOV  R26,R30
00013b 81e8      	LD   R30,Y
00013c 7fe0      	ANDI R30,LOW(0xF0)
00013d 2bea      	OR   R30,R26
00013e bbe5      	OUT  0x15,R30
                +
00013f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000140 958a     +DEC R24
000141 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000142 9aaa      	SBI  0x15,2
                +
000143 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000144 958a     +DEC R24
000145 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000146 98aa      	CBI  0x15,2
                +
000147 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000148 958a     +DEC R24
000149 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00014a 940c 01cb 	JMP  _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00014c 93aa      	ST   -Y,R26
00014d 81a8      	LD   R26,Y
00014e dfe8      	RCALL __lcd_write_nibble_G100
00014f 81e8          ld    r30,y
000150 95e2          swap  r30
000151 83e8          st    y,r30
000152 81a8      	LD   R26,Y
000153 dfe3      	RCALL __lcd_write_nibble_G100
                +
000154 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000155 958a     +DEC R24
000156 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000157 940c 01cb 	JMP  _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000159 93aa      	ST   -Y,R26
00015a 81e8      	LD   R30,Y
00015b e0f0      	LDI  R31,0
00015c 56eb      	SUBI R30,LOW(-__base_y_G100)
00015d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00015e 81e0      	LD   R30,Z
00015f 81a9      	LDD  R26,Y+1
000160 0fae      	ADD  R26,R30
000161 dfea      	RCALL __lcd_write_data
000162 8059      	LDD  R5,Y+1
000163 8048      	LDD  R4,Y+0
000164 9622      	ADIW R28,2
000165 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000166 e0a2      	LDI  R26,LOW(2)
000167 940e 01e1 	CALL SUBOPT_0x1
000169 e0ac      	LDI  R26,LOW(12)
00016a dfe1      	RCALL __lcd_write_data
00016b e0a1      	LDI  R26,LOW(1)
00016c 940e 01e1 	CALL SUBOPT_0x1
00016e e0e0      	LDI  R30,LOW(0)
00016f 2e4e      	MOV  R4,R30
000170 2e5e      	MOV  R5,R30
000171 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000172 93aa      	ST   -Y,R26
000173 81a8      	LD   R26,Y
000174 30aa      	CPI  R26,LOW(0xA)
000175 f011      	BREQ _0x2000005
000176 1457      	CP   R5,R7
000177 f050      	BRLO _0x2000004
                 _0x2000005:
000178 e0e0      	LDI  R30,LOW(0)
000179 93ea      	ST   -Y,R30
00017a 9443      	INC  R4
00017b 2da4      	MOV  R26,R4
00017c dfdc      	RCALL _lcd_gotoxy
00017d 81a8      	LD   R26,Y
00017e 30aa      	CPI  R26,LOW(0xA)
00017f f411      	BRNE _0x2000007
000180 940c 01cb 	JMP  _0x2080002
                 _0x2000007:
                 _0x2000004:
000182 9453      	INC  R5
000183 9aa8      	SBI  0x15,0
000184 81a8      	LD   R26,Y
000185 dfc6      	RCALL __lcd_write_data
000186 98a8      	CBI  0x15,0
000187 940c 01cb 	JMP  _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000189 93ba      	ST   -Y,R27
00018a 93aa      	ST   -Y,R26
00018b 931a      	ST   -Y,R17
                 _0x2000008:
00018c 940e 01e7 	CALL SUBOPT_0x2
00018e f019      	BREQ _0x200000A
00018f 2fa1      	MOV  R26,R17
000190 dfe1      	RCALL _lcd_putchar
000191 cffa      	RJMP _0x2000008
                 _0x200000A:
000192 940c 01d8 	JMP  _0x2080001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000194 93aa      	ST   -Y,R26
000195 b3e4      	IN   R30,0x14
000196 6fe0      	ORI  R30,LOW(0xF0)
000197 bbe4      	OUT  0x14,R30
000198 9aa2      	SBI  0x14,2
000199 9aa0      	SBI  0x14,0
00019a 9aa1      	SBI  0x14,1
00019b 98aa      	CBI  0x15,2
00019c 98a8      	CBI  0x15,0
00019d 98a9      	CBI  0x15,1
00019e 8078      	LDD  R7,Y+0
00019f 81e8      	LD   R30,Y
0001a0 58e0      	SUBI R30,-LOW(128)
                +
0001a1 93e0 0197+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001a3 81e8      	LD   R30,Y
0001a4 54e0      	SUBI R30,-LOW(192)
                +
0001a5 93e0 0198+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001a7 e1a4      	LDI  R26,LOW(20)
0001a8 e0b0      	LDI  R27,0
0001a9 940e 01f7 	CALL _delay_ms
0001ab 940e 01ef 	CALL SUBOPT_0x3
0001ad 940e 01ef 	CALL SUBOPT_0x3
0001af 940e 01ef 	CALL SUBOPT_0x3
0001b1 e2a0      	LDI  R26,LOW(32)
0001b2 df84      	RCALL __lcd_write_nibble_G100
                +
0001b3 ec88     +LDI R24 , LOW ( 200 )
0001b4 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001b5 9701     +SBIW R24 , 1
0001b6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b7 e2a8      	LDI  R26,LOW(40)
0001b8 df93      	RCALL __lcd_write_data
0001b9 e0a4      	LDI  R26,LOW(4)
0001ba df91      	RCALL __lcd_write_data
0001bb e8a5      	LDI  R26,LOW(133)
0001bc df8f      	RCALL __lcd_write_data
0001bd e0a6      	LDI  R26,LOW(6)
0001be df8d      	RCALL __lcd_write_data
0001bf dfa6      	RCALL _lcd_clear
0001c0 940c 01cb 	JMP  _0x2080002
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 getchar0:
0001c2 9b5f           sbis usr,rxc
0001c3 cffe           rjmp getchar0
0001c4 b1ec           in   r30,udr
0001c5 9508      	RET
                 ; .FEND
                 _putchar:
                 ; .FSTART _putchar
0001c6 93aa      	ST   -Y,R26
                 putchar0:
0001c7 9b5d           sbis usr,udre
0001c8 cffe           rjmp putchar0
0001c9 81e8           ld   r30,y
0001ca b9ec           out  udr,r30
                 _0x2080002:
0001cb 9621      	ADIW R28,1
0001cc 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0001cd 93ba      	ST   -Y,R27
0001ce 93aa      	ST   -Y,R26
0001cf 931a      	ST   -Y,R17
                 _0x2020003:
0001d0 940e 01e7 	CALL SUBOPT_0x2
0001d2 f019      	BREQ _0x2020005
0001d3 2fa1      	MOV  R26,R17
0001d4 dff1      	RCALL _putchar
0001d5 cffa      	RJMP _0x2020003
                 _0x2020005:
0001d6 e0aa      	LDI  R26,LOW(10)
0001d7 dfee      	RCALL _putchar
                 _0x2080001:
0001d8 8118      	LDD  R17,Y+0
0001d9 9623      	ADIW R28,3
0001da 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 __base_y_G100:
000195           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001db 940e 01c2 	CALL _getchar
0001dd 2f1e      	MOV  R17,R30
0001de 2fa1      	MOV  R26,R17
0001df 940c 01c6 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001e1 940e 014c 	CALL __lcd_write_data
0001e3 e0a3      	LDI  R26,LOW(3)
0001e4 e0b0      	LDI  R27,0
0001e5 940c 01f7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0001e7 81a9      	LDD  R26,Y+1
0001e8 81ba      	LDD  R27,Y+1+1
0001e9 91ed      	LD   R30,X+
0001ea 83a9      	STD  Y+1,R26
0001eb 83ba      	STD  Y+1+1,R27
0001ec 2f1e      	MOV  R17,R30
0001ed 30e0      	CPI  R30,0
0001ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
0001ef e3a0      	LDI  R26,LOW(48)
0001f0 940e 0137 	CALL __lcd_write_nibble_G100
                +
0001f2 ec88     +LDI R24 , LOW ( 200 )
0001f3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001f4 9701     +SBIW R24 , 1
0001f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001f6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001f7 9610      	adiw r26,0
0001f8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f9 ed80     +LDI R24 , LOW ( 0x7D0 )
0001fa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001fb 9701     +SBIW R24 , 1
0001fc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001fd 95a8      	wdr
0001fe 9711      	sbiw r26,1
0001ff f7c9      	brne __delay_ms0
                 __delay_ms1:
000200 9508      	ret
                 
                 __SAVELOCR4:
000201 933a      	ST   -Y,R19
                 __SAVELOCR3:
000202 932a      	ST   -Y,R18
                 __SAVELOCR2:
000203 931a      	ST   -Y,R17
000204 930a      	ST   -Y,R16
000205 9508      	RET
                 
                 __LOADLOCR4:
000206 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000207 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000208 8119      	LDD  R17,Y+1
000209 8108      	LD   R16,Y
00020a 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
00020b 0fac      	ADD  R26,R28
00020c 1fbd      	ADC  R27,R29
                 __INITLOC0:
00020d 9005      	LPM  R0,Z+
00020e 920d      	ST   X+,R0
00020f 958a      	DEC  R24
000210 f7e1      	BRNE __INITLOC0
000211 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   2 r17:  13 r18:   5 r19:   4 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  23 r25:   5 r26:  58 r27:  17 r28:  12 r29:   2 r30:  99 r31:   7 
x  :   5 y  :  42 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   9 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   6 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  13 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  21 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   0 cpi   :   4 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   2 jmp   :  30 ld    :  14 ldd   :  10 ldi   :  69 
lds   :   0 lpm   :   8 lsl   :   0 lsr   :   0 mov   :   9 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  47 pop   :   0 push  :   0 rcall :  21 ret   :  13 
reti  :   0 rjmp  :   8 rol   :   0 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   2 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   2 sts   :   2 sub   :   0 subi  :   4 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 39 out of 116 (33.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000424    846    214   1060   16384   6.5%
[.dseg] 0x000060 0x000199      0     57     57    1024   5.6%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings

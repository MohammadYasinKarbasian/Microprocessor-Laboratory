;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void q2()
; 0001 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005     unsigned char string[10] = "";
; 0001 0006     unsigned char gt ='';
; 0001 0007     int dig = 0;
; 0001 0008     puts("part 2 is running!\r");
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;	string -> Y+4
;	gt -> R17
;	dig -> R18,R19
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0009 
; 0001 000A     gt = getchar_nv();
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 000B     if (gt == '0')
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000C     {
; 0001 000D         dig = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 000E     }
; 0001 000F     else if (gt == '1')
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0010     {
; 0001 0011         dig = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0012     }
; 0001 0013     else if (gt == '2')
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0014     {
; 0001 0015         dig = 2;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0016     }
; 0001 0017     else if (gt == '3')
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 0018     {
; 0001 0019         dig = 3;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001A     }
; 0001 001B     else if (gt == '4')
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 001C     {
; 0001 001D         dig = 4;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 001E     }
; 0001 001F     else if (gt == '5')
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0020     {
; 0001 0021         dig = 5;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0022     }
; 0001 0023     else if (gt == '6')
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0024     {
; 0001 0025         dig = 6;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0026     }
; 0001 0027     else if (gt == '7')
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 0028     {
; 0001 0029         dig = 7;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 002A     }
; 0001 002B     else if (gt == '8')
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 002C     {
; 0001 002D         dig = 8;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 002E     }
; 0001 002F     else if (gt == '9')
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0030     {
; 0001 0031         dig = 9;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0001 0032     }
; 0001 0033     else
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0001 0034     {
; 0001 0035         dig = 11;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0001 0036     }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0037 
; 0001 0038     if (dig < 10)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 0039     {
; 0001 003A         puts("\rTx:");
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 003B         putchar(gt);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0001 003C         sprintf(string, "\rRx: Data=%d and 10*Data=%d \r", dig, 10 * dig);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0001 003D 
; 0001 003E         puts(string);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 003F         lcd_clear();
;PCODE: $0000008B VOL: 0
; 0001 0040         sprintf(string, "Tx: %d", dig);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0041         lcd_puts(string);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0042         sprintf(string, "Rx: Data=%d and 10*Data=%d", dig, 10 * dig);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 0043         lcd_gotoxy(0, 1);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0001 0044         lcd_puts(string);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 0045     }
; 0001 0046 
; 0001 0047     else if (gt == 'D')
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0001 0048     {
; 0001 0049         lcd_clear();
;PCODE: $000000B6 VOL: 0
; 0001 004A         lcd_puts("LCD delete");
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 004B         puts("\rLCD delete\r");
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 004C     }
; 0001 004D 
; 0001 004E     else if (gt == 'H')
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 004F     {
; 0001 0050         puts("\rThis is AZ7 of Microprocessor Lab at IUT\r");
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0001 0051         lcd_clear();
;PCODE: $000000C5 VOL: 0
; 0001 0052         lcd_puts("This is AZ7 of Microprocessor Lab at IUT");
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0001 0053     }
; 0001 0054 
; 0001 0055     else if (gt == 'E')
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0056     {
; 0001 0057         puts("\rRx: END of this part\r");
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 0058         lcd_clear();
;PCODE: $000000D1 VOL: 0
; 0001 0059         lcd_puts("Rx: END of this part");
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 005A         return;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 005B     }
; 0001 005C     else
;PCODE: $000000D8 VOL: 0
; 0001 005D     {
; 0001 005E         puts("\rTx:");
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 005F         putchar(gt);
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 0060         puts("\rRx: input letter is ");
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0061         putchar('\"');
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 0062         putchar(gt);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0001 0063         putchar('\"');
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0064         puts("\r");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0065         lcd_clear();
;PCODE: $000000EA VOL: 0
; 0001 0066         sprintf(string, "Tx: %c", gt);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 0067         lcd_puts(string);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 0068         sprintf(string, "Rx: input letter is \"%c\" ", gt);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0001 0069         lcd_gotoxy(0, 1);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 006A         lcd_puts(string);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 006B     }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0001 006C     puts("\rPart 2 is ending!\r");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0001 006D }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0

	.DSEG
_0x20004:
	.BYTE 0xE2
;
;void q3()
; 0001 0070 {

	.CSEG
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0001 0071     unsigned char string[100] = "";
; 0001 0072     unsigned char gt ='';
; 0001 0073     int counter = 0;
; 0001 0074     int dig = 1;
; 0001 0075     int index = 0;
; 0001 0076     puts("part 3 is running!\r");
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;	string -> Y+8
;	gt -> R17
;	counter -> R18,R19
;	dig -> R20,R21
;	index -> Y+6
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 0077     gt = getchar_nv();
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 0078     putchar(gt);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 0079     while (gt != '\r')
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 007A     {
; 0001 007B         string[counter] = gt;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 007C         gt = getchar_nv();
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0001 007D         putchar(gt);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 007E         counter++;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 007F     }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 0080     lcd_clear();
;PCODE: $0000013B VOL: 0
; 0001 0081 
; 0001 0082     for (index = 2; string[index] != ')'; index++)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 0083     {
; 0001 0084         if (!((string[index] == '0') || (string[index] == '1') || (string[index] == '2') || (string[index] == '3') || (s ...
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 0085             dig = 0;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0001 0086     }
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0001 0087 
; 0001 0088     if (dig == 0)
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0001 0089     {
; 0001 008A         puts("\rTx:");
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0001 008B         puts(string);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0001 008C         putchar('\r');
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0001 008D         puts("\rFrame must be 5 integer\r");
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 008E         sprintf(string, "Tx: %d", dig);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0001 008F         lcd_clear();
;PCODE: $000001AA VOL: 0
; 0001 0090         lcd_puts(string);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0001 0091         lcd_gotoxy(0, 1);
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0001 0092         lcd_puts("Frame must be 5 integer");
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0001 0093     }
; 0001 0094     else if (counter != 9)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0001 0095     {
; 0001 0096         puts("\rTx:");
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0001 0097         puts(string);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0001 0098         putchar('\r');
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0001 0099         puts("\rIncorrect frame size.\r");
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0001 009A         lcd_clear();
;PCODE: $000001C3 VOL: 0
; 0001 009B         lcd_puts("Tx:");
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0001 009C         lcd_puts(string);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0001 009D 
; 0001 009E         lcd_gotoxy(0, 1);
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0001 009F         lcd_puts("Incorrect frame size.");
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0001 00A0     }
; 0001 00A1     else
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0001 00A2     {
; 0001 00A3         puts("\rTx:");
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0001 00A4         puts(string);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0001 00A5         putchar('\r');
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0001 00A6         puts("\rThe frame is correct\r");
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0001 00A7         lcd_clear();
;PCODE: $000001DC VOL: 0
; 0001 00A8         lcd_puts("Tx:");
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0001 00A9         lcd_puts(string);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0001 00AA         lcd_gotoxy(0, 1);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0001 00AB         lcd_puts("The frame is correct");
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 00AC     }
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0001 00AD     puts("\rPart 3 is ending!");
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 00AE     putchar('\r');
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0001 00AF     // getchar_nv();
; 0001 00B0 }
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0

	.DSEG
_0x20022:
	.BYTE 0xCA
;
;void init(void)
; 0001 00B3 {

	.CSEG
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0001 00B4     float temp1 = 0;
; 0001 00B5     int temp2 = 0;
; 0001 00B6     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;	temp1 -> Y+2
;	temp2 -> R16,R17
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0001 00B7     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0001 00B8     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0001 00B9     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0001 00BA     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0001 00BB     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0001 00BC     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0001 00BD     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0001 00BE     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0001 00BF     TCNT0 = 0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0001 00C0     OCR0 = 0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0001 00C1     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0001 00C2     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0001 00C3     TCNT1H = 0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0001 00C4     TCNT1L = 0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0001 00C5     ICR1H = 0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0001 00C6     ICR1L = 0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0001 00C7     OCR1AH = 0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0001 00C8     OCR1AL = 0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0001 00C9     OCR1BH = 0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0001 00CA     OCR1BL = 0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0001 00CB     ASSR = 0 << AS2;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 00CC     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0001 00CD     TCNT2 = 0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0001 00CE     OCR2 = 0x00;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0001 00CF     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0001 00D0     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0001 00D1     MCUCSR = (0 << ISC2);
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0001 00D2 
; 0001 00D3     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0001 00D4     SFIOR = (0 << ACME);
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0001 00D5     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 00D6     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0001 00D7     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0001 00D8     lcd_init(16);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0001 00D9 
; 0001 00DA     UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << UPE) | (0 << U2X) | (0 << MPCM);
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0001 00DB     UCSRB = (1 << RXCIE) | (1 << TXCIE) | (0 << UDRIE) | (1 << RXEN) | (1 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0001 00DC     UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 <<  ...
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0001 00DD 
; 0001 00DE     temp1 = ((8 * 1000000) / (16 * 9600)) - 1;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0001 00DF     temp2 = (int)temp1;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0001 00E0 
; 0001 00E1     if (temp2 < 0xFF)
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0001 00E2     {
; 0001 00E3         UBRRL = temp2;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 00E4     }
; 0001 00E5     else
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0001 00E6     {
; 0001 00E7         UBRRL = temp2 % 0xFF;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0001 00E8         UBRRH = temp2 / 0xFF;
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0001 00E9     }
;PCODE: $00000261 VOL: 0
; 0001 00EA #asm("sei")
;PCODE: $00000262 VOL: 0
	sei
;PCODE: $00000263 VOL: 0
; 0001 00EB }
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0

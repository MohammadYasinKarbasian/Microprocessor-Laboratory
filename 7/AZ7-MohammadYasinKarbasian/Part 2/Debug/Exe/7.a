;
;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#define DATA_REGISTER_EMPTY (1 << UDRE)
;#define RX_COMPLETE (1 << RXC)
;#define FRAMING_ERROR (1 << FE)
;#define PARITY_ERROR (1 << UPE)
;#define DATA_OVERRUN (1 << DOR)
;
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index = 0, rx_rd_index = 0;
;#else
;unsigned int rx_wr_index = 0, rx_rd_index = 0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter = 0;
;#else
;unsigned int rx_counter = 0;
;#endif
;
;bit rx_buffer_overflow;
;
;interrupt[USART_RXC] void usart_rx_isr(void)
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C    char status, data;
; 0000 001D    status = UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001E    data = UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001F    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0020    {
; 0000 0021       rx_buffer[rx_wr_index++] = data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0022 #if RX_BUFFER_SIZE == 256
; 0000 0023       if (++rx_counter == 0)
; 0000 0024          rx_buffer_overflow = 1;
; 0000 0025 #else
; 0000 0026       if (rx_wr_index == RX_BUFFER_SIZE)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0027          rx_wr_index = 0;
;PCODE: $00000020 VOL: 0
; 0000 0028       if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0029       {
; 0000 002A          rx_counter = 0;
;PCODE: $00000026 VOL: 0
; 0000 002B          rx_buffer_overflow = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002C       }
; 0000 002D #endif
; 0000 002E    }
;PCODE: $0000002A VOL: 0
; 0000 002F }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;#pragma used +
;char getchar_nv(void)
; 0000 0034 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0035    char data;
; 0000 0036    while (rx_counter == 0)
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0037       ;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0038    data = rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0039 #if RX_BUFFER_SIZE != 256
; 0000 003A    if (rx_rd_index == RX_BUFFER_SIZE)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 003B       rx_rd_index = 0;
;PCODE: $00000040 VOL: 0
; 0000 003C #endif
; 0000 003D #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 003E    --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 003F #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0040    return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0041 }
;PCODE: $0000004A VOL: 0
;#pragma used -
;#endif
;
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index = 0, tx_rd_index = 0;
;#else
;unsigned int tx_wr_index = 0, tx_rd_index = 0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter = 0;
;#else
;unsigned int tx_counter = 0;
;#endif
;
;interrupt[USART_TXC] void usart_tx_isr(void)
; 0000 0055 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0056    if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0057    {
; 0000 0058       --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0059       UDR = tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 005A #if TX_BUFFER_SIZE != 256
; 0000 005B       if (tx_rd_index == TX_BUFFER_SIZE)
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 005C          tx_rd_index = 0;
;PCODE: $00000059 VOL: 0
; 0000 005D #endif
; 0000 005E    }
;PCODE: $0000005A VOL: 0
; 0000 005F }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;#pragma used +
;void putchar_nv(char c)
; 0000 0064 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0065    while (tx_counter == TX_BUFFER_SIZE)
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0066       ;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0067 #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 0068    if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY) == 0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0069    {
; 0000 006A       tx_buffer[tx_wr_index++] = c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006B #if TX_BUFFER_SIZE != 256
; 0000 006C       if (tx_wr_index == TX_BUFFER_SIZE)
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 006D          tx_wr_index = 0;
;PCODE: $0000007A VOL: 0
; 0000 006E #endif
; 0000 006F       ++tx_counter;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0070    }
; 0000 0071    else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0072       UDR = c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0073 #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 0074 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;#pragma used -
;#endif
;
;void main(void)
; 0000 0079 {
;PCODE: $00000087 VOL: 0
; 0000 007A    init();
;PCODE: $00000088 VOL: 0
; 0000 007B    q2();
;PCODE: $00000089 VOL: 0
; 0000 007C    q3();
;PCODE: $0000008A VOL: 0
; 0000 007D    while (1)
;PCODE: $0000008B VOL: 0
; 0000 007E    {
; 0000 007F    }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0080 }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0

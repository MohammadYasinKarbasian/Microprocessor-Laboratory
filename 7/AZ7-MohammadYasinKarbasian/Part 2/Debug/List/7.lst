
AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm Sat Jun 03 10:22:55 2023

C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1095): warning: Register r10 already defined by the .DEF directive
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _rx_wr_index=R5
                 	.DEF _rx_rd_index=R4
                 	.DEF _rx_counter=R7
                 	.DEF _tx_wr_index=R6
                 	.DEF _tx_rd_index=R9
                 	.DEF _tx_counter=R8
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01c6 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01f3 	JMP  _usart_rx_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0225 	JMP  _usart_tx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000      	.DB  0x0,0x0
                 
                 _0x20003:
000037 0000
000038 0000
000039 0000
00003a 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003b 0000      	.DB  0x0,0x0
                 _0x20021:
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000048 0000
000049 0000
00004a 0000
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004c 0000
00004d 0000
00004e 0000
00004f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000054 0000
000055 0000
000056 0000
000057 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000058 0000
000059 0000
00005a 0000
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0000
000062 0000
000063 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000064 0000
000065 0000
000066 0000
000067 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0000
00006e 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0
                 _0x20000:
00006f 6170
000070 7472
000071 3220
000072 6920      	.DB  0x70,0x61,0x72,0x74,0x20,0x32,0x20,0x69
000073 2073
000074 7572
000075 6e6e
000076 6e69      	.DB  0x73,0x20,0x72,0x75,0x6E,0x6E,0x69,0x6E
000077 2167
000078 000d
000079 540d
00007a 3a78      	.DB  0x67,0x21,0xD,0x0,0xD,0x54,0x78,0x3A
00007b 0d00
00007c 7852
00007d 203a
00007e 6144      	.DB  0x0,0xD,0x52,0x78,0x3A,0x20,0x44,0x61
00007f 6174
000080 253d
000081 2064
000082 6e61      	.DB  0x74,0x61,0x3D,0x25,0x64,0x20,0x61,0x6E
000083 2064
000084 3031
000085 442a
000086 7461      	.DB  0x64,0x20,0x31,0x30,0x2A,0x44,0x61,0x74
000087 3d61
000088 6425
000089 0d20
00008a 5400      	.DB  0x61,0x3D,0x25,0x64,0x20,0xD,0x0,0x54
00008b 3a78
00008c 2520
00008d 0064
00008e 7852      	.DB  0x78,0x3A,0x20,0x25,0x64,0x0,0x52,0x78
00008f 203a
000090 6144
000091 6174
000092 253d      	.DB  0x3A,0x20,0x44,0x61,0x74,0x61,0x3D,0x25
000093 2064
000094 6e61
000095 2064
000096 3031      	.DB  0x64,0x20,0x61,0x6E,0x64,0x20,0x31,0x30
000097 442a
000098 7461
000099 3d61
00009a 6425      	.DB  0x2A,0x44,0x61,0x74,0x61,0x3D,0x25,0x64
00009b 4c00
00009c 4443
00009d 6420
00009e 6c65      	.DB  0x0,0x4C,0x43,0x44,0x20,0x64,0x65,0x6C
00009f 7465
0000a0 0065
0000a1 4c0d
0000a2 4443      	.DB  0x65,0x74,0x65,0x0,0xD,0x4C,0x43,0x44
0000a3 6420
0000a4 6c65
0000a5 7465
0000a6 0d65      	.DB  0x20,0x64,0x65,0x6C,0x65,0x74,0x65,0xD
0000a7 0d00
0000a8 6854
0000a9 7369
0000aa 6920      	.DB  0x0,0xD,0x54,0x68,0x69,0x73,0x20,0x69
0000ab 2073
0000ac 5a41
0000ad 2037
0000ae 666f      	.DB  0x73,0x20,0x41,0x5A,0x37,0x20,0x6F,0x66
0000af 4d20
0000b0 6369
0000b1 6f72
0000b2 7270      	.DB  0x20,0x4D,0x69,0x63,0x72,0x6F,0x70,0x72
0000b3 636f
0000b4 7365
0000b5 6f73
0000b6 2072      	.DB  0x6F,0x63,0x65,0x73,0x73,0x6F,0x72,0x20
0000b7 614c
0000b8 2062
0000b9 7461
0000ba 4920      	.DB  0x4C,0x61,0x62,0x20,0x61,0x74,0x20,0x49
0000bb 5455
0000bc 000d
0000bd 6854
0000be 7369      	.DB  0x55,0x54,0xD,0x0,0x54,0x68,0x69,0x73
0000bf 6920
0000c0 2073
0000c1 5a41
0000c2 2037      	.DB  0x20,0x69,0x73,0x20,0x41,0x5A,0x37,0x20
0000c3 666f
0000c4 4d20
0000c5 6369
0000c6 6f72      	.DB  0x6F,0x66,0x20,0x4D,0x69,0x63,0x72,0x6F
0000c7 7270
0000c8 636f
0000c9 7365
0000ca 6f73      	.DB  0x70,0x72,0x6F,0x63,0x65,0x73,0x73,0x6F
0000cb 2072
0000cc 614c
0000cd 2062
0000ce 7461      	.DB  0x72,0x20,0x4C,0x61,0x62,0x20,0x61,0x74
0000cf 4920
0000d0 5455
0000d1 0d00
0000d2 7852      	.DB  0x20,0x49,0x55,0x54,0x0,0xD,0x52,0x78
0000d3 203a
0000d4 4e45
0000d5 2044
0000d6 666f      	.DB  0x3A,0x20,0x45,0x4E,0x44,0x20,0x6F,0x66
0000d7 7420
0000d8 6968
0000d9 2073
0000da 6170      	.DB  0x20,0x74,0x68,0x69,0x73,0x20,0x70,0x61
0000db 7472
0000dc 000d
0000dd 7852
0000de 203a      	.DB  0x72,0x74,0xD,0x0,0x52,0x78,0x3A,0x20
0000df 4e45
0000e0 2044
0000e1 666f
0000e2 7420      	.DB  0x45,0x4E,0x44,0x20,0x6F,0x66,0x20,0x74
0000e3 6968
0000e4 2073
0000e5 6170
0000e6 7472      	.DB  0x68,0x69,0x73,0x20,0x70,0x61,0x72,0x74
0000e7 0d00
0000e8 7852
0000e9 203a
0000ea 6e69      	.DB  0x0,0xD,0x52,0x78,0x3A,0x20,0x69,0x6E
0000eb 7570
0000ec 2074
0000ed 656c
0000ee 7474      	.DB  0x70,0x75,0x74,0x20,0x6C,0x65,0x74,0x74
0000ef 7265
0000f0 6920
0000f1 2073
0000f2 5400      	.DB  0x65,0x72,0x20,0x69,0x73,0x20,0x0,0x54
0000f3 3a78
0000f4 2520
0000f5 0063
0000f6 7852      	.DB  0x78,0x3A,0x20,0x25,0x63,0x0,0x52,0x78
0000f7 203a
0000f8 6e69
0000f9 7570
0000fa 2074      	.DB  0x3A,0x20,0x69,0x6E,0x70,0x75,0x74,0x20
0000fb 656c
0000fc 7474
0000fd 7265
0000fe 6920      	.DB  0x6C,0x65,0x74,0x74,0x65,0x72,0x20,0x69
0000ff 2073
000100 2522
000101 2263
000102 0020      	.DB  0x73,0x20,0x22,0x25,0x63,0x22,0x20,0x0
000103 500d
000104 7261
000105 2074
000106 2032      	.DB  0xD,0x50,0x61,0x72,0x74,0x20,0x32,0x20
000107 7369
000108 6520
000109 646e
00010a 6e69      	.DB  0x69,0x73,0x20,0x65,0x6E,0x64,0x69,0x6E
00010b 2167
00010c 000d
00010d 6170
00010e 7472      	.DB  0x67,0x21,0xD,0x0,0x70,0x61,0x72,0x74
00010f 3320
000110 6920
000111 2073
000112 7572      	.DB  0x20,0x33,0x20,0x69,0x73,0x20,0x72,0x75
000113 6e6e
000114 6e69
000115 2167
000116 000d      	.DB  0x6E,0x6E,0x69,0x6E,0x67,0x21,0xD,0x0
000117 460d
000118 6172
000119 656d
00011a 6d20      	.DB  0xD,0x46,0x72,0x61,0x6D,0x65,0x20,0x6D
00011b 7375
00011c 2074
00011d 6562
00011e 3520      	.DB  0x75,0x73,0x74,0x20,0x62,0x65,0x20,0x35
00011f 6920
000120 746e
000121 6765
000122 7265      	.DB  0x20,0x69,0x6E,0x74,0x65,0x67,0x65,0x72
000123 000d
000124 7246
000125 6d61
000126 2065      	.DB  0xD,0x0,0x46,0x72,0x61,0x6D,0x65,0x20
000127 756d
000128 7473
000129 6220
00012a 2065      	.DB  0x6D,0x75,0x73,0x74,0x20,0x62,0x65,0x20
00012b 2035
00012c 6e69
00012d 6574
00012e 6567      	.DB  0x35,0x20,0x69,0x6E,0x74,0x65,0x67,0x65
00012f 0072
000130 490d
000131 636e
000132 726f      	.DB  0x72,0x0,0xD,0x49,0x6E,0x63,0x6F,0x72
000133 6572
000134 7463
000135 6620
000136 6172      	.DB  0x72,0x65,0x63,0x74,0x20,0x66,0x72,0x61
000137 656d
000138 7320
000139 7a69
00013a 2e65      	.DB  0x6D,0x65,0x20,0x73,0x69,0x7A,0x65,0x2E
00013b 000d
00013c 6e49
00013d 6f63
00013e 7272      	.DB  0xD,0x0,0x49,0x6E,0x63,0x6F,0x72,0x72
00013f 6365
000140 2074
000141 7266
000142 6d61      	.DB  0x65,0x63,0x74,0x20,0x66,0x72,0x61,0x6D
000143 2065
000144 6973
000145 657a
000146 002e      	.DB  0x65,0x20,0x73,0x69,0x7A,0x65,0x2E,0x0
000147 540d
000148 6568
000149 6620
00014a 6172      	.DB  0xD,0x54,0x68,0x65,0x20,0x66,0x72,0x61
00014b 656d
00014c 6920
00014d 2073
00014e 6f63      	.DB  0x6D,0x65,0x20,0x69,0x73,0x20,0x63,0x6F
00014f 7272
000150 6365
000151 0d74
000152 5400      	.DB  0x72,0x72,0x65,0x63,0x74,0xD,0x0,0x54
000153 6568
000154 6620
000155 6172
000156 656d      	.DB  0x68,0x65,0x20,0x66,0x72,0x61,0x6D,0x65
000157 6920
000158 2073
000159 6f63
00015a 7272      	.DB  0x20,0x69,0x73,0x20,0x63,0x6F,0x72,0x72
00015b 6365
00015c 0074
00015d 500d
00015e 7261      	.DB  0x65,0x63,0x74,0x0,0xD,0x50,0x61,0x72
00015f 2074
000160 2033
000161 7369
000162 6520      	.DB  0x74,0x20,0x33,0x20,0x69,0x73,0x20,0x65
000163 646e
000164 6e69
000165 2167
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1221): warning: .cseg .db misalignment - padding zero byte
000166 0000      	.DB  0x6E,0x64,0x69,0x6E,0x67,0x21,0x0
                 _0x2020060:
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1223): warning: .cseg .db misalignment - padding zero byte
000167 0001      	.DB  0x1
                 _0x2020000:
000168 4e2d
000169 4e41
00016a 4900
00016b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\mykar\Downloads\IUT\Micro lab\7\AZ7-9928883-MohammadYasinKarbasian\Part 2\Debug\List\7.asm(1226): warning: .cseg .db misalignment - padding zero byte
00016c 0000      	.DB  0x0
                 _0x2040003:
00016d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00016e 0001      	.DW  0x01
00016f 0002      	.DW  0x02
000170 0066      	.DW  __REG_BIT_VARS*2
                 
000171 0006      	.DW  0x06
000172 0004      	.DW  0x04
000173 0068      	.DW  __REG_VARS*2
                 
000174 0014      	.DW  0x14
000175 0160      	.DW  _0x20004
000176 00de      	.DW  _0x20000*2
                 
000177 0005      	.DW  0x05
000178 0174      	.DW  _0x20004+20
000179 00f2      	.DW  _0x20000*2+20
                 
00017a 000b      	.DW  0x0B
00017b 0179      	.DW  _0x20004+25
00017c 0137      	.DW  _0x20000*2+89
                 
00017d 000d      	.DW  0x0D
00017e 0184      	.DW  _0x20004+36
00017f 0142      	.DW  _0x20000*2+100
                 
000180 002b      	.DW  0x2B
000181 0191      	.DW  _0x20004+49
000182 014f      	.DW  _0x20000*2+113
                 
000183 0029      	.DW  0x29
000184 01bc      	.DW  _0x20004+92
000185 017a      	.DW  _0x20000*2+156
                 
000186 0017      	.DW  0x17
000187 01e5      	.DW  _0x20004+133
000188 01a3      	.DW  _0x20000*2+197
                 
000189 0015      	.DW  0x15
00018a 01fc      	.DW  _0x20004+156
00018b 01ba      	.DW  _0x20000*2+220
                 
00018c 0005      	.DW  0x05
00018d 0211      	.DW  _0x20004+177
00018e 00f2      	.DW  _0x20000*2+20
                 
00018f 0016      	.DW  0x16
000190 0216      	.DW  _0x20004+182
000191 01cf      	.DW  _0x20000*2+241
                 
000192 0002      	.DW  0x02
000193 022c      	.DW  _0x20004+204
000194 00f0      	.DW  _0x20000*2+18
                 
000195 0014      	.DW  0x14
000196 022e      	.DW  _0x20004+206
000197 0206      	.DW  _0x20000*2+296
                 
000198 0014      	.DW  0x14
000199 0242      	.DW  _0x20022
00019a 021a      	.DW  _0x20000*2+316
                 
00019b 0005      	.DW  0x05
00019c 0256      	.DW  _0x20022+20
00019d 00f2      	.DW  _0x20000*2+20
                 
00019e 001a      	.DW  0x1A
00019f 025b      	.DW  _0x20022+25
0001a0 022e      	.DW  _0x20000*2+336
                 
0001a1 0018      	.DW  0x18
0001a2 0275      	.DW  _0x20022+51
0001a3 0248      	.DW  _0x20000*2+362
                 
0001a4 0005      	.DW  0x05
0001a5 028d      	.DW  _0x20022+75
0001a6 00f2      	.DW  _0x20000*2+20
                 
0001a7 0018      	.DW  0x18
0001a8 0292      	.DW  _0x20022+80
0001a9 0260      	.DW  _0x20000*2+386
                 
0001aa 0004      	.DW  0x04
0001ab 02aa      	.DW  _0x20022+104
0001ac 00f3      	.DW  _0x20000*2+21
                 
0001ad 0016      	.DW  0x16
0001ae 02ae      	.DW  _0x20022+108
0001af 0278      	.DW  _0x20000*2+410
                 
0001b0 0005      	.DW  0x05
0001b1 02c4      	.DW  _0x20022+130
0001b2 00f2      	.DW  _0x20000*2+20
                 
0001b3 0017      	.DW  0x17
0001b4 02c9      	.DW  _0x20022+135
0001b5 028e      	.DW  _0x20000*2+432
                 
0001b6 0004      	.DW  0x04
0001b7 02e0      	.DW  _0x20022+158
0001b8 00f3      	.DW  _0x20000*2+21
                 
0001b9 0015      	.DW  0x15
0001ba 02e4      	.DW  _0x20022+162
0001bb 02a5      	.DW  _0x20000*2+455
                 
0001bc 0013      	.DW  0x13
0001bd 02f9      	.DW  _0x20022+183
0001be 02ba      	.DW  _0x20000*2+476
                 
0001bf 0001      	.DW  0x01
0001c0 031c      	.DW  __seed_G101
0001c1 02ce      	.DW  _0x2020060*2
                 
0001c2 0002      	.DW  0x02
0001c3 0320      	.DW  __base_y_G102
0001c4 02da      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
0001c5 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001c6 94f8      	CLI
0001c7 27ee      	CLR  R30
0001c8 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001c9 e0f1      	LDI  R31,1
0001ca bffb      	OUT  GICR,R31
0001cb bfeb      	OUT  GICR,R30
0001cc bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001cd e08d      	LDI  R24,(14-2)+1
0001ce e0a2      	LDI  R26,2
0001cf 27bb      	CLR  R27
                 __CLEAR_REG:
0001d0 93ed      	ST   X+,R30
0001d1 958a      	DEC  R24
0001d2 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001d3 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001d4 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001d5 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0001d6 93ed      	ST   X+,R30
0001d7 9701      	SBIW R24,1
0001d8 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001d9 edec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001da e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001db 9185      	LPM  R24,Z+
0001dc 9195      	LPM  R25,Z+
0001dd 9700      	SBIW R24,0
0001de f061      	BREQ __GLOBAL_INI_END
0001df 91a5      	LPM  R26,Z+
0001e0 91b5      	LPM  R27,Z+
0001e1 9005      	LPM  R0,Z+
0001e2 9015      	LPM  R1,Z+
0001e3 01bf      	MOVW R22,R30
0001e4 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001e5 9005      	LPM  R0,Z+
0001e6 920d      	ST   X+,R0
0001e7 9701      	SBIW R24,1
0001e8 f7e1      	BRNE __GLOBAL_INI_LOOP
0001e9 01fb      	MOVW R30,R22
0001ea cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001eb e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001ec bfed      	OUT  SPL,R30
0001ed e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001ee bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001ef e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001f0 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001f1 940c 023c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#define DATA_REGISTER_EMPTY (1 << UDRE)
                 ;#define RX_COMPLETE (1 << RXC)
                 ;#define FRAMING_ERROR (1 << FE)
                 ;#define PARITY_ERROR (1 << UPE)
                 ;#define DATA_OVERRUN (1 << DOR)
                 ;
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index = 0, rx_rd_index = 0;
                 ;#else
                 ;unsigned int rx_wr_index = 0, rx_rd_index = 0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter = 0;
                 ;#else
                 ;unsigned int rx_counter = 0;
                 ;#endif
                 ;
                 ;bit rx_buffer_overflow;
                 ;
                 ;interrupt[USART_RXC] void usart_rx_isr(void)
                 ; 0000 001B {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
0001f3 93ea      	ST   -Y,R30
0001f4 93fa      	ST   -Y,R31
0001f5 b7ef      	IN   R30,SREG
0001f6 93ea      	ST   -Y,R30
                 ; 0000 001C    char status, data;
                 ; 0000 001D    status = UCSRA;
0001f7 931a      	ST   -Y,R17
0001f8 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0001f9 b11b      	IN   R17,11
                 ; 0000 001E    data = UDR;
0001fa b10c      	IN   R16,12
                 ; 0000 001F    if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN)) == 0)
0001fb 2fe1      	MOV  R30,R17
0001fc 71ec      	ANDI R30,LOW(0x1C)
0001fd f489      	BRNE _0x3
                 ; 0000 0020    {
                 ; 0000 0021       rx_buffer[rx_wr_index++] = data;
0001fe 2de5      	MOV  R30,R5
0001ff 9453      	INC  R5
000200 e0f0      	LDI  R31,0
000201 5fe4      	SUBI R30,LOW(-_rx_buffer)
000202 4ffc      	SBCI R31,HIGH(-_rx_buffer)
000203 8300      	ST   Z,R16
                 ; 0000 0022 #if RX_BUFFER_SIZE == 256
                 ; 0000 0023       if (++rx_counter == 0)
                 ; 0000 0024          rx_buffer_overflow = 1;
                 ; 0000 0025 #else
                 ; 0000 0026       if (rx_wr_index == RX_BUFFER_SIZE)
000204 e0e8      	LDI  R30,LOW(8)
000205 15e5      	CP   R30,R5
000206 f409      	BRNE _0x4
                 ; 0000 0027          rx_wr_index = 0;
000207 2455      	CLR  R5
                 ; 0000 0028       if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
000208 9473      	INC  R7
000209 e0e8      	LDI  R30,LOW(8)
00020a 15e7      	CP   R30,R7
00020b f419      	BRNE _0x5
                 ; 0000 0029       {
                 ; 0000 002A          rx_counter = 0;
00020c 2477      	CLR  R7
                 ; 0000 002B          rx_buffer_overflow = 1;
00020d 9468      	SET
00020e f820      	BLD  R2,0
                 ; 0000 002C       }
                 ; 0000 002D #endif
                 ; 0000 002E    }
                 _0x5:
                 ; 0000 002F }
                 _0x3:
00020f 9109      	LD   R16,Y+
000210 9119      	LD   R17,Y+
000211 c025      	RJMP _0x18
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;#pragma used +
                 ;char getchar_nv(void)
                 ; 0000 0034 {
                 _getchar_nv:
                 ; .FSTART _getchar_nv
                 ; 0000 0035    char data;
                 ; 0000 0036    while (rx_counter == 0)
000212 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
000213 2077      	TST  R7
000214 f3f1      	BREQ _0x6
                 ; 0000 0037       ;
                 ; 0000 0038    data = rx_buffer[rx_rd_index++];
000215 2de4      	MOV  R30,R4
000216 9443      	INC  R4
000217 e0f0      	LDI  R31,0
000218 5fe4      	SUBI R30,LOW(-_rx_buffer)
000219 4ffc      	SBCI R31,HIGH(-_rx_buffer)
00021a 8110      	LD   R17,Z
                 ; 0000 0039 #if RX_BUFFER_SIZE != 256
                 ; 0000 003A    if (rx_rd_index == RX_BUFFER_SIZE)
00021b e0e8      	LDI  R30,LOW(8)
00021c 15e4      	CP   R30,R4
00021d f409      	BRNE _0x9
                 ; 0000 003B       rx_rd_index = 0;
00021e 2444      	CLR  R4
                 ; 0000 003C #endif
                 ; 0000 003D #asm("cli")
                 _0x9:
00021f 94f8      	cli
                 ; 0000 003E    --rx_counter;
000220 947a      	DEC  R7
                 ; 0000 003F #asm("sei")
000221 9478      	sei
                 ; 0000 0040    return data;
000222 2fe1      	MOV  R30,R17
000223 9119      	LD   R17,Y+
000224 9508      	RET
                 ; 0000 0041 }
                 ; .FEND
                 ;#pragma used -
                 ;#endif
                 ;
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index = 0, tx_rd_index = 0;
                 ;#else
                 ;unsigned int tx_wr_index = 0, tx_rd_index = 0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter = 0;
                 ;#else
                 ;unsigned int tx_counter = 0;
                 ;#endif
                 ;
                 ;interrupt[USART_TXC] void usart_tx_isr(void)
                 ; 0000 0055 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000225 93ea      	ST   -Y,R30
000226 93fa      	ST   -Y,R31
000227 b7ef      	IN   R30,SREG
000228 93ea      	ST   -Y,R30
                 ; 0000 0056    if (tx_counter)
000229 2088      	TST  R8
00022a f061      	BREQ _0xA
                 ; 0000 0057    {
                 ; 0000 0058       --tx_counter;
00022b 948a      	DEC  R8
                 ; 0000 0059       UDR = tx_buffer[tx_rd_index++];
00022c 2de9      	MOV  R30,R9
00022d 9493      	INC  R9
00022e e0f0      	LDI  R31,0
00022f 5eec      	SUBI R30,LOW(-_tx_buffer)
000230 4ffc      	SBCI R31,HIGH(-_tx_buffer)
000231 81e0      	LD   R30,Z
000232 b9ec      	OUT  0xC,R30
                 ; 0000 005A #if TX_BUFFER_SIZE != 256
                 ; 0000 005B       if (tx_rd_index == TX_BUFFER_SIZE)
000233 e0e8      	LDI  R30,LOW(8)
000234 15e9      	CP   R30,R9
000235 f409      	BRNE _0xB
                 ; 0000 005C          tx_rd_index = 0;
000236 2499      	CLR  R9
                 ; 0000 005D #endif
                 ; 0000 005E    }
                 _0xB:
                 ; 0000 005F }
                 _0xA:
                 _0x18:
000237 91e9      	LD   R30,Y+
000238 bfef      	OUT  SREG,R30
000239 91f9      	LD   R31,Y+
00023a 91e9      	LD   R30,Y+
00023b 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;#pragma used +
                 ;void putchar_nv(char c)
                 ; 0000 0064 {
                 ; 0000 0065    while (tx_counter == TX_BUFFER_SIZE)
                 ;	c -> Y+0
                 ; 0000 0066       ;
                 ; 0000 0067 #asm("cli")
                 ; 0000 0068    if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY) == 0))
                 ; 0000 0069    {
                 ; 0000 006A       tx_buffer[tx_wr_index++] = c;
                 ; 0000 006B #if TX_BUFFER_SIZE != 256
                 ; 0000 006C       if (tx_wr_index == TX_BUFFER_SIZE)
                 ; 0000 006D          tx_wr_index = 0;
                 ; 0000 006E #endif
                 ; 0000 006F       ++tx_counter;
                 ; 0000 0070    }
                 ; 0000 0071    else
                 ; 0000 0072       UDR = c;
                 ; 0000 0073 #asm("sei")
                 ; 0000 0074 }
                 ;#pragma used -
                 ;#endif
                 ;
                 ;void main(void)
                 ; 0000 0079 {
                 _main:
                 ; .FSTART _main
                 ; 0000 007A    init();
00023c d17e      	RCALL _init
                 ; 0000 007B    q2();
00023d d003      	RCALL _q2
                 ; 0000 007C    q3();
00023e d0c7      	RCALL _q3
                 ; 0000 007D    while (1)
                 _0x14:
                 ; 0000 007E    {
                 ; 0000 007F    }
00023f cfff      	RJMP _0x14
                 ; 0000 0080 }
                 _0x17:
000240 cfff      	RJMP _0x17
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void q2()
                 ; 0001 0004 {
                 
                 	.CSEG
                 _q2:
                 ; .FSTART _q2
                 ; 0001 0005     unsigned char string[10] = "";
                 ; 0001 0006     unsigned char gt ='';
                 ; 0001 0007     int dig = 0;
                 ; 0001 0008     puts("part 2 is running!\r");
000241 972a      	SBIW R28,10
000242 e08a      	LDI  R24,10
000243 e0a0      	LDI  R26,LOW(0)
000244 e0b0      	LDI  R27,HIGH(0)
000245 e6ee      	LDI  R30,LOW(_0x20003*2)
000246 e0f0      	LDI  R31,HIGH(_0x20003*2)
000247 940e 07c6 	CALL __INITLOCB
000249 940e 07ba 	CALL __SAVELOCR4
                 ;	string -> Y+4
                 ;	gt -> R17
                 ;	dig -> R18,R19
00024b e010      	LDI  R17,0
                +
00024c e020     +LDI R18 , LOW ( 0 )
00024d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00024e e6a0     +LDI R26 , LOW ( _0x20004 + ( 0 ) )
00024f e0b1     +LDI R27 , HIGH ( _0x20004 + ( 0 ) )
                 	__POINTW2MN _0x20004,0
000250 940e 04a2 	CALL _puts
                 ; 0001 0009 
                 ; 0001 000A     gt = getchar_nv();
000252 dfbf      	RCALL _getchar_nv
000253 2f1e      	MOV  R17,R30
                 ; 0001 000B     if (gt == '0')
000254 3310      	CPI  R17,48
000255 f419      	BRNE _0x20005
                 ; 0001 000C     {
                 ; 0001 000D         dig = 0;
                +
000256 e020     +LDI R18 , LOW ( 0 )
000257 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0001 000E     }
                 ; 0001 000F     else if (gt == '1')
000258 c02f      	RJMP _0x20006
                 _0x20005:
000259 3311      	CPI  R17,49
00025a f419      	BRNE _0x20007
                 ; 0001 0010     {
                 ; 0001 0011         dig = 1;
                +
00025b e021     +LDI R18 , LOW ( 1 )
00025c e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0001 0012     }
                 ; 0001 0013     else if (gt == '2')
00025d c02a      	RJMP _0x20008
                 _0x20007:
00025e 3312      	CPI  R17,50
00025f f419      	BRNE _0x20009
                 ; 0001 0014     {
                 ; 0001 0015         dig = 2;
                +
000260 e022     +LDI R18 , LOW ( 2 )
000261 e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 ; 0001 0016     }
                 ; 0001 0017     else if (gt == '3')
000262 c025      	RJMP _0x2000A
                 _0x20009:
000263 3313      	CPI  R17,51
000264 f419      	BRNE _0x2000B
                 ; 0001 0018     {
                 ; 0001 0019         dig = 3;
                +
000265 e023     +LDI R18 , LOW ( 3 )
000266 e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                 ; 0001 001A     }
                 ; 0001 001B     else if (gt == '4')
000267 c020      	RJMP _0x2000C
                 _0x2000B:
000268 3314      	CPI  R17,52
000269 f419      	BRNE _0x2000D
                 ; 0001 001C     {
                 ; 0001 001D         dig = 4;
                +
00026a e024     +LDI R18 , LOW ( 4 )
00026b e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 ; 0001 001E     }
                 ; 0001 001F     else if (gt == '5')
00026c c01b      	RJMP _0x2000E
                 _0x2000D:
00026d 3315      	CPI  R17,53
00026e f419      	BRNE _0x2000F
                 ; 0001 0020     {
                 ; 0001 0021         dig = 5;
                +
00026f e025     +LDI R18 , LOW ( 5 )
000270 e030     +LDI R19 , HIGH ( 5 )
                 	__GETWRN 18,19,5
                 ; 0001 0022     }
                 ; 0001 0023     else if (gt == '6')
000271 c016      	RJMP _0x20010
                 _0x2000F:
000272 3316      	CPI  R17,54
000273 f419      	BRNE _0x20011
                 ; 0001 0024     {
                 ; 0001 0025         dig = 6;
                +
000274 e026     +LDI R18 , LOW ( 6 )
000275 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                 ; 0001 0026     }
                 ; 0001 0027     else if (gt == '7')
000276 c011      	RJMP _0x20012
                 _0x20011:
000277 3317      	CPI  R17,55
000278 f419      	BRNE _0x20013
                 ; 0001 0028     {
                 ; 0001 0029         dig = 7;
                +
000279 e027     +LDI R18 , LOW ( 7 )
00027a e030     +LDI R19 , HIGH ( 7 )
                 	__GETWRN 18,19,7
                 ; 0001 002A     }
                 ; 0001 002B     else if (gt == '8')
00027b c00c      	RJMP _0x20014
                 _0x20013:
00027c 3318      	CPI  R17,56
00027d f419      	BRNE _0x20015
                 ; 0001 002C     {
                 ; 0001 002D         dig = 8;
                +
00027e e028     +LDI R18 , LOW ( 8 )
00027f e030     +LDI R19 , HIGH ( 8 )
                 	__GETWRN 18,19,8
                 ; 0001 002E     }
                 ; 0001 002F     else if (gt == '9')
000280 c007      	RJMP _0x20016
                 _0x20015:
000281 3319      	CPI  R17,57
000282 f419      	BRNE _0x20017
                 ; 0001 0030     {
                 ; 0001 0031         dig = 9;
                +
000283 e029     +LDI R18 , LOW ( 9 )
000284 e030     +LDI R19 , HIGH ( 9 )
                 	__GETWRN 18,19,9
                 ; 0001 0032     }
                 ; 0001 0033     else
000285 c002      	RJMP _0x20018
                 _0x20017:
                 ; 0001 0034     {
                 ; 0001 0035         dig = 11;
                +
000286 e02b     +LDI R18 , LOW ( 11 )
000287 e030     +LDI R19 , HIGH ( 11 )
                 	__GETWRN 18,19,11
                 ; 0001 0036     }
                 _0x20018:
                 _0x20016:
                 _0x20014:
                 _0x20012:
                 _0x20010:
                 _0x2000E:
                 _0x2000C:
                 _0x2000A:
                 _0x20008:
                 _0x20006:
                 ; 0001 0037 
                 ; 0001 0038     if (dig < 10)
                +
000288 302a     +CPI R18 , LOW ( 10 )
000289 e0e0     +LDI R30 , HIGH ( 10 )
00028a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
00028b f514      	BRGE _0x20019
                 ; 0001 0039     {
                 ; 0001 003A         puts("\rTx:");
                +
00028c e7a4     +LDI R26 , LOW ( _0x20004 + ( 20 ) )
00028d e0b1     +LDI R27 , HIGH ( _0x20004 + ( 20 ) )
                 	__POINTW2MN _0x20004,20
00028e 940e 04a2 	CALL _puts
                 ; 0001 003B         putchar(gt);
000290 2fa1      	MOV  R26,R17
000291 940e 049b 	CALL _putchar
                 ; 0001 003C         sprintf(string, "\rRx: Data=%d and 10*Data=%d \r", dig, 10 * dig);
000293 940e 0671 	CALL SUBOPT_0x0
                +
000295 efe7     +LDI R30 , LOW ( 2 * _0x20000 + ( 25 ) )
000296 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 25 ) )
                 	__POINTW1FN _0x20000,25
000297 940e 0676 	CALL SUBOPT_0x1
000299 940e 067e 	CALL SUBOPT_0x2
                 ; 0001 003D 
                 ; 0001 003E         puts(string);
00029b 01de      	MOVW R26,R28
00029c 9614      	ADIW R26,4
00029d 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 003F         lcd_clear();
                 ; 0001 0040         sprintf(string, "Tx: %d", dig);
00029f 940e 0671 	CALL SUBOPT_0x0
                +
0002a1 e1e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 55 ) )
0002a2 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 55 ) )
                 	__POINTW1FN _0x20000,55
0002a3 940e 0676 	CALL SUBOPT_0x1
0002a5 940e 0690 	CALL SUBOPT_0x4
                 ; 0001 0041         lcd_puts(string);
                 ; 0001 0042         sprintf(string, "Rx: Data=%d and 10*Data=%d", dig, 10 * dig);
                +
0002a7 e1ec     +LDI R30 , LOW ( 2 * _0x20000 + ( 62 ) )
0002a8 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 62 ) )
                 	__POINTW1FN _0x20000,62
0002a9 940e 0676 	CALL SUBOPT_0x1
0002ab 940e 067e 	CALL SUBOPT_0x2
                 ; 0001 0043         lcd_gotoxy(0, 1);
0002ad c049      	RJMP _0x20032
                 ; 0001 0044         lcd_puts(string);
                 ; 0001 0045     }
                 ; 0001 0046 
                 ; 0001 0047     else if (gt == 'D')
                 _0x20019:
0002ae 3414      	CPI  R17,68
0002af f459      	BRNE _0x2001B
                 ; 0001 0048     {
                 ; 0001 0049         lcd_clear();
0002b0 940e 0443 	CALL _lcd_clear
                 ; 0001 004A         lcd_puts("LCD delete");
                +
0002b2 e7a9     +LDI R26 , LOW ( _0x20004 + ( 25 ) )
0002b3 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 25 ) )
                 	__POINTW2MN _0x20004,25
0002b4 940e 0464 	CALL _lcd_puts
                 ; 0001 004B         puts("\rLCD delete\r");
                +
0002b6 e8a4     +LDI R26 , LOW ( _0x20004 + ( 36 ) )
0002b7 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 36 ) )
                 	__POINTW2MN _0x20004,36
0002b8 940e 04a2 	CALL _puts
                 ; 0001 004C     }
                 ; 0001 004D 
                 ; 0001 004E     else if (gt == 'H')
0002ba c043      	RJMP _0x2001C
                 _0x2001B:
0002bb 3418      	CPI  R17,72
0002bc f439      	BRNE _0x2001D
                 ; 0001 004F     {
                 ; 0001 0050         puts("\rThis is AZ7 of Microprocessor Lab at IUT\r");
                +
0002bd e9a1     +LDI R26 , LOW ( _0x20004 + ( 49 ) )
0002be e0b1     +LDI R27 , HIGH ( _0x20004 + ( 49 ) )
                 	__POINTW2MN _0x20004,49
0002bf 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 0051         lcd_clear();
                 ; 0001 0052         lcd_puts("This is AZ7 of Microprocessor Lab at IUT");
                +
0002c1 ebac     +LDI R26 , LOW ( _0x20004 + ( 92 ) )
0002c2 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 92 ) )
                 	__POINTW2MN _0x20004,92
0002c3 c038      	RJMP _0x20033
                 ; 0001 0053     }
                 ; 0001 0054 
                 ; 0001 0055     else if (gt == 'E')
                 _0x2001D:
0002c4 3415      	CPI  R17,69
0002c5 f449      	BRNE _0x2001F
                 ; 0001 0056     {
                 ; 0001 0057         puts("\rRx: END of this part\r");
                +
0002c6 eea5     +LDI R26 , LOW ( _0x20004 + ( 133 ) )
0002c7 e0b1     +LDI R27 , HIGH ( _0x20004 + ( 133 ) )
                 	__POINTW2MN _0x20004,133
0002c8 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 0058         lcd_clear();
                 ; 0001 0059         lcd_puts("Rx: END of this part");
                +
0002ca efac     +LDI R26 , LOW ( _0x20004 + ( 156 ) )
0002cb e0b1     +LDI R27 , HIGH ( _0x20004 + ( 156 ) )
                 	__POINTW2MN _0x20004,156
0002cc 940e 0464 	CALL _lcd_puts
                 ; 0001 005A         return;
0002ce c033      	RJMP _0x20C0004
                 ; 0001 005B     }
                 ; 0001 005C     else
                 _0x2001F:
                 ; 0001 005D     {
                 ; 0001 005E         puts("\rTx:");
                +
0002cf e1a1     +LDI R26 , LOW ( _0x20004 + ( 177 ) )
0002d0 e0b2     +LDI R27 , HIGH ( _0x20004 + ( 177 ) )
                 	__POINTW2MN _0x20004,177
0002d1 940e 04a2 	CALL _puts
                 ; 0001 005F         putchar(gt);
0002d3 2fa1      	MOV  R26,R17
0002d4 940e 049b 	CALL _putchar
                 ; 0001 0060         puts("\rRx: input letter is ");
                +
0002d6 e1a6     +LDI R26 , LOW ( _0x20004 + ( 182 ) )
0002d7 e0b2     +LDI R27 , HIGH ( _0x20004 + ( 182 ) )
                 	__POINTW2MN _0x20004,182
0002d8 940e 04a2 	CALL _puts
                 ; 0001 0061         putchar('\"');
0002da e2a2      	LDI  R26,LOW(34)
0002db 940e 049b 	CALL _putchar
                 ; 0001 0062         putchar(gt);
0002dd 2fa1      	MOV  R26,R17
0002de 940e 049b 	CALL _putchar
                 ; 0001 0063         putchar('\"');
0002e0 e2a2      	LDI  R26,LOW(34)
0002e1 940e 049b 	CALL _putchar
                 ; 0001 0064         puts("\r");
                +
0002e3 e2ac     +LDI R26 , LOW ( _0x20004 + ( 204 ) )
0002e4 e0b2     +LDI R27 , HIGH ( _0x20004 + ( 204 ) )
                 	__POINTW2MN _0x20004,204
0002e5 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 0065         lcd_clear();
                 ; 0001 0066         sprintf(string, "Tx: %c", gt);
0002e7 940e 0671 	CALL SUBOPT_0x0
                +
0002e9 eee5     +LDI R30 , LOW ( 2 * _0x20000 + ( 263 ) )
0002ea e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 263 ) )
                 	__POINTW1FN _0x20000,263
0002eb 940e 0699 	CALL SUBOPT_0x5
0002ed 940e 0690 	CALL SUBOPT_0x4
                 ; 0001 0067         lcd_puts(string);
                 ; 0001 0068         sprintf(string, "Rx: input letter is \"%c\" ", gt);
                +
0002ef eeec     +LDI R30 , LOW ( 2 * _0x20000 + ( 270 ) )
0002f0 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 270 ) )
                 	__POINTW1FN _0x20000,270
0002f1 940e 0699 	CALL SUBOPT_0x5
0002f3 e084      	LDI  R24,4
0002f4 940e 0624 	CALL _sprintf
0002f6 9628      	ADIW R28,8
                 ; 0001 0069         lcd_gotoxy(0, 1);
                 _0x20032:
0002f7 e0e0      	LDI  R30,LOW(0)
0002f8 940e 06a2 	CALL SUBOPT_0x6
                 ; 0001 006A         lcd_puts(string);
0002fa 01de      	MOVW R26,R28
0002fb 9614      	ADIW R26,4
                 _0x20033:
0002fc 940e 0464 	CALL _lcd_puts
                 ; 0001 006B     }
                 _0x2001C:
                 ; 0001 006C     puts("\rPart 2 is ending!\r");
                +
0002fe e2ae     +LDI R26 , LOW ( _0x20004 + ( 206 ) )
0002ff e0b2     +LDI R27 , HIGH ( _0x20004 + ( 206 ) )
                 	__POINTW2MN _0x20004,206
000300 940e 04a2 	CALL _puts
                 ; 0001 006D }
                 _0x20C0004:
000302 940e 07c1 	CALL __LOADLOCR4
000304 962e      	ADIW R28,14
000305 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20004:
000160           	.BYTE 0xE2
                 ;
                 ;void q3()
                 ; 0001 0070 {
                 
                 	.CSEG
                 _q3:
                 ; .FSTART _q3
                 ; 0001 0071     unsigned char string[100] = "";
                 ; 0001 0072     unsigned char gt ='';
                 ; 0001 0073     int counter = 0;
                 ; 0001 0074     int dig = 1;
                 ; 0001 0075     int index = 0;
                 ; 0001 0076     puts("part 3 is running!\r");
000306 97ef      	SBIW R28,63
000307 97a7      	SBIW R28,39
000308 e686      	LDI  R24,102
000309 e0a0      	LDI  R26,LOW(0)
00030a e0b0      	LDI  R27,HIGH(0)
00030b e7e8      	LDI  R30,LOW(_0x20021*2)
00030c e0f0      	LDI  R31,HIGH(_0x20021*2)
00030d 940e 07c6 	CALL __INITLOCB
00030f 940e 07b8 	CALL __SAVELOCR6
                 ;	string -> Y+8
                 ;	gt -> R17
                 ;	counter -> R18,R19
                 ;	dig -> R20,R21
                 ;	index -> Y+6
000311 e010      	LDI  R17,0
                +
000312 e020     +LDI R18 , LOW ( 0 )
000313 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000314 e041     +LDI R20 , LOW ( 1 )
000315 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                +
000316 e4a2     +LDI R26 , LOW ( _0x20022 + ( 0 ) )
000317 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 0 ) )
                 	__POINTW2MN _0x20022,0
000318 940e 04a2 	CALL _puts
                 ; 0001 0077     gt = getchar_nv();
00031a 940e 06a6 	CALL SUBOPT_0x7
                 ; 0001 0078     putchar(gt);
                 ; 0001 0079     while (gt != '\r')
                 _0x20023:
00031c 301d      	CPI  R17,13
00031d f059      	BREQ _0x20025
                 ; 0001 007A     {
                 ; 0001 007B         string[counter] = gt;
00031e 01f9      	MOVW R30,R18
00031f 01de      	MOVW R26,R28
000320 9618      	ADIW R26,8
000321 0fea      	ADD  R30,R26
000322 1ffb      	ADC  R31,R27
000323 8310      	ST   Z,R17
                 ; 0001 007C         gt = getchar_nv();
000324 940e 06a6 	CALL SUBOPT_0x7
                 ; 0001 007D         putchar(gt);
                 ; 0001 007E         counter++;
                +
000326 5f2f     +SUBI R18 , LOW ( - 1 )
000327 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
                 ; 0001 007F     }
000328 cff3      	RJMP _0x20023
                 _0x20025:
                 ; 0001 0080     lcd_clear();
000329 940e 0443 	CALL _lcd_clear
                 ; 0001 0081 
                 ; 0001 0082     for (index = 2; string[index] != ')'; index++)
00032b e0e2      	LDI  R30,LOW(2)
00032c e0f0      	LDI  R31,HIGH(2)
00032d 83ee      	STD  Y+6,R30
00032e 83ff      	STD  Y+6+1,R31
                 _0x20027:
00032f 940e 06ac 	CALL SUBOPT_0x8
000331 32a9      	CPI  R26,LOW(0x29)
000332 f189      	BREQ _0x20028
                 ; 0001 0083     {
                 ; 0001 0084         if (!((string[index] == '0') || (string[index] == '1') || (string[index] == '2') || (string[index] == '3') || (s ...
000333 940e 06ac 	CALL SUBOPT_0x8
000335 33a0      	CPI  R26,LOW(0x30)
000336 f121      	BREQ _0x2002A
000337 940e 06ac 	CALL SUBOPT_0x8
000339 33a1      	CPI  R26,LOW(0x31)
00033a f101      	BREQ _0x2002A
00033b 940e 06ac 	CALL SUBOPT_0x8
00033d 33a2      	CPI  R26,LOW(0x32)
00033e f0e1      	BREQ _0x2002A
00033f 940e 06ac 	CALL SUBOPT_0x8
000341 33a3      	CPI  R26,LOW(0x33)
000342 f0c1      	BREQ _0x2002A
000343 940e 06ac 	CALL SUBOPT_0x8
000345 33a4      	CPI  R26,LOW(0x34)
000346 f0a1      	BREQ _0x2002A
000347 940e 06ac 	CALL SUBOPT_0x8
000349 33a5      	CPI  R26,LOW(0x35)
00034a f081      	BREQ _0x2002A
00034b 940e 06ac 	CALL SUBOPT_0x8
00034d 33a6      	CPI  R26,LOW(0x36)
00034e f061      	BREQ _0x2002A
00034f 940e 06ac 	CALL SUBOPT_0x8
000351 33a7      	CPI  R26,LOW(0x37)
000352 f041      	BREQ _0x2002A
000353 940e 06ac 	CALL SUBOPT_0x8
000355 33a8      	CPI  R26,LOW(0x38)
000356 f021      	BREQ _0x2002A
000357 940e 06ac 	CALL SUBOPT_0x8
000359 33a9      	CPI  R26,LOW(0x39)
00035a f409      	BRNE _0x2002B
                 _0x2002A:
00035b c002      	RJMP _0x20029
                 _0x2002B:
                 ; 0001 0085             dig = 0;
                +
00035c e040     +LDI R20 , LOW ( 0 )
00035d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0001 0086     }
                 _0x20029:
00035e 81ee      	LDD  R30,Y+6
00035f 81ff      	LDD  R31,Y+6+1
000360 9631      	ADIW R30,1
000361 83ee      	STD  Y+6,R30
000362 83ff      	STD  Y+6+1,R31
000363 cfcb      	RJMP _0x20027
                 _0x20028:
                 ; 0001 0087 
                 ; 0001 0088     if (dig == 0)
000364 2e04      	MOV  R0,R20
000365 2a05      	OR   R0,R21
000366 f501      	BRNE _0x2002C
                 ; 0001 0089     {
                 ; 0001 008A         puts("\rTx:");
                +
000367 e5a6     +LDI R26 , LOW ( _0x20022 + ( 20 ) )
000368 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 20 ) )
                 	__POINTW2MN _0x20022,20
000369 940e 06b4 	CALL SUBOPT_0x9
                 ; 0001 008B         puts(string);
                 ; 0001 008C         putchar('\r');
                 ; 0001 008D         puts("\rFrame must be 5 integer\r");
                +
00036b e5ab     +LDI R26 , LOW ( _0x20022 + ( 25 ) )
00036c e0b2     +LDI R27 , HIGH ( _0x20022 + ( 25 ) )
                 	__POINTW2MN _0x20022,25
00036d 940e 04a2 	CALL _puts
                 ; 0001 008E         sprintf(string, "Tx: %d", dig);
00036f 01fe      	MOVW R30,R28
000370 9638      	ADIW R30,8
000371 93fa      	ST   -Y,R31
000372 93ea      	ST   -Y,R30
                +
000373 e1e5     +LDI R30 , LOW ( 2 * _0x20000 + ( 55 ) )
000374 e0f1     +LDI R31 , HIGH ( 2 * _0x20000 + ( 55 ) )
                 	__POINTW1FN _0x20000,55
000375 93fa      	ST   -Y,R31
000376 93ea      	ST   -Y,R30
000377 01fa      	MOVW R30,R20
000378 940e 0765 	CALL __CWD1
00037a 940e 07b3 	CALL __PUTPARD1
00037c e084      	LDI  R24,4
00037d 940e 0624 	CALL _sprintf
00037f 9628      	ADIW R28,8
                 ; 0001 008F         lcd_clear();
000380 940e 0443 	CALL _lcd_clear
                 ; 0001 0090         lcd_puts(string);
000382 940e 06bd 	CALL SUBOPT_0xA
                 ; 0001 0091         lcd_gotoxy(0, 1);
                 ; 0001 0092         lcd_puts("Frame must be 5 integer");
                +
000384 e7a5     +LDI R26 , LOW ( _0x20022 + ( 51 ) )
000385 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 51 ) )
                 	__POINTW2MN _0x20022,51
000386 c026      	RJMP _0x20034
                 ; 0001 0093     }
                 ; 0001 0094     else if (counter != 9)
                 _0x2002C:
000387 e0e9      	LDI  R30,LOW(9)
000388 e0f0      	LDI  R31,HIGH(9)
000389 17e2      	CP   R30,R18
00038a 07f3      	CPC  R31,R19
00038b f089      	BREQ _0x2002E
                 ; 0001 0095     {
                 ; 0001 0096         puts("\rTx:");
                +
00038c e8ad     +LDI R26 , LOW ( _0x20022 + ( 75 ) )
00038d e0b2     +LDI R27 , HIGH ( _0x20022 + ( 75 ) )
                 	__POINTW2MN _0x20022,75
00038e 940e 06b4 	CALL SUBOPT_0x9
                 ; 0001 0097         puts(string);
                 ; 0001 0098         putchar('\r');
                 ; 0001 0099         puts("\rIncorrect frame size.\r");
                +
000390 e9a2     +LDI R26 , LOW ( _0x20022 + ( 80 ) )
000391 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 80 ) )
                 	__POINTW2MN _0x20022,80
000392 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 009A         lcd_clear();
                 ; 0001 009B         lcd_puts("Tx:");
                +
000394 eaaa     +LDI R26 , LOW ( _0x20022 + ( 104 ) )
000395 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 104 ) )
                 	__POINTW2MN _0x20022,104
000396 940e 0464 	CALL _lcd_puts
                 ; 0001 009C         lcd_puts(string);
000398 940e 06bd 	CALL SUBOPT_0xA
                 ; 0001 009D 
                 ; 0001 009E         lcd_gotoxy(0, 1);
                 ; 0001 009F         lcd_puts("Incorrect frame size.");
                +
00039a eaae     +LDI R26 , LOW ( _0x20022 + ( 108 ) )
00039b e0b2     +LDI R27 , HIGH ( _0x20022 + ( 108 ) )
                 	__POINTW2MN _0x20022,108
00039c c010      	RJMP _0x20034
                 ; 0001 00A0     }
                 ; 0001 00A1     else
                 _0x2002E:
                 ; 0001 00A2     {
                 ; 0001 00A3         puts("\rTx:");
                +
00039d eca4     +LDI R26 , LOW ( _0x20022 + ( 130 ) )
00039e e0b2     +LDI R27 , HIGH ( _0x20022 + ( 130 ) )
                 	__POINTW2MN _0x20022,130
00039f 940e 06b4 	CALL SUBOPT_0x9
                 ; 0001 00A4         puts(string);
                 ; 0001 00A5         putchar('\r');
                 ; 0001 00A6         puts("\rThe frame is correct\r");
                +
0003a1 eca9     +LDI R26 , LOW ( _0x20022 + ( 135 ) )
0003a2 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 135 ) )
                 	__POINTW2MN _0x20022,135
0003a3 940e 068c 	CALL SUBOPT_0x3
                 ; 0001 00A7         lcd_clear();
                 ; 0001 00A8         lcd_puts("Tx:");
                +
0003a5 eea0     +LDI R26 , LOW ( _0x20022 + ( 158 ) )
0003a6 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 158 ) )
                 	__POINTW2MN _0x20022,158
0003a7 940e 0464 	CALL _lcd_puts
                 ; 0001 00A9         lcd_puts(string);
0003a9 940e 06bd 	CALL SUBOPT_0xA
                 ; 0001 00AA         lcd_gotoxy(0, 1);
                 ; 0001 00AB         lcd_puts("The frame is correct");
                +
0003ab eea4     +LDI R26 , LOW ( _0x20022 + ( 162 ) )
0003ac e0b2     +LDI R27 , HIGH ( _0x20022 + ( 162 ) )
                 	__POINTW2MN _0x20022,162
                 _0x20034:
0003ad 940e 0464 	CALL _lcd_puts
                 ; 0001 00AC     }
                 ; 0001 00AD     puts("\rPart 3 is ending!");
                +
0003af efa9     +LDI R26 , LOW ( _0x20022 + ( 183 ) )
0003b0 e0b2     +LDI R27 , HIGH ( _0x20022 + ( 183 ) )
                 	__POINTW2MN _0x20022,183
0003b1 940e 04a2 	CALL _puts
                 ; 0001 00AE     putchar('\r');
0003b3 e0ad      	LDI  R26,LOW(13)
0003b4 940e 049b 	CALL _putchar
                 ; 0001 00AF     // getchar_nv();
                 ; 0001 00B0 }
0003b6 940e 07bf 	CALL __LOADLOCR6
0003b8 96ef      	ADIW R28,63
0003b9 96ad      	ADIW R28,45
0003ba 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x20022:
000242           	.BYTE 0xCA
                 ;
                 ;void init(void)
                 ; 0001 00B3 {
                 
                 	.CSEG
                 _init:
                 ; .FSTART _init
                 ; 0001 00B4     float temp1 = 0;
                 ; 0001 00B5     int temp2 = 0;
                 ; 0001 00B6     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
0003bb 9724      	SBIW R28,4
0003bc e0e0      	LDI  R30,LOW(0)
0003bd 83e8      	ST   Y,R30
0003be 83e9      	STD  Y+1,R30
0003bf 83ea      	STD  Y+2,R30
0003c0 83eb      	STD  Y+3,R30
0003c1 931a      	ST   -Y,R17
0003c2 930a      	ST   -Y,R16
                 ;	temp1 -> Y+2
                 ;	temp2 -> R16,R17
                +
0003c3 e000     +LDI R16 , LOW ( 0 )
0003c4 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0003c5 bbea      	OUT  0x1A,R30
                 ; 0001 00B7     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
0003c6 bbeb      	OUT  0x1B,R30
                 ; 0001 00B8     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (0 << DDB0) ...
0003c7 bbe7      	OUT  0x17,R30
                 ; 0001 00B9     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
0003c8 bbe8      	OUT  0x18,R30
                 ; 0001 00BA     DDRC = (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (1 << DDC1) | (1 << DDC0) ...
0003c9 efef      	LDI  R30,LOW(255)
0003ca bbe4      	OUT  0x14,R30
                 ; 0001 00BB     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
0003cb e0e0      	LDI  R30,LOW(0)
0003cc bbe5      	OUT  0x15,R30
                 ; 0001 00BC     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
0003cd bbe1      	OUT  0x11,R30
                 ; 0001 00BD     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
0003ce bbe2      	OUT  0x12,R30
                 ; 0001 00BE     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (0 << CS01) | (0 << CS00);
0003cf bfe3      	OUT  0x33,R30
                 ; 0001 00BF     TCNT0 = 0x00;
0003d0 bfe2      	OUT  0x32,R30
                 ; 0001 00C0     OCR0 = 0x00;
0003d1 bfec      	OUT  0x3C,R30
                 ; 0001 00C1     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
0003d2 bdef      	OUT  0x2F,R30
                 ; 0001 00C2     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (0 << CS10);
0003d3 bdee      	OUT  0x2E,R30
                 ; 0001 00C3     TCNT1H = 0x00;
0003d4 bded      	OUT  0x2D,R30
                 ; 0001 00C4     TCNT1L = 0x00;
0003d5 bdec      	OUT  0x2C,R30
                 ; 0001 00C5     ICR1H = 0x00;
0003d6 bde7      	OUT  0x27,R30
                 ; 0001 00C6     ICR1L = 0x00;
0003d7 bde6      	OUT  0x26,R30
                 ; 0001 00C7     OCR1AH = 0x00;
0003d8 bdeb      	OUT  0x2B,R30
                 ; 0001 00C8     OCR1AL = 0x00;
0003d9 bdea      	OUT  0x2A,R30
                 ; 0001 00C9     OCR1BH = 0x00;
0003da bde9      	OUT  0x29,R30
                 ; 0001 00CA     OCR1BL = 0x00;
0003db bde8      	OUT  0x28,R30
                 ; 0001 00CB     ASSR = 0 << AS2;
0003dc bde2      	OUT  0x22,R30
                 ; 0001 00CC     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (0 << CS22) | (0 << CS21) | (0 << CS20);
0003dd bde5      	OUT  0x25,R30
                 ; 0001 00CD     TCNT2 = 0x00;
0003de bde4      	OUT  0x24,R30
                 ; 0001 00CE     OCR2 = 0x00;
0003df bde3      	OUT  0x23,R30
                 ; 0001 00CF     TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << OCIE0) |  ...
0003e0 bfe9      	OUT  0x39,R30
                 ; 0001 00D0     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
0003e1 bfe5      	OUT  0x35,R30
                 ; 0001 00D1     MCUCSR = (0 << ISC2);
0003e2 bfe4      	OUT  0x34,R30
                 ; 0001 00D2 
                 ; 0001 00D3     ACSR = (1 << ACD) | (0 << ACBG) | (0 << ACO) | (0 << ACI) | (0 << ACIE) | (0 << ACIC) | (0 << ACIS1) | (0 << ACIS0);
0003e3 e8e0      	LDI  R30,LOW(128)
0003e4 b9e8      	OUT  0x8,R30
                 ; 0001 00D4     SFIOR = (0 << ACME);
0003e5 e0e0      	LDI  R30,LOW(0)
0003e6 bfe0      	OUT  0x30,R30
                 ; 0001 00D5     ADCSRA = (0 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (0 << ADPS1) | (0 <<  ...
0003e7 b9e6      	OUT  0x6,R30
                 ; 0001 00D6     SPCR = (0 << SPIE) | (0 << SPE) | (0 << DORD) | (0 << MSTR) | (0 << CPOL) | (0 << CPHA) | (0 << SPR1) | (0 << SPR0);
0003e8 b9ed      	OUT  0xD,R30
                 ; 0001 00D7     TWCR = (0 << TWEA) | (0 << TWSTA) | (0 << TWSTO) | (0 << TWEN) | (0 << TWIE);
0003e9 bfe6      	OUT  0x36,R30
                 ; 0001 00D8     lcd_init(16);
0003ea e1a0      	LDI  R26,LOW(16)
0003eb 940e 046e 	CALL _lcd_init
                 ; 0001 00D9 
                 ; 0001 00DA     UCSRA = (0 << RXC) | (0 << TXC) | (0 << UDRE) | (0 << FE) | (0 << DOR) | (0 << UPE) | (0 << U2X) | (0 << MPCM);
0003ed e0e0      	LDI  R30,LOW(0)
0003ee b9eb      	OUT  0xB,R30
                 ; 0001 00DB     UCSRB = (1 << RXCIE) | (1 << TXCIE) | (0 << UDRIE) | (1 << RXEN) | (1 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 <<  ...
0003ef ede8      	LDI  R30,LOW(216)
0003f0 b9ea      	OUT  0xA,R30
                 ; 0001 00DC     UCSRC = (1 << URSEL) | (0 << UMSEL) | (0 << UPM1) | (0 << UPM0) | (0 << USBS) | (1 << UCSZ1) | (1 << UCSZ0) | (0 <<  ...
0003f1 e8e6      	LDI  R30,LOW(134)
0003f2 bde0      	OUT  0x20,R30
                 ; 0001 00DD 
                 ; 0001 00DE     temp1 = ((8 * 1000000) / (16 * 9600)) - 1;
                +
0003f3 e0e0     +LDI R30 , LOW ( 0x424C0000 )
0003f4 e0f0     +LDI R31 , HIGH ( 0x424C0000 )
0003f5 e46c     +LDI R22 , BYTE3 ( 0x424C0000 )
0003f6 e472     +LDI R23 , BYTE4 ( 0x424C0000 )
                 	__GETD1N 0x424C0000
                +
0003f7 83ea     +STD Y + 2 , R30
0003f8 83fb     +STD Y + 2 + 1 , R31
0003f9 836c     +STD Y + 2 + 2 , R22
0003fa 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
                 ; 0001 00DF     temp2 = (int)temp1;
0003fb 940e 071a 	CALL __CFD1
0003fd 018f      	MOVW R16,R30
                 ; 0001 00E0 
                 ; 0001 00E1     if (temp2 < 0xFF)
                +
0003fe 3f0f     +CPI R16 , LOW ( 255 )
0003ff e0e0     +LDI R30 , HIGH ( 255 )
000400 071e     +CPC R17 , R30
                 	__CPWRN 16,17,255
000401 f414      	BRGE _0x20030
                 ; 0001 00E2     {
                 ; 0001 00E3         UBRRL = temp2;
000402 b909      	OUT  0x9,R16
                 ; 0001 00E4     }
                 ; 0001 00E5     else
000403 c00c      	RJMP _0x20031
                 _0x20030:
                 ; 0001 00E6     {
                 ; 0001 00E7         UBRRL = temp2 % 0xFF;
000404 01d8      	MOVW R26,R16
000405 efef      	LDI  R30,LOW(255)
000406 e0f0      	LDI  R31,HIGH(255)
000407 940e 078f 	CALL __MODW21
000409 b9e9      	OUT  0x9,R30
                 ; 0001 00E8         UBRRH = temp2 / 0xFF;
00040a 01d8      	MOVW R26,R16
00040b efef      	LDI  R30,LOW(255)
00040c e0f0      	LDI  R31,HIGH(255)
00040d 940e 078a 	CALL __DIVW21
00040f bde0      	OUT  0x20,R30
                 ; 0001 00E9     }
                 _0x20031:
                 ; 0001 00EA #asm("sei")
000410 9478      	sei
                 ; 0001 00EB }
000411 8119      	LDD  R17,Y+1
000412 8108      	LDD  R16,Y+0
000413 9626      	ADIW R28,6
000414 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
000415 93aa      	ST   -Y,R26
000416 b3e5      	IN   R30,0x15
000417 70ef      	ANDI R30,LOW(0xF)
000418 2fae      	MOV  R26,R30
000419 81e8      	LD   R30,Y
00041a 7fe0      	ANDI R30,LOW(0xF0)
00041b 2bea      	OR   R30,R26
00041c bbe5      	OUT  0x15,R30
                +
00041d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00041e 958a     +DEC R24
00041f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000420 9aaa      	SBI  0x15,2
                +
000421 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000422 958a     +DEC R24
000423 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000424 98aa      	CBI  0x15,2
                +
000425 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000426 958a     +DEC R24
000427 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000428 940c 04a0 	JMP  _0x20C0003
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00042a 93aa      	ST   -Y,R26
00042b 81a8      	LD   R26,Y
00042c dfe8      	RCALL __lcd_write_nibble_G102
00042d 81e8          ld    r30,y
00042e 95e2          swap  r30
00042f 83e8          st    y,r30
000430 81a8      	LD   R26,Y
000431 dfe3      	RCALL __lcd_write_nibble_G102
                +
000432 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000433 958a     +DEC R24
000434 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000435 c06a      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000436 93aa      	ST   -Y,R26
000437 81e8      	LD   R30,Y
000438 e0f0      	LDI  R31,0
000439 5ee0      	SUBI R30,LOW(-__base_y_G102)
00043a 4ffc      	SBCI R31,HIGH(-__base_y_G102)
00043b 81e0      	LD   R30,Z
00043c 81a9      	LDD  R26,Y+1
00043d 0fae      	ADD  R26,R30
00043e dfeb      	RCALL __lcd_write_data
00043f 80b9      	LDD  R11,Y+1
000440 80a8      	LDD  R10,Y+0
000441 9622      	ADIW R28,2
000442 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000443 e0a2      	LDI  R26,LOW(2)
000444 940e 06c3 	CALL SUBOPT_0xB
000446 e0ac      	LDI  R26,LOW(12)
000447 dfe2      	RCALL __lcd_write_data
000448 e0a1      	LDI  R26,LOW(1)
000449 940e 06c3 	CALL SUBOPT_0xB
00044b e0e0      	LDI  R30,LOW(0)
00044c 2eae      	MOV  R10,R30
00044d 2ebe      	MOV  R11,R30
00044e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00044f 93aa      	ST   -Y,R26
000450 81a8      	LD   R26,Y
000451 30aa      	CPI  R26,LOW(0xA)
000452 f011      	BREQ _0x2040005
000453 14bd      	CP   R11,R13
000454 f048      	BRLO _0x2040004
                 _0x2040005:
000455 e0e0      	LDI  R30,LOW(0)
000456 93ea      	ST   -Y,R30
000457 94a3      	INC  R10
000458 2daa      	MOV  R26,R10
000459 dfdc      	RCALL _lcd_gotoxy
00045a 81a8      	LD   R26,Y
00045b 30aa      	CPI  R26,LOW(0xA)
00045c f409      	BRNE _0x2040007
00045d c042      	RJMP _0x20C0003
                 _0x2040007:
                 _0x2040004:
00045e 94b3      	INC  R11
00045f 9aa8      	SBI  0x15,0
000460 81a8      	LD   R26,Y
000461 dfc8      	RCALL __lcd_write_data
000462 98a8      	CBI  0x15,0
000463 c03c      	RJMP _0x20C0003
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000464 93ba      	ST   -Y,R27
000465 93aa      	ST   -Y,R26
000466 931a      	ST   -Y,R17
                 _0x2040008:
000467 940e 06c9 	CALL SUBOPT_0xC
000469 f019      	BREQ _0x204000A
00046a 2fa1      	MOV  R26,R17
00046b dfe3      	RCALL _lcd_putchar
00046c cffa      	RJMP _0x2040008
                 _0x204000A:
00046d c03f      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00046e 93aa      	ST   -Y,R26
00046f b3e4      	IN   R30,0x14
000470 6fe0      	ORI  R30,LOW(0xF0)
000471 bbe4      	OUT  0x14,R30
000472 9aa2      	SBI  0x14,2
000473 9aa0      	SBI  0x14,0
000474 9aa1      	SBI  0x14,1
000475 98aa      	CBI  0x15,2
000476 98a8      	CBI  0x15,0
000477 98a9      	CBI  0x15,1
000478 80d8      	LDD  R13,Y+0
000479 81e8      	LD   R30,Y
00047a 58e0      	SUBI R30,-LOW(128)
                +
00047b 93e0 0322+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00047d 81e8      	LD   R30,Y
00047e 54e0      	SUBI R30,-LOW(192)
                +
00047f 93e0 0323+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000481 e1a4      	LDI  R26,LOW(20)
000482 e0b0      	LDI  R27,0
000483 940e 0705 	CALL _delay_ms
000485 940e 06d1 	CALL SUBOPT_0xD
000487 940e 06d1 	CALL SUBOPT_0xD
000489 940e 06d1 	CALL SUBOPT_0xD
00048b e2a0      	LDI  R26,LOW(32)
00048c df88      	RCALL __lcd_write_nibble_G102
                +
00048d ec88     +LDI R24 , LOW ( 200 )
00048e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00048f 9701     +SBIW R24 , 1
000490 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000491 e2a8      	LDI  R26,LOW(40)
000492 df97      	RCALL __lcd_write_data
000493 e0a4      	LDI  R26,LOW(4)
000494 df95      	RCALL __lcd_write_data
000495 e8a5      	LDI  R26,LOW(133)
000496 df93      	RCALL __lcd_write_data
000497 e0a6      	LDI  R26,LOW(6)
000498 df91      	RCALL __lcd_write_data
000499 dfa9      	RCALL _lcd_clear
00049a c005      	RJMP _0x20C0003
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00049b 93aa      	ST   -Y,R26
                 putchar0:
00049c 9b5d           sbis usr,udre
00049d cffe           rjmp putchar0
00049e 81e8           ld   r30,y
00049f b9ec           out  udr,r30
                 _0x20C0003:
0004a0 9621      	ADIW R28,1
0004a1 9508      	RET
                 ; .FEND
                 _puts:
                 ; .FSTART _puts
0004a2 93ba      	ST   -Y,R27
0004a3 93aa      	ST   -Y,R26
0004a4 931a      	ST   -Y,R17
                 _0x2060003:
0004a5 940e 06c9 	CALL SUBOPT_0xC
0004a7 f019      	BREQ _0x2060005
0004a8 2fa1      	MOV  R26,R17
0004a9 dff1      	RCALL _putchar
0004aa cffa      	RJMP _0x2060003
                 _0x2060005:
0004ab e0aa      	LDI  R26,LOW(10)
0004ac dfee      	RCALL _putchar
                 _0x20C0002:
0004ad 8118      	LDD  R17,Y+0
0004ae 9623      	ADIW R28,3
0004af 9508      	RET
                 ; .FEND
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
0004b0 93ba      	ST   -Y,R27
0004b1 93aa      	ST   -Y,R26
0004b2 931a      	ST   -Y,R17
0004b3 930a      	ST   -Y,R16
0004b4 81aa      	LDD  R26,Y+2
0004b5 81bb      	LDD  R27,Y+2+1
0004b6 9612      	ADIW R26,2
0004b7 940e 07ab 	CALL __GETW1P
0004b9 9730      	SBIW R30,0
0004ba f159      	BREQ _0x2060010
0004bb 81aa      	LDD  R26,Y+2
0004bc 81bb      	LDD  R27,Y+2+1
0004bd 9614      	ADIW R26,4
0004be 940e 07ab 	CALL __GETW1P
0004c0 018f      	MOVW R16,R30
0004c1 9730      	SBIW R30,0
0004c2 f061      	BREQ _0x2060012
                +
0004c3 3002     +CPI R16 , LOW ( 2 )
0004c4 e0e0     +LDI R30 , HIGH ( 2 )
0004c5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0004c6 f098      	BRLO _0x2060013
0004c7 01f8      	MOVW R30,R16
0004c8 9731      	SBIW R30,1
0004c9 018f      	MOVW R16,R30
                +
0004ca 81aa     +LDD R26 , Y + 2
0004cb 81bb     +LDD R27 , Y + 2 + 1
0004cc 9614     +ADIW R26 , 4
0004cd 93ed     +ST X + , R30
0004ce 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
0004cf 81aa      	LDD  R26,Y+2
0004d0 81bb      	LDD  R27,Y+2+1
0004d1 9612      	ADIW R26,2
0004d2 91ed      	LD   R30,X+
0004d3 91fd      	LD   R31,X+
0004d4 9631      	ADIW R30,1
0004d5 93fe      	ST   -X,R31
0004d6 93ee      	ST   -X,R30
0004d7 9731      	SBIW R30,1
0004d8 81ac      	LDD  R26,Y+4
0004d9 83a0      	STD  Z+0,R26
                 _0x2060013:
0004da 81aa      	LDD  R26,Y+2
0004db 81bb      	LDD  R27,Y+2+1
0004dc 940e 07ab 	CALL __GETW1P
0004de 23ff      	TST  R31
0004df f02a      	BRMI _0x2060014
0004e0 91ed      	LD   R30,X+
0004e1 91fd      	LD   R31,X+
0004e2 9631      	ADIW R30,1
0004e3 93fe      	ST   -X,R31
0004e4 93ee      	ST   -X,R30
                 _0x2060014:
0004e5 c006      	RJMP _0x2060015
                 _0x2060010:
0004e6 81aa      	LDD  R26,Y+2
0004e7 81bb      	LDD  R27,Y+2+1
0004e8 efef      	LDI  R30,LOW(65535)
0004e9 efff      	LDI  R31,HIGH(65535)
0004ea 93ed      	ST   X+,R30
0004eb 93fc      	ST   X,R31
                 _0x2060015:
0004ec 8119      	LDD  R17,Y+1
0004ed 8108      	LDD  R16,Y+0
0004ee 9625      	ADIW R28,5
0004ef 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
0004f0 93ba      	ST   -Y,R27
0004f1 93aa      	ST   -Y,R26
0004f2 9726      	SBIW R28,6
0004f3 940e 07b8 	CALL __SAVELOCR6
0004f5 e010      	LDI  R17,0
0004f6 85ac      	LDD  R26,Y+12
0004f7 85bd      	LDD  R27,Y+12+1
0004f8 e0e0      	LDI  R30,LOW(0)
0004f9 e0f0      	LDI  R31,HIGH(0)
0004fa 93ed      	ST   X+,R30
0004fb 93fc      	ST   X,R31
                 _0x2060016:
0004fc 89ea      	LDD  R30,Y+18
0004fd 89fb      	LDD  R31,Y+18+1
0004fe 9631      	ADIW R30,1
0004ff 8bea      	STD  Y+18,R30
000500 8bfb      	STD  Y+18+1,R31
000501 9731      	SBIW R30,1
000502 91e4      	LPM  R30,Z
000503 2f2e      	MOV  R18,R30
000504 30e0      	CPI  R30,0
000505 f409      	BRNE PC+2
000506 c115      	RJMP _0x2060018
000507 2fe1      	MOV  R30,R17
000508 30e0      	CPI  R30,0
000509 f439      	BRNE _0x206001C
00050a 3225      	CPI  R18,37
00050b f411      	BRNE _0x206001D
00050c e011      	LDI  R17,LOW(1)
00050d c002      	RJMP _0x206001E
                 _0x206001D:
00050e 940e 06d9 	CALL SUBOPT_0xE
                 _0x206001E:
000510 c10a      	RJMP _0x206001B
                 _0x206001C:
000511 30e1      	CPI  R30,LOW(0x1)
000512 f4a9      	BRNE _0x206001F
000513 3225      	CPI  R18,37
000514 f419      	BRNE _0x2060020
000515 940e 06d9 	CALL SUBOPT_0xE
000517 c102      	RJMP _0x20600CC
                 _0x2060020:
000518 e012      	LDI  R17,LOW(2)
000519 e040      	LDI  R20,LOW(0)
00051a e000      	LDI  R16,LOW(0)
00051b 322d      	CPI  R18,45
00051c f411      	BRNE _0x2060021
00051d e001      	LDI  R16,LOW(1)
00051e c0fc      	RJMP _0x206001B
                 _0x2060021:
00051f 322b      	CPI  R18,43
000520 f411      	BRNE _0x2060022
000521 e24b      	LDI  R20,LOW(43)
000522 c0f8      	RJMP _0x206001B
                 _0x2060022:
000523 3220      	CPI  R18,32
000524 f411      	BRNE _0x2060023
000525 e240      	LDI  R20,LOW(32)
000526 c0f4      	RJMP _0x206001B
                 _0x2060023:
000527 c002      	RJMP _0x2060024
                 _0x206001F:
000528 30e2      	CPI  R30,LOW(0x2)
000529 f439      	BRNE _0x2060025
                 _0x2060024:
00052a e050      	LDI  R21,LOW(0)
00052b e013      	LDI  R17,LOW(3)
00052c 3320      	CPI  R18,48
00052d f411      	BRNE _0x2060026
00052e 6800      	ORI  R16,LOW(128)
00052f c0eb      	RJMP _0x206001B
                 _0x2060026:
000530 c003      	RJMP _0x2060027
                 _0x2060025:
000531 30e3      	CPI  R30,LOW(0x3)
000532 f009      	BREQ PC+2
000533 c0e7      	RJMP _0x206001B
                 _0x2060027:
000534 3320      	CPI  R18,48
000535 f010      	BRLO _0x206002A
000536 332a      	CPI  R18,58
000537 f008      	BRLO _0x206002B
                 _0x206002A:
000538 c007      	RJMP _0x2060029
                 _0x206002B:
000539 e0aa      	LDI  R26,LOW(10)
00053a 9f5a      	MUL  R21,R26
00053b 2d50      	MOV  R21,R0
00053c 2fe2      	MOV  R30,R18
00053d 53e0      	SUBI R30,LOW(48)
00053e 0f5e      	ADD  R21,R30
00053f c0db      	RJMP _0x206001B
                 _0x2060029:
000540 2fe2      	MOV  R30,R18
000541 36e3      	CPI  R30,LOW(0x63)
000542 f449      	BRNE _0x206002F
000543 940e 06e0 	CALL SUBOPT_0xF
000545 89e8      	LDD  R30,Y+16
000546 89f9      	LDD  R31,Y+16+1
000547 81a4      	LDD  R26,Z+4
000548 93aa      	ST   -Y,R26
000549 940e 06e6 	CALL SUBOPT_0x10
00054b c0ce      	RJMP _0x2060030
                 _0x206002F:
00054c 37e3      	CPI  R30,LOW(0x73)
00054d f441      	BRNE _0x2060032
00054e 940e 06e0 	CALL SUBOPT_0xF
000550 940e 06ec 	CALL SUBOPT_0x11
000552 940e 0658 	CALL _strlen
000554 2f1e      	MOV  R17,R30
000555 c00a      	RJMP _0x2060033
                 _0x2060032:
000556 37e0      	CPI  R30,LOW(0x70)
000557 f461      	BRNE _0x2060035
000558 940e 06e0 	CALL SUBOPT_0xF
00055a 940e 06ec 	CALL SUBOPT_0x11
00055c 940e 0664 	CALL _strlenf
00055e 2f1e      	MOV  R17,R30
00055f 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000560 6002      	ORI  R16,LOW(2)
000561 770f      	ANDI R16,LOW(127)
000562 e030      	LDI  R19,LOW(0)
000563 c034      	RJMP _0x2060036
                 _0x2060035:
000564 36e4      	CPI  R30,LOW(0x64)
000565 f011      	BREQ _0x2060039
000566 36e9      	CPI  R30,LOW(0x69)
000567 f411      	BRNE _0x206003A
                 _0x2060039:
000568 6004      	ORI  R16,LOW(4)
000569 c002      	RJMP _0x206003B
                 _0x206003A:
00056a 37e5      	CPI  R30,LOW(0x75)
00056b f431      	BRNE _0x206003C
                 _0x206003B:
00056c e5e4      	LDI  R30,LOW(_tbl10_G103*2)
00056d e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
00056e 83ee      	STD  Y+6,R30
00056f 83ff      	STD  Y+6+1,R31
000570 e015      	LDI  R17,LOW(5)
000571 c00c      	RJMP _0x206003D
                 _0x206003C:
000572 35e8      	CPI  R30,LOW(0x58)
000573 f411      	BRNE _0x206003F
000574 6008      	ORI  R16,LOW(8)
000575 c003      	RJMP _0x2060040
                 _0x206003F:
000576 37e8      	CPI  R30,LOW(0x78)
000577 f009      	BREQ PC+2
000578 c0a1      	RJMP _0x2060071
                 _0x2060040:
000579 e5ee      	LDI  R30,LOW(_tbl16_G103*2)
00057a e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
00057b 83ee      	STD  Y+6,R30
00057c 83ff      	STD  Y+6+1,R31
00057d e014      	LDI  R17,LOW(4)
                 _0x206003D:
00057e ff02      	SBRS R16,2
00057f c014      	RJMP _0x2060042
000580 940e 06e0 	CALL SUBOPT_0xF
000582 940e 06f6 	CALL SUBOPT_0x12
000584 85ab      	LDD  R26,Y+11
000585 23aa      	TST  R26
000586 f43a      	BRPL _0x2060043
000587 85ea      	LDD  R30,Y+10
000588 85fb      	LDD  R31,Y+10+1
000589 940e 0759 	CALL __ANEGW1
00058b 87ea      	STD  Y+10,R30
00058c 87fb      	STD  Y+10+1,R31
00058d e24d      	LDI  R20,LOW(45)
                 _0x2060043:
00058e 3040      	CPI  R20,0
00058f f011      	BREQ _0x2060044
000590 5f1f      	SUBI R17,-LOW(1)
000591 c001      	RJMP _0x2060045
                 _0x2060044:
000592 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000593 c004      	RJMP _0x2060046
                 _0x2060042:
000594 940e 06e0 	CALL SUBOPT_0xF
000596 940e 06f6 	CALL SUBOPT_0x12
                 _0x2060046:
                 _0x2060036:
000598 fd00      	SBRC R16,0
000599 c011      	RJMP _0x2060047
                 _0x2060048:
00059a 1715      	CP   R17,R21
00059b f478      	BRSH _0x206004A
00059c ff07      	SBRS R16,7
00059d c008      	RJMP _0x206004B
00059e ff02      	SBRS R16,2
00059f c004      	RJMP _0x206004C
0005a0 7f0b      	ANDI R16,LOW(251)
0005a1 2f24      	MOV  R18,R20
0005a2 5011      	SUBI R17,LOW(1)
0005a3 c001      	RJMP _0x206004D
                 _0x206004C:
0005a4 e320      	LDI  R18,LOW(48)
                 _0x206004D:
0005a5 c001      	RJMP _0x206004E
                 _0x206004B:
0005a6 e220      	LDI  R18,LOW(32)
                 _0x206004E:
0005a7 940e 06d9 	CALL SUBOPT_0xE
0005a9 5051      	SUBI R21,LOW(1)
0005aa cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
0005ab 2f31      	MOV  R19,R17
0005ac ff01      	SBRS R16,1
0005ad c017      	RJMP _0x206004F
                 _0x2060050:
0005ae 3030      	CPI  R19,0
0005af f0a1      	BREQ _0x2060052
0005b0 ff03      	SBRS R16,3
0005b1 c006      	RJMP _0x2060053
0005b2 81ee      	LDD  R30,Y+6
0005b3 81ff      	LDD  R31,Y+6+1
0005b4 9125      	LPM  R18,Z+
0005b5 83ee      	STD  Y+6,R30
0005b6 83ff      	STD  Y+6+1,R31
0005b7 c005      	RJMP _0x2060054
                 _0x2060053:
0005b8 81ae      	LDD  R26,Y+6
0005b9 81bf      	LDD  R27,Y+6+1
0005ba 912d      	LD   R18,X+
0005bb 83ae      	STD  Y+6,R26
0005bc 83bf      	STD  Y+6+1,R27
                 _0x2060054:
0005bd 940e 06d9 	CALL SUBOPT_0xE
0005bf 3050      	CPI  R21,0
0005c0 f009      	BREQ _0x2060055
0005c1 5051      	SUBI R21,LOW(1)
                 _0x2060055:
0005c2 5031      	SUBI R19,LOW(1)
0005c3 cfea      	RJMP _0x2060050
                 _0x2060052:
0005c4 c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
0005c5 e320      	LDI  R18,LOW(48)
0005c6 81ee      	LDD  R30,Y+6
0005c7 81ff      	LDD  R31,Y+6+1
0005c8 940e 07af 	CALL __GETW1PF
0005ca 87e8      	STD  Y+8,R30
0005cb 87f9      	STD  Y+8+1,R31
0005cc 81ee      	LDD  R30,Y+6
0005cd 81ff      	LDD  R31,Y+6+1
0005ce 9632      	ADIW R30,2
0005cf 83ee      	STD  Y+6,R30
0005d0 83ff      	STD  Y+6+1,R31
                 _0x206005A:
0005d1 85e8      	LDD  R30,Y+8
0005d2 85f9      	LDD  R31,Y+8+1
0005d3 85aa      	LDD  R26,Y+10
0005d4 85bb      	LDD  R27,Y+10+1
0005d5 17ae      	CP   R26,R30
0005d6 07bf      	CPC  R27,R31
0005d7 f050      	BRLO _0x206005C
0005d8 5f2f      	SUBI R18,-LOW(1)
0005d9 85a8      	LDD  R26,Y+8
0005da 85b9      	LDD  R27,Y+8+1
0005db 85ea      	LDD  R30,Y+10
0005dc 85fb      	LDD  R31,Y+10+1
0005dd 1bea      	SUB  R30,R26
0005de 0bfb      	SBC  R31,R27
0005df 87ea      	STD  Y+10,R30
0005e0 87fb      	STD  Y+10+1,R31
0005e1 cfef      	RJMP _0x206005A
                 _0x206005C:
0005e2 332a      	CPI  R18,58
0005e3 f028      	BRLO _0x206005D
0005e4 ff03      	SBRS R16,3
0005e5 c002      	RJMP _0x206005E
0005e6 5f29      	SUBI R18,-LOW(7)
0005e7 c001      	RJMP _0x206005F
                 _0x206005E:
0005e8 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
0005e9 fd04      	SBRC R16,4
0005ea c01a      	RJMP _0x2060061
0005eb 3321      	CPI  R18,49
0005ec f420      	BRSH _0x2060063
0005ed 85a8      	LDD  R26,Y+8
0005ee 85b9      	LDD  R27,Y+8+1
0005ef 9711      	SBIW R26,1
0005f0 f409      	BRNE _0x2060062
                 _0x2060063:
0005f1 c009      	RJMP _0x20600CD
                 _0x2060062:
0005f2 1753      	CP   R21,R19
0005f3 f010      	BRLO _0x2060067
0005f4 ff00      	SBRS R16,0
0005f5 c001      	RJMP _0x2060068
                 _0x2060067:
0005f6 c013      	RJMP _0x2060066
                 _0x2060068:
0005f7 e220      	LDI  R18,LOW(32)
0005f8 ff07      	SBRS R16,7
0005f9 c00b      	RJMP _0x2060069
0005fa e320      	LDI  R18,LOW(48)
                 _0x20600CD:
0005fb 6100      	ORI  R16,LOW(16)
0005fc ff02      	SBRS R16,2
0005fd c007      	RJMP _0x206006A
0005fe 7f0b      	ANDI R16,LOW(251)
0005ff 934a      	ST   -Y,R20
000600 940e 06e6 	CALL SUBOPT_0x10
000602 3050      	CPI  R21,0
000603 f009      	BREQ _0x206006B
000604 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000605 940e 06d9 	CALL SUBOPT_0xE
000607 3050      	CPI  R21,0
000608 f009      	BREQ _0x206006C
000609 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
00060a 5031      	SUBI R19,LOW(1)
00060b 85a8      	LDD  R26,Y+8
00060c 85b9      	LDD  R27,Y+8+1
00060d 9712      	SBIW R26,2
00060e f008      	BRLO _0x2060059
00060f cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000610 ff00      	SBRS R16,0
000611 c008      	RJMP _0x206006D
                 _0x206006E:
000612 3050      	CPI  R21,0
000613 f031      	BREQ _0x2060070
000614 5051      	SUBI R21,LOW(1)
000615 e2e0      	LDI  R30,LOW(32)
000616 93ea      	ST   -Y,R30
000617 940e 06e6 	CALL SUBOPT_0x10
000619 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
00061a e010      	LDI  R17,LOW(0)
                 _0x206001B:
00061b cee0      	RJMP _0x2060016
                 _0x2060018:
00061c 85ac      	LDD  R26,Y+12
00061d 85bd      	LDD  R27,Y+12+1
00061e 940e 07ab 	CALL __GETW1P
000620 940e 07bf 	CALL __LOADLOCR6
000622 9664      	ADIW R28,20
000623 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000624 92ff      	PUSH R15
000625 2ef8      	MOV  R15,R24
000626 9726      	SBIW R28,6
000627 940e 07ba 	CALL __SAVELOCR4
000629 940e 06fe 	CALL SUBOPT_0x13
00062b 9730      	SBIW R30,0
00062c f419      	BRNE _0x2060072
00062d efef      	LDI  R30,LOW(65535)
00062e efff      	LDI  R31,HIGH(65535)
00062f c023      	RJMP _0x20C0001
                 _0x2060072:
000630 01de      	MOVW R26,R28
000631 9616      	ADIW R26,6
000632 940e 0755 	CALL __ADDW2R15
000634 018d      	MOVW R16,R26
000635 940e 06fe 	CALL SUBOPT_0x13
000637 83ee      	STD  Y+6,R30
000638 83ff      	STD  Y+6+1,R31
000639 e0e0      	LDI  R30,LOW(0)
00063a 87e8      	STD  Y+8,R30
00063b 87e9      	STD  Y+8+1,R30
00063c 01de      	MOVW R26,R28
00063d 961a      	ADIW R26,10
00063e 940e 0755 	CALL __ADDW2R15
000640 940e 07ab 	CALL __GETW1P
000642 93fa      	ST   -Y,R31
000643 93ea      	ST   -Y,R30
000644 931a      	ST   -Y,R17
000645 930a      	ST   -Y,R16
000646 ebe0      	LDI  R30,LOW(_put_buff_G103)
000647 e0f4      	LDI  R31,HIGH(_put_buff_G103)
000648 93fa      	ST   -Y,R31
000649 93ea      	ST   -Y,R30
00064a 01de      	MOVW R26,R28
00064b 961a      	ADIW R26,10
00064c dea3      	RCALL __print_G103
00064d 019f      	MOVW R18,R30
00064e 81ae      	LDD  R26,Y+6
00064f 81bf      	LDD  R27,Y+6+1
000650 e0e0      	LDI  R30,LOW(0)
000651 93ec      	ST   X,R30
000652 01f9      	MOVW R30,R18
                 _0x20C0001:
000653 940e 07c1 	CALL __LOADLOCR4
000655 962a      	ADIW R28,10
000656 90ff      	POP  R15
000657 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000658 93ba      	ST   -Y,R27
000659 93aa      	ST   -Y,R26
00065a 91a9          ld   r26,y+
00065b 91b9          ld   r27,y+
00065c 27ee          clr  r30
00065d 27ff          clr  r31
                 strlen0:
00065e 916d          ld   r22,x+
00065f 2366          tst  r22
000660 f011          breq strlen1
000661 9631          adiw r30,1
000662 cffb          rjmp strlen0
                 strlen1:
000663 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000664 93ba      	ST   -Y,R27
000665 93aa      	ST   -Y,R26
000666 27aa          clr  r26
000667 27bb          clr  r27
000668 91e9          ld   r30,y+
000669 91f9          ld   r31,y+
                 strlenf0:
00066a 9005      	lpm  r0,z+
00066b 2000          tst  r0
00066c f011          breq strlenf1
00066d 9611          adiw r26,1
00066e cffb          rjmp strlenf0
                 strlenf1:
00066f 01fd          movw r30,r26
000670 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _rx_buffer:
00030c           	.BYTE 0x8
                 _tx_buffer:
000314           	.BYTE 0x8
                 __seed_G101:
00031c           	.BYTE 0x4
                 __base_y_G102:
000320           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000671 01fe      	MOVW R30,R28
000672 9634      	ADIW R30,4
000673 93fa      	ST   -Y,R31
000674 93ea      	ST   -Y,R30
000675 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
000676 93fa      	ST   -Y,R31
000677 93ea      	ST   -Y,R30
000678 01f9      	MOVW R30,R18
000679 940e 0765 	CALL __CWD1
00067b 940e 07b3 	CALL __PUTPARD1
00067d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2:
00067e 01f9      	MOVW R30,R18
00067f e0aa      	LDI  R26,LOW(10)
000680 e0b0      	LDI  R27,HIGH(10)
000681 940e 0772 	CALL __MULW12
000683 940e 0765 	CALL __CWD1
000685 940e 07b3 	CALL __PUTPARD1
000687 e088      	LDI  R24,8
000688 940e 0624 	CALL _sprintf
00068a 962c      	ADIW R28,12
00068b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
00068c 940e 04a2 	CALL _puts
00068e 940c 0443 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000690 e084      	LDI  R24,4
000691 940e 0624 	CALL _sprintf
000693 9628      	ADIW R28,8
000694 01de      	MOVW R26,R28
000695 9614      	ADIW R26,4
000696 940e 0464 	CALL _lcd_puts
000698 cfd8      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000699 93fa      	ST   -Y,R31
00069a 93ea      	ST   -Y,R30
00069b 2fe1      	MOV  R30,R17
00069c 27ff      	CLR  R31
00069d 2766      	CLR  R22
00069e 2777      	CLR  R23
00069f 940e 07b3 	CALL __PUTPARD1
0006a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0006a2 93ea      	ST   -Y,R30
0006a3 e0a1      	LDI  R26,LOW(1)
0006a4 940c 0436 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0006a6 940e 0212 	CALL _getchar_nv
0006a8 2f1e      	MOV  R17,R30
0006a9 2fa1      	MOV  R26,R17
0006aa 940c 049b 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:47 WORDS
                 SUBOPT_0x8:
0006ac 81ee      	LDD  R30,Y+6
0006ad 81ff      	LDD  R31,Y+6+1
0006ae 01de      	MOVW R26,R28
0006af 9618      	ADIW R26,8
0006b0 0fae      	ADD  R26,R30
0006b1 1fbf      	ADC  R27,R31
0006b2 91ac      	LD   R26,X
0006b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x9:
0006b4 940e 04a2 	CALL _puts
0006b6 01de      	MOVW R26,R28
0006b7 9618      	ADIW R26,8
0006b8 940e 04a2 	CALL _puts
0006ba e0ad      	LDI  R26,LOW(13)
0006bb 940c 049b 	JMP  _putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0006bd 01de      	MOVW R26,R28
0006be 9618      	ADIW R26,8
0006bf 940e 0464 	CALL _lcd_puts
0006c1 e0e0      	LDI  R30,LOW(0)
0006c2 cfdf      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0006c3 940e 042a 	CALL __lcd_write_data
0006c5 e0a3      	LDI  R26,LOW(3)
0006c6 e0b0      	LDI  R27,0
0006c7 940c 0705 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0006c9 81a9      	LDD  R26,Y+1
0006ca 81ba      	LDD  R27,Y+1+1
0006cb 91ed      	LD   R30,X+
0006cc 83a9      	STD  Y+1,R26
0006cd 83ba      	STD  Y+1+1,R27
0006ce 2f1e      	MOV  R17,R30
0006cf 30e0      	CPI  R30,0
0006d0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
0006d1 e3a0      	LDI  R26,LOW(48)
0006d2 940e 0415 	CALL __lcd_write_nibble_G102
                +
0006d4 ec88     +LDI R24 , LOW ( 200 )
0006d5 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006d6 9701     +SBIW R24 , 1
0006d7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xE:
0006d9 932a      	ST   -Y,R18
0006da 85ad      	LDD  R26,Y+13
0006db 85be      	LDD  R27,Y+13+1
0006dc 85ef      	LDD  R30,Y+15
0006dd 89f8      	LDD  R31,Y+15+1
0006de 9509      	ICALL
0006df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xF:
0006e0 89e8      	LDD  R30,Y+16
0006e1 89f9      	LDD  R31,Y+16+1
0006e2 9734      	SBIW R30,4
0006e3 8be8      	STD  Y+16,R30
0006e4 8bf9      	STD  Y+16+1,R31
0006e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0006e6 85ad      	LDD  R26,Y+13
0006e7 85be      	LDD  R27,Y+13+1
0006e8 85ef      	LDD  R30,Y+15
0006e9 89f8      	LDD  R31,Y+15+1
0006ea 9509      	ICALL
0006eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
0006ec 89a8      	LDD  R26,Y+16
0006ed 89b9      	LDD  R27,Y+16+1
0006ee 9614      	ADIW R26,4
0006ef 940e 07ab 	CALL __GETW1P
0006f1 83ee      	STD  Y+6,R30
0006f2 83ff      	STD  Y+6+1,R31
0006f3 81ae      	LDD  R26,Y+6
0006f4 81bf      	LDD  R27,Y+6+1
0006f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
0006f6 89a8      	LDD  R26,Y+16
0006f7 89b9      	LDD  R27,Y+16+1
0006f8 9614      	ADIW R26,4
0006f9 940e 07ab 	CALL __GETW1P
0006fb 87ea      	STD  Y+10,R30
0006fc 87fb      	STD  Y+10+1,R31
0006fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0006fe 01de      	MOVW R26,R28
0006ff 961c      	ADIW R26,12
000700 940e 0755 	CALL __ADDW2R15
000702 940e 07ab 	CALL __GETW1P
000704 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000705 9610      	adiw r26,0
000706 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000707 ed80     +LDI R24 , LOW ( 0x7D0 )
000708 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000709 9701     +SBIW R24 , 1
00070a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00070b 95a8      	wdr
00070c 9711      	sbiw r26,1
00070d f7c9      	brne __delay_ms0
                 __delay_ms1:
00070e 9508      	ret
                 
                 __UNPACK1:
00070f e850      	LDI  R21,0x80
000710 2e07      	MOV  R0,R23
000711 2205      	AND  R0,R21
000712 0f66      	LSL  R22
000713 1f77      	ROL  R23
000714 2775      	EOR  R23,R21
000715 0f55      	LSL  R21
000716 9567      	ROR  R22
000717 9508      	RET
                 
                 __CFD1U:
000718 9468      	SET
000719 c001      	RJMP __CFD1U0
                 __CFD1:
00071a 94e8      	CLT
                 __CFD1U0:
00071b 935f      	PUSH R21
00071c dff2      	RCALL __UNPACK1
00071d 3870      	CPI  R23,0x80
00071e f018      	BRLO __CFD10
00071f 3f7f      	CPI  R23,0xFF
000720 f408      	BRCC __CFD10
000721 c02d      	RJMP __ZERORES
                 __CFD10:
000722 e156      	LDI  R21,22
000723 1b57      	SUB  R21,R23
000724 f4aa      	BRPL __CFD11
000725 9551      	NEG  R21
000726 3058      	CPI  R21,8
000727 f40e      	BRTC __CFD19
000728 3059      	CPI  R21,9
                 __CFD19:
000729 f030      	BRLO __CFD17
00072a efef      	SER  R30
00072b efff      	SER  R31
00072c ef6f      	SER  R22
00072d e77f      	LDI  R23,0x7F
00072e f977      	BLD  R23,7
00072f c01a      	RJMP __CFD15
                 __CFD17:
000730 2777      	CLR  R23
000731 2355      	TST  R21
000732 f0b9      	BREQ __CFD15
                 __CFD18:
000733 0fee      	LSL  R30
000734 1fff      	ROL  R31
000735 1f66      	ROL  R22
000736 1f77      	ROL  R23
000737 955a      	DEC  R21
000738 f7d1      	BRNE __CFD18
000739 c010      	RJMP __CFD15
                 __CFD11:
00073a 2777      	CLR  R23
                 __CFD12:
00073b 3058      	CPI  R21,8
00073c f028      	BRLO __CFD13
00073d 2fef      	MOV  R30,R31
00073e 2ff6      	MOV  R31,R22
00073f 2f67      	MOV  R22,R23
000740 5058      	SUBI R21,8
000741 cff9      	RJMP __CFD12
                 __CFD13:
000742 2355      	TST  R21
000743 f031      	BREQ __CFD15
                 __CFD14:
000744 9576      	LSR  R23
000745 9567      	ROR  R22
000746 95f7      	ROR  R31
000747 95e7      	ROR  R30
000748 955a      	DEC  R21
000749 f7d1      	BRNE __CFD14
                 __CFD15:
00074a 2000      	TST  R0
00074b f40a      	BRPL __CFD16
00074c d010      	RCALL __ANEGD1
                 __CFD16:
00074d 915f      	POP  R21
00074e 9508      	RET
                 
                 __ZERORES:
00074f 27ee      	CLR  R30
000750 27ff      	CLR  R31
000751 2766      	CLR  R22
000752 2777      	CLR  R23
000753 915f      	POP  R21
000754 9508      	RET
                 
                 __ADDW2R15:
000755 2400      	CLR  R0
000756 0daf      	ADD  R26,R15
000757 1db0      	ADC  R27,R0
000758 9508      	RET
                 
                 __ANEGW1:
000759 95f1      	NEG  R31
00075a 95e1      	NEG  R30
00075b 40f0      	SBCI R31,0
00075c 9508      	RET
                 
                 __ANEGD1:
00075d 95f0      	COM  R31
00075e 9560      	COM  R22
00075f 9570      	COM  R23
000760 95e1      	NEG  R30
000761 4fff      	SBCI R31,-1
000762 4f6f      	SBCI R22,-1
000763 4f7f      	SBCI R23,-1
000764 9508      	RET
                 
                 __CWD1:
000765 2f6f      	MOV  R22,R31
000766 0f66      	ADD  R22,R22
000767 0b66      	SBC  R22,R22
000768 2f76      	MOV  R23,R22
000769 9508      	RET
                 
                 __MULW12U:
00076a 9ffa      	MUL  R31,R26
00076b 2df0      	MOV  R31,R0
00076c 9feb      	MUL  R30,R27
00076d 0df0      	ADD  R31,R0
00076e 9fea      	MUL  R30,R26
00076f 2de0      	MOV  R30,R0
000770 0df1      	ADD  R31,R1
000771 9508      	RET
                 
                 __MULW12:
000772 d02a      	RCALL __CHKSIGNW
000773 dff6      	RCALL __MULW12U
000774 f40e      	BRTC __MULW121
000775 dfe3      	RCALL __ANEGW1
                 __MULW121:
000776 9508      	RET
                 
                 __DIVW21U:
000777 2400      	CLR  R0
000778 2411      	CLR  R1
000779 e190      	LDI  R25,16
                 __DIVW21U1:
00077a 0faa      	LSL  R26
00077b 1fbb      	ROL  R27
00077c 1c00      	ROL  R0
00077d 1c11      	ROL  R1
00077e 1a0e      	SUB  R0,R30
00077f 0a1f      	SBC  R1,R31
000780 f418      	BRCC __DIVW21U2
000781 0e0e      	ADD  R0,R30
000782 1e1f      	ADC  R1,R31
000783 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000784 60a1      	SBR  R26,1
                 __DIVW21U3:
000785 959a      	DEC  R25
000786 f799      	BRNE __DIVW21U1
000787 01fd      	MOVW R30,R26
000788 01d0      	MOVW R26,R0
000789 9508      	RET
                 
                 __DIVW21:
00078a d012      	RCALL __CHKSIGNW
00078b dfeb      	RCALL __DIVW21U
00078c f40e      	BRTC __DIVW211
00078d dfcb      	RCALL __ANEGW1
                 __DIVW211:
00078e 9508      	RET
                 
                 __MODW21:
00078f 94e8      	CLT
000790 ffb7      	SBRS R27,7
000791 c004      	RJMP __MODW211
000792 95a0      	COM  R26
000793 95b0      	COM  R27
000794 9611      	ADIW R26,1
000795 9468      	SET
                 __MODW211:
000796 fdf7      	SBRC R31,7
000797 dfc1      	RCALL __ANEGW1
000798 dfde      	RCALL __DIVW21U
000799 01fd      	MOVW R30,R26
00079a f40e      	BRTC __MODW212
00079b dfbd      	RCALL __ANEGW1
                 __MODW212:
00079c 9508      	RET
                 
                 __CHKSIGNW:
00079d 94e8      	CLT
00079e fff7      	SBRS R31,7
00079f c002      	RJMP __CHKSW1
0007a0 dfb8      	RCALL __ANEGW1
0007a1 9468      	SET
                 __CHKSW1:
0007a2 ffb7      	SBRS R27,7
0007a3 c006      	RJMP __CHKSW2
0007a4 95a0      	COM  R26
0007a5 95b0      	COM  R27
0007a6 9611      	ADIW R26,1
0007a7 f800      	BLD  R0,0
0007a8 9403      	INC  R0
0007a9 fa00      	BST  R0,0
                 __CHKSW2:
0007aa 9508      	RET
                 
                 __GETW1P:
0007ab 91ed      	LD   R30,X+
0007ac 91fc      	LD   R31,X
0007ad 9711      	SBIW R26,1
0007ae 9508      	RET
                 
                 __GETW1PF:
0007af 9005      	LPM  R0,Z+
0007b0 91f4      	LPM  R31,Z
0007b1 2de0      	MOV  R30,R0
0007b2 9508      	RET
                 
                 __PUTPARD1:
0007b3 937a      	ST   -Y,R23
0007b4 936a      	ST   -Y,R22
0007b5 93fa      	ST   -Y,R31
0007b6 93ea      	ST   -Y,R30
0007b7 9508      	RET
                 
                 __SAVELOCR6:
0007b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0007b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0007ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0007bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0007bc 931a      	ST   -Y,R17
0007bd 930a      	ST   -Y,R16
0007be 9508      	RET
                 
                 __LOADLOCR6:
0007bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0007c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0007c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0007c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0007c3 8119      	LDD  R17,Y+1
0007c4 8108      	LD   R16,Y
0007c5 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0007c6 0fac      	ADD  R26,R28
0007c7 1fbd      	ADC  R27,R29
                 __INITLOC0:
0007c8 9005      	LPM  R0,Z+
0007c9 920d      	ST   X+,R0
0007ca 958a      	DEC  R24
0007cb f7e1      	BRNE __INITLOC0
0007cc 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  29 r1 :   6 r2 :   1 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   5 
r8 :   2 r9 :   4 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   4 
r16:  46 r17:  62 r18:  48 r19:  24 r20:  13 r21:  38 r22:  24 r23:  21 
r24:  29 r25:   7 r26: 178 r27:  74 r28:  35 r29:   2 r30: 279 r31: 106 
x  :  25 y  : 212 z  :  20 
Registers used: 31 out of 35 (88.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :  10 
adiw  :  43 and   :   1 andi  :   7 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  34 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   0 brmi  :   1 brne  :  54 brpl  :   3 brsh  :   2 brtc  :   4 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 138 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  22 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   7 
cp    :   9 cpc   :   5 cpi   :  65 cpse  :   0 dec   :  11 des   :   0 
eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   7 jmp   :  28 ld    :  35 ldd   :  83 ldi   : 229 
lds   :   0 lpm   :  15 lsl   :   4 lsr   :   1 mov   :  39 movw  :  33 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   7 out   :  50 pop   :   3 push  :   2 rcall :  32 ret   :  46 
reti  :   1 rjmp  :  94 rol   :   7 ror   :   4 sbc   :   3 sbci  :   9 
sbi   :   5 sbic  :   0 sbis  :   1 sbiw  :  23 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   3 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  84 std   :  42 sts   :   2 sub   :   3 subi  :  21 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 71 out of 116 (61.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f9a   3170    824   3994   16384  24.4%
[.dseg] 0x000060 0x000324      0    452    452    1024  44.1%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings


AVRASM ver. 2.1.30  C:\Users\mykar\Downloads\IUT\Micro lab\1\code\Debug\List\main.asm Wed Mar 01 12:36:08 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x9:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0xD:
00002f 063f
000030 4f5b
000031 6d66
000032 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000033 6f7f      	.DB  0x7F,0x6F
                 _0x14:
000034 063f
000035 4f5b
000036 6d66
000037 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000038 6f7f      	.DB  0x7F,0x6F
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004d bfed      	OUT  SPL,R30
00004e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00004f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000050 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000051 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000052 940c 012c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;void function1(void){
                 ; 0000 0006 void function1(void){
                 
                 	.CSEG
                 _function1:
                 ; .FSTART _function1
                 ; 0000 0007     int i = 0;
                 ; 0000 0008     for(i=0;i<4;i++){
000054 931a      	ST   -Y,R17
000055 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000056 e000     +LDI R16 , LOW ( 0 )
000057 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000058 e000     +LDI R16 , LOW ( 0 )
000059 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x4:
                +
00005a 3004     +CPI R16 , LOW ( 4 )
00005b e0e0     +LDI R30 , HIGH ( 4 )
00005c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00005d f47c      	BRGE _0x5
                 ; 0000 0009         PORTB = 0xFF;
00005e efef      	LDI  R30,LOW(255)
00005f bbe8      	OUT  0x18,R30
                 ; 0000 000A         delay_ms(500);
000060 efa4      	LDI  R26,LOW(500)
000061 e0b1      	LDI  R27,HIGH(500)
000062 940e 01bd 	CALL _delay_ms
                 ; 0000 000B         PORTB = 0x00;
000064 e0e0      	LDI  R30,LOW(0)
000065 bbe8      	OUT  0x18,R30
                 ; 0000 000C         delay_ms(500);
000066 efa4      	LDI  R26,LOW(500)
000067 e0b1      	LDI  R27,HIGH(500)
000068 940e 01bd 	CALL _delay_ms
                 ; 0000 000D     }
                +
00006a 5f0f     +SUBI R16 , LOW ( - 1 )
00006b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00006c cfed      	RJMP _0x4
                 _0x5:
                 ; 0000 000E }
00006d 9109      	LD   R16,Y+
00006e 9119      	LD   R17,Y+
00006f 9508      	RET
                 ; .FEND
                 ;
                 ;void function2(void){
                 ; 0000 0010 void function2(void){
                 _function2:
                 ; .FSTART _function2
                 ; 0000 0011 
                 ; 0000 0012         int i = 4,k=0;
                 ; 0000 0013         PORTB = 1<<i;
000070 940e 021e 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	k -> R18,R19
                +
000072 e004     +LDI R16 , LOW ( 4 )
000073 e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                +
000074 e020     +LDI R18 , LOW ( 0 )
000075 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000076 2fe0      	MOV  R30,R16
000077 e0a1      	LDI  R26,LOW(1)
000078 940e 01cb 	CALL __LSLB12
00007a bbe8      	OUT  0x18,R30
                 ; 0000 0014         delay_ms(1000);
00007b eea8      	LDI  R26,LOW(1000)
00007c e0b3      	LDI  R27,HIGH(1000)
00007d 940e 01bd 	CALL _delay_ms
                 ; 0000 0015         for(k=0;k<9;k++){
                +
00007f e020     +LDI R18 , LOW ( 0 )
000080 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7:
                +
000081 3029     +CPI R18 , LOW ( 9 )
000082 e0e0     +LDI R30 , HIGH ( 9 )
000083 073e     +CPC R19 , R30
                 	__CPWRN 18,19,9
000084 f494      	BRGE _0x8
                 ; 0000 0016         PORTB = 1 << (i+k)%8;
000085 01f9      	MOVW R30,R18
000086 0fe0      	ADD  R30,R16
000087 1ff1      	ADC  R31,R17
000088 e0a7      	LDI  R26,LOW(7)
000089 e0b0      	LDI  R27,HIGH(7)
00008a 940e 0206 	CALL __MANDW12
00008c e0a1      	LDI  R26,LOW(1)
00008d 940e 01cb 	CALL __LSLB12
00008f bbe8      	OUT  0x18,R30
                 ; 0000 0017         delay_ms(375);     //375*8 = 3000
000090 e7a7      	LDI  R26,LOW(375)
000091 e0b1      	LDI  R27,HIGH(375)
000092 940e 01bd 	CALL _delay_ms
                 ; 0000 0018         }
                +
000094 5f2f     +SUBI R18 , LOW ( - 1 )
000095 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000096 cfea      	RJMP _0x7
                 _0x8:
                 ; 0000 0019 }
000097 940e 0223 	CALL __LOADLOCR4
000099 9624      	ADIW R28,4
00009a 9508      	RET
                 ; .FEND
                 ;
                 ;void function3(void){
                 ; 0000 001B void function3(void){
                 _function3:
                 ; .FSTART _function3
                 ; 0000 001C  unsigned char temp = PINA;
                 ; 0000 001D  delay_ms(5);
00009b 931a      	ST   -Y,R17
                 ;	temp -> R17
00009c b319      	IN   R17,25
00009d d0a5      	RCALL SUBOPT_0x0
                 ; 0000 001E  PORTB = PINA;
00009e b3e9      	IN   R30,0x19
00009f bbe8      	OUT  0x18,R30
                 ; 0000 001F }
0000a0 9119      	LD   R17,Y+
0000a1 9508      	RET
                 ; .FEND
                 ;
                 ;void function4(void){
                 ; 0000 0021 void function4(void){
                 _function4:
                 ; .FSTART _function4
                 ; 0000 0022  unsigned char digit[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};
                 ; 0000 0023  int i=0;
                 ; 0000 0024  PORTD = PORTD & 0xF0;
0000a2 d0a4      	RCALL SUBOPT_0x1
0000a3 e5e4      	LDI  R30,LOW(_0x9*2)
0000a4 e0f0      	LDI  R31,HIGH(_0x9*2)
0000a5 940e 0228 	CALL __INITLOCB
0000a7 931a      	ST   -Y,R17
0000a8 930a      	ST   -Y,R16
                 ;	digit -> Y+2
                 ;	i -> R16,R17
                +
0000a9 e000     +LDI R16 , LOW ( 0 )
0000aa e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000ab b3e2      	IN   R30,0x12
0000ac 7fe0      	ANDI R30,LOW(0xF0)
0000ad bbe2      	OUT  0x12,R30
                 ; 0000 0025  for(i=9;i>=0;i--){
                +
0000ae e009     +LDI R16 , LOW ( 9 )
0000af e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 _0xB:
0000b0 2311      	TST  R17
0000b1 f06a      	BRMI _0xC
                 ; 0000 0026   PORTC = digit[i];
0000b2 01de      	MOVW R26,R28
0000b3 9612      	ADIW R26,2
0000b4 0fa0      	ADD  R26,R16
0000b5 1fb1      	ADC  R27,R17
0000b6 91ec      	LD   R30,X
0000b7 bbe5      	OUT  0x15,R30
                 ; 0000 0027   delay_ms(400);
0000b8 e9a0      	LDI  R26,LOW(400)
0000b9 e0b1      	LDI  R27,HIGH(400)
0000ba 940e 01bd 	CALL _delay_ms
                 ; 0000 0028  }
                +
0000bc 5001     +SUBI R16 , LOW ( 1 )
0000bd 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
0000be cff1      	RJMP _0xB
                 _0xC:
                 ; 0000 0029 }
0000bf 8119      	LDD  R17,Y+1
0000c0 8108      	LDD  R16,Y+0
0000c1 962c      	ADIW R28,12
0000c2 9508      	RET
                 ; .FEND
                 ;
                 ;void function5(void){
                 ; 0000 002B void function5(void){
                 _function5:
                 ; .FSTART _function5
                 ; 0000 002C  int temp = PINA;
                 ; 0000 002D   int i=0;
                 ; 0000 002E  unsigned char digit[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};
                 ; 0000 002F  delay_ms(5);
0000c3 d083      	RCALL SUBOPT_0x1
0000c4 e5ee      	LDI  R30,LOW(_0xD*2)
0000c5 e0f0      	LDI  R31,HIGH(_0xD*2)
0000c6 940e 0228 	CALL __INITLOCB
0000c8 d083      	RCALL SUBOPT_0x2
                 ;	temp -> R16,R17
                 ;	i -> R18,R19
                 ;	digit -> Y+4
                 ; 0000 0030  temp *= 10;
0000c9 d08a      	RCALL SUBOPT_0x3
                 ; 0000 0031   while(temp>=0){
                 _0xE:
0000ca 2311      	TST  R17
0000cb f082      	BRMI _0x10
                 ; 0000 0032  for(i=0;i<5;i++)    // 10 * (5+5+5+5) = 10*20 = 200
                +
0000cc e020     +LDI R18 , LOW ( 0 )
0000cd e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x12:
                +
0000ce 3025     +CPI R18 , LOW ( 5 )
0000cf e0e0     +LDI R30 , HIGH ( 5 )
0000d0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0000d1 f43c      	BRGE _0x13
                 ; 0000 0033  {
                 ; 0000 0034  int a = temp/1000;
                 ; 0000 0035  int b = (temp%1000)/100;
                 ; 0000 0036  int c = (temp%100)/10;
                 ; 0000 0037  int d = temp%10;
                 ; 0000 0038  PORTD = 0b11111110;
0000d2 d088      	RCALL SUBOPT_0x4
                 ;	digit -> Y+12
                 ;	a -> Y+6
                 ;	b -> Y+4
                 ;	c -> Y+2
                 ;	d -> Y+0
                 ; 0000 0039  PORTC = digit[a];
                 ; 0000 003A  delay_ms(10);
                 ; 0000 003B  PORTD = 0b11111101;
                 ; 0000 003C  PORTC = digit[b];
                 ; 0000 003D  delay_ms(10);
                 ; 0000 003E  PORTD = 0b11111011;
                 ; 0000 003F  PORTC = digit[c]|1<<7;
0000d3 d0d5      	RCALL SUBOPT_0x5
                 ; 0000 0040  delay_ms(10);
                 ; 0000 0041  PORTD = 0b11110111;
0000d4 d0d9      	RCALL SUBOPT_0x6
                 ; 0000 0042  PORTC = digit[d];
                 ; 0000 0043  delay_ms(10);
                 ; 0000 0044 }
0000d5 9628      	ADIW R28,8
                +
0000d6 5f2f     +SUBI R18 , LOW ( - 1 )
0000d7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000d8 cff5      	RJMP _0x12
                 _0x13:
                 ; 0000 0045  temp -= 2;
                +
0000d9 5002     +SUBI R16 , LOW ( 2 )
0000da 4010     +SBCI R17 , HIGH ( 2 )
                 	__SUBWRN 16,17,2
                 ; 0000 0046 }
0000db cfee      	RJMP _0xE
                 _0x10:
                 ; 0000 0047 }
0000dc c04b      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void function6(void){
                 ; 0000 0049 void function6(void){
                 _function6:
                 ; .FSTART _function6
                 ; 0000 004A  int temp = PINA;
                 ; 0000 004B   int i=0;
                 ; 0000 004C  unsigned char digit[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};
                 ; 0000 004D  delay_ms(5);
0000dd d069      	RCALL SUBOPT_0x1
0000de e6e8      	LDI  R30,LOW(_0x14*2)
0000df e0f0      	LDI  R31,HIGH(_0x14*2)
0000e0 940e 0228 	CALL __INITLOCB
0000e2 d069      	RCALL SUBOPT_0x2
                 ;	temp -> R16,R17
                 ;	i -> R18,R19
                 ;	digit -> Y+4
                 ; 0000 004E  temp *= 10;
0000e3 d070      	RCALL SUBOPT_0x3
                 ; 0000 004F   while(temp>=0){
                 _0x15:
0000e4 2311      	TST  R17
0000e5 f40a      	BRPL PC+2
0000e6 c041      	RJMP _0x17
                 ; 0000 0050   if(PIND.4==0)   {
0000e7 9984      	SBIC 0x10,4
0000e8 c007      	RJMP _0x18
                 ; 0000 0051    temp -= (temp%10);
0000e9 01d8      	MOVW R26,R16
0000ea e0ea      	LDI  R30,LOW(10)
0000eb e0f0      	LDI  R31,HIGH(10)
0000ec 940e 01f8 	CALL __MODW21
                +
0000ee 1b0e     +SUB R16 , R30
0000ef 0b1f     +SBC R17 , R31
                 	__SUBWRR 16,17,30,31
                 ; 0000 0052   }
                 ; 0000 0053   if(PIND.5==0)   {
                 _0x18:
0000f0 9985      	SBIC 0x10,5
0000f1 c00d      	RJMP _0x19
                 ; 0000 0054    temp -= (int)((temp%100)/10)*10;
0000f2 01d8      	MOVW R26,R16
0000f3 e6e4      	LDI  R30,LOW(100)
0000f4 e0f0      	LDI  R31,HIGH(100)
0000f5 940e 01f8 	CALL __MODW21
0000f7 01df      	MOVW R26,R30
0000f8 e0ea      	LDI  R30,LOW(10)
0000f9 e0f0      	LDI  R31,HIGH(10)
0000fa 940e 01f3 	CALL __DIVW21
0000fc e0aa      	LDI  R26,LOW(10)
0000fd e0b0      	LDI  R27,HIGH(10)
0000fe d0b9      	RCALL SUBOPT_0x7
                 ; 0000 0055   }
                 ; 0000 0056   if(PIND.6==0)   {
                 _0x19:
0000ff 9986      	SBIC 0x10,6
000100 c00d      	RJMP _0x1A
                 ; 0000 0057    temp -= (int)((temp%1000)/100)*100;
000101 01d8      	MOVW R26,R16
000102 eee8      	LDI  R30,LOW(1000)
000103 e0f3      	LDI  R31,HIGH(1000)
000104 940e 01f8 	CALL __MODW21
000106 01df      	MOVW R26,R30
000107 e6e4      	LDI  R30,LOW(100)
000108 e0f0      	LDI  R31,HIGH(100)
000109 940e 01f3 	CALL __DIVW21
00010b e6a4      	LDI  R26,LOW(100)
00010c e0b0      	LDI  R27,HIGH(100)
00010d d0aa      	RCALL SUBOPT_0x7
                 ; 0000 0058   }
                 ; 0000 0059   if(PIND.7==0)   {
                 _0x1A:
00010e 9987      	SBIC 0x10,7
00010f c008      	RJMP _0x1B
                 ; 0000 005A    temp -= (int)(temp/1000)*1000;
000110 01d8      	MOVW R26,R16
000111 eee8      	LDI  R30,LOW(1000)
000112 e0f3      	LDI  R31,HIGH(1000)
000113 940e 01f3 	CALL __DIVW21
000115 eea8      	LDI  R26,LOW(1000)
000116 e0b3      	LDI  R27,HIGH(1000)
000117 d0a0      	RCALL SUBOPT_0x7
                 ; 0000 005B   }
                 ; 0000 005C  for(i=0;i<5;i++)    // 10 * (5+5+5+5) = 10*20 = 200
                 _0x1B:
                +
000118 e020     +LDI R18 , LOW ( 0 )
000119 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1D:
                +
00011a 3025     +CPI R18 , LOW ( 5 )
00011b e0e0     +LDI R30 , HIGH ( 5 )
00011c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
00011d f43c      	BRGE _0x1E
                 ; 0000 005D  {
                 ; 0000 005E  int a = temp/1000;
                 ; 0000 005F  int b = (temp%1000)/100;
                 ; 0000 0060  int c = (temp%100)/10;
                 ; 0000 0061  int d = temp%10;
                 ; 0000 0062  PORTD = 0b11111110;
00011e d03c      	RCALL SUBOPT_0x4
                 ;	digit -> Y+12
                 ;	a -> Y+6
                 ;	b -> Y+4
                 ;	c -> Y+2
                 ;	d -> Y+0
                 ; 0000 0063  PORTC = digit[a];
                 ; 0000 0064  delay_ms(10);
                 ; 0000 0065  PORTD = 0b11111101;
                 ; 0000 0066  PORTC = digit[b];
                 ; 0000 0067  delay_ms(10);
                 ; 0000 0068  PORTD = 0b11111011;
                 ; 0000 0069  PORTC = digit[c]|1<<7;
00011f d089      	RCALL SUBOPT_0x5
                 ; 0000 006A  delay_ms(10);
                 ; 0000 006B  PORTD = 0b11110111;
000120 d08d      	RCALL SUBOPT_0x6
                 ; 0000 006C  PORTC = digit[d];
                 ; 0000 006D  delay_ms(10);
                 ; 0000 006E }
000121 9628      	ADIW R28,8
                +
000122 5f2f     +SUBI R18 , LOW ( - 1 )
000123 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000124 cff5      	RJMP _0x1D
                 _0x1E:
                 ; 0000 006F  temp -= 2;
                +
000125 5002     +SUBI R16 , LOW ( 2 )
000126 4010     +SBCI R17 , HIGH ( 2 )
                 	__SUBWRN 16,17,2
                 ; 0000 0070 }
000127 cfbc      	RJMP _0x15
                 _0x17:
                 ; 0000 0071 }
                 _0x2000001:
000128 940e 0223 	CALL __LOADLOCR4
00012a 962e      	ADIW R28,14
00012b 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0076 
                 ; 0000 0077 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00012c e0e0      	LDI  R30,LOW(0)
00012d bbea      	OUT  0x1A,R30
                 ; 0000 0078 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00012e bbeb      	OUT  0x1B,R30
                 ; 0000 0079 
                 ; 0000 007A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00012f efef      	LDI  R30,LOW(255)
000130 bbe7      	OUT  0x17,R30
                 ; 0000 007B PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000131 e0e0      	LDI  R30,LOW(0)
000132 bbe8      	OUT  0x18,R30
                 ; 0000 007C 
                 ; 0000 007D DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000133 efef      	LDI  R30,LOW(255)
000134 bbe4      	OUT  0x14,R30
                 ; 0000 007E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000135 e0e0      	LDI  R30,LOW(0)
000136 bbe5      	OUT  0x15,R30
                 ; 0000 007F 
                 ; 0000 0080 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000137 e0ef      	LDI  R30,LOW(15)
000138 bbe1      	OUT  0x11,R30
                 ; 0000 0081 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000139 e0e0      	LDI  R30,LOW(0)
00013a bbe2      	OUT  0x12,R30
                 ; 0000 0082 
                 ; 0000 0083 
                 ; 0000 0084 while (1)
                 _0x1F:
                 ; 0000 0085 
                 ; 0000 0086       {
                 ; 0000 0087        function1();
00013b df18      	RCALL _function1
                 ; 0000 0088        function2();
00013c df33      	RCALL _function2
                 ; 0000 0089        function3();
00013d df5d      	RCALL _function3
                 ; 0000 008A        function4();
00013e df63      	RCALL _function4
                 ; 0000 008B        function5();
00013f df83      	RCALL _function5
                 ; 0000 008C        function6();
000140 df9c      	RCALL _function6
                 ; 0000 008D       }
000141 cff9      	RJMP _0x1F
                 ; 0000 008E }
                 _0x22:
000142 cfff      	RJMP _0x22
                 ; .FEND
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000143 e0a5      	LDI  R26,LOW(5)
000144 e0b0      	LDI  R27,0
000145 940c 01bd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000147 972a      	SBIW R28,10
000148 e08a      	LDI  R24,10
000149 e0a0      	LDI  R26,LOW(0)
00014a e0b0      	LDI  R27,HIGH(0)
00014b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
00014c 940e 021e 	CALL __SAVELOCR4
00014e b3e9      	IN   R30,0x19
00014f e0f0      	LDI  R31,0
000150 018f      	MOVW R16,R30
                +
000151 e020     +LDI R18 , LOW ( 0 )
000152 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000153 cfef      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000154 01f8      	MOVW R30,R16
000155 e0aa      	LDI  R26,LOW(10)
000156 e0b0      	LDI  R27,HIGH(10)
000157 940e 01db 	CALL __MULW12
000159 018f      	MOVW R16,R30
00015a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:72 WORDS
                 SUBOPT_0x4:
00015b 9728      	SBIW R28,8
00015c 01d8      	MOVW R26,R16
00015d eee8      	LDI  R30,LOW(1000)
00015e e0f3      	LDI  R31,HIGH(1000)
00015f 940e 01f3 	CALL __DIVW21
000161 83ee      	STD  Y+6,R30
000162 83ff      	STD  Y+6+1,R31
000163 01d8      	MOVW R26,R16
000164 eee8      	LDI  R30,LOW(1000)
000165 e0f3      	LDI  R31,HIGH(1000)
000166 940e 01f8 	CALL __MODW21
000168 01df      	MOVW R26,R30
000169 e6e4      	LDI  R30,LOW(100)
00016a e0f0      	LDI  R31,HIGH(100)
00016b 940e 01f3 	CALL __DIVW21
00016d 83ec      	STD  Y+4,R30
00016e 83fd      	STD  Y+4+1,R31
00016f 01d8      	MOVW R26,R16
000170 e6e4      	LDI  R30,LOW(100)
000171 e0f0      	LDI  R31,HIGH(100)
000172 940e 01f8 	CALL __MODW21
000174 01df      	MOVW R26,R30
000175 e0ea      	LDI  R30,LOW(10)
000176 e0f0      	LDI  R31,HIGH(10)
000177 940e 01f3 	CALL __DIVW21
000179 83ea      	STD  Y+2,R30
00017a 83fb      	STD  Y+2+1,R31
00017b 01d8      	MOVW R26,R16
00017c e0ea      	LDI  R30,LOW(10)
00017d e0f0      	LDI  R31,HIGH(10)
00017e 940e 01f8 	CALL __MODW21
000180 83e8      	ST   Y,R30
000181 83f9      	STD  Y+1,R31
000182 efee      	LDI  R30,LOW(254)
000183 bbe2      	OUT  0x12,R30
000184 81ee      	LDD  R30,Y+6
000185 81ff      	LDD  R31,Y+6+1
000186 01de      	MOVW R26,R28
000187 961c      	ADIW R26,12
000188 0fae      	ADD  R26,R30
000189 1fbf      	ADC  R27,R31
00018a 91ec      	LD   R30,X
00018b bbe5      	OUT  0x15,R30
00018c e0aa      	LDI  R26,LOW(10)
00018d e0b0      	LDI  R27,0
00018e 940e 01bd 	CALL _delay_ms
000190 efed      	LDI  R30,LOW(253)
000191 bbe2      	OUT  0x12,R30
000192 81ec      	LDD  R30,Y+4
000193 81fd      	LDD  R31,Y+4+1
000194 01de      	MOVW R26,R28
000195 961c      	ADIW R26,12
000196 0fae      	ADD  R26,R30
000197 1fbf      	ADC  R27,R31
000198 91ec      	LD   R30,X
000199 bbe5      	OUT  0x15,R30
00019a e0aa      	LDI  R26,LOW(10)
00019b e0b0      	LDI  R27,0
00019c 940e 01bd 	CALL _delay_ms
00019e efeb      	LDI  R30,LOW(251)
00019f bbe2      	OUT  0x12,R30
0001a0 81ea      	LDD  R30,Y+2
0001a1 81fb      	LDD  R31,Y+2+1
0001a2 01de      	MOVW R26,R28
0001a3 961c      	ADIW R26,12
0001a4 0fae      	ADD  R26,R30
0001a5 1fbf      	ADC  R27,R31
0001a6 91ec      	LD   R30,X
0001a7 68e0      	ORI  R30,0x80
0001a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
0001a9 bbe5      	OUT  0x15,R30
0001aa e0aa      	LDI  R26,LOW(10)
0001ab e0b0      	LDI  R27,0
0001ac 940c 01bd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0001ae efe7      	LDI  R30,LOW(247)
0001af bbe2      	OUT  0x12,R30
0001b0 81e8      	LD   R30,Y
0001b1 81f9      	LDD  R31,Y+1
0001b2 01de      	MOVW R26,R28
0001b3 961c      	ADIW R26,12
0001b4 0fae      	ADD  R26,R30
0001b5 1fbf      	ADC  R27,R31
0001b6 91ec      	LD   R30,X
0001b7 cff1      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0001b8 940e 01db 	CALL __MULW12
                +
0001ba 1b0e     +SUB R16 , R30
0001bb 0b1f     +SBC R17 , R31
                 	__SUBWRR 16,17,30,31
0001bc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001bd 9610      	adiw r26,0
0001be f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001bf ed80     +LDI R24 , LOW ( 0x7D0 )
0001c0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001c1 9701     +SBIW R24 , 1
0001c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001c3 95a8      	wdr
0001c4 9711      	sbiw r26,1
0001c5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c6 9508      	ret
                 
                 __ANEGW1:
0001c7 95f1      	NEG  R31
0001c8 95e1      	NEG  R30
0001c9 40f0      	SBCI R31,0
0001ca 9508      	RET
                 
                 __LSLB12:
0001cb 23ee      	TST  R30
0001cc 2e0e      	MOV  R0,R30
0001cd 2fea      	MOV  R30,R26
0001ce f019      	BREQ __LSLB12R
                 __LSLB12L:
0001cf 0fee      	LSL  R30
0001d0 940a      	DEC  R0
0001d1 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0001d2 9508      	RET
                 
                 __MULW12U:
0001d3 9ffa      	MUL  R31,R26
0001d4 2df0      	MOV  R31,R0
0001d5 9feb      	MUL  R30,R27
0001d6 0df0      	ADD  R31,R0
0001d7 9fea      	MUL  R30,R26
0001d8 2de0      	MOV  R30,R0
0001d9 0df1      	ADD  R31,R1
0001da 9508      	RET
                 
                 __MULW12:
0001db d034      	RCALL __CHKSIGNW
0001dc dff6      	RCALL __MULW12U
0001dd f40e      	BRTC __MULW121
0001de dfe8      	RCALL __ANEGW1
                 __MULW121:
0001df 9508      	RET
                 
                 __DIVW21U:
0001e0 2400      	CLR  R0
0001e1 2411      	CLR  R1
0001e2 e190      	LDI  R25,16
                 __DIVW21U1:
0001e3 0faa      	LSL  R26
0001e4 1fbb      	ROL  R27
0001e5 1c00      	ROL  R0
0001e6 1c11      	ROL  R1
0001e7 1a0e      	SUB  R0,R30
0001e8 0a1f      	SBC  R1,R31
0001e9 f418      	BRCC __DIVW21U2
0001ea 0e0e      	ADD  R0,R30
0001eb 1e1f      	ADC  R1,R31
0001ec c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ed 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ee 959a      	DEC  R25
0001ef f799      	BRNE __DIVW21U1
0001f0 01fd      	MOVW R30,R26
0001f1 01d0      	MOVW R26,R0
0001f2 9508      	RET
                 
                 __DIVW21:
0001f3 d01c      	RCALL __CHKSIGNW
0001f4 dfeb      	RCALL __DIVW21U
0001f5 f40e      	BRTC __DIVW211
0001f6 dfd0      	RCALL __ANEGW1
                 __DIVW211:
0001f7 9508      	RET
                 
                 __MODW21:
0001f8 94e8      	CLT
0001f9 ffb7      	SBRS R27,7
0001fa c004      	RJMP __MODW211
0001fb 95a0      	COM  R26
0001fc 95b0      	COM  R27
0001fd 9611      	ADIW R26,1
0001fe 9468      	SET
                 __MODW211:
0001ff fdf7      	SBRC R31,7
000200 dfc6      	RCALL __ANEGW1
000201 dfde      	RCALL __DIVW21U
000202 01fd      	MOVW R30,R26
000203 f40e      	BRTC __MODW212
000204 dfc2      	RCALL __ANEGW1
                 __MODW212:
000205 9508      	RET
                 
                 __MANDW12:
000206 94e8      	CLT
000207 fff7      	SBRS R31,7
000208 c002      	RJMP __MANDW121
000209 dfbd      	RCALL __ANEGW1
00020a 9468      	SET
                 __MANDW121:
00020b 23ea      	AND  R30,R26
00020c 23fb      	AND  R31,R27
00020d f40e      	BRTC __MANDW122
00020e dfb8      	RCALL __ANEGW1
                 __MANDW122:
00020f 9508      	RET
                 
                 __CHKSIGNW:
000210 94e8      	CLT
000211 fff7      	SBRS R31,7
000212 c002      	RJMP __CHKSW1
000213 dfb3      	RCALL __ANEGW1
000214 9468      	SET
                 __CHKSW1:
000215 ffb7      	SBRS R27,7
000216 c006      	RJMP __CHKSW2
000217 95a0      	COM  R26
000218 95b0      	COM  R27
000219 9611      	ADIW R26,1
00021a f800      	BLD  R0,0
00021b 9403      	INC  R0
00021c fa00      	BST  R0,0
                 __CHKSW2:
00021d 9508      	RET
                 
                 __SAVELOCR4:
00021e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00021f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000220 931a      	ST   -Y,R17
000221 930a      	ST   -Y,R16
000222 9508      	RET
                 
                 __LOADLOCR4:
000223 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000224 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000225 8119      	LDD  R17,Y+1
000226 8108      	LD   R16,Y
000227 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000228 0fac      	ADD  R26,R28
000229 1fbd      	ADC  R27,R29
                 __INITLOC0:
00022a 9005      	LPM  R0,Z+
00022b 920d      	ST   X+,R0
00022c 958a      	DEC  R24
00022d f7e1      	BRNE __INITLOC0
00022e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  32 r17:  26 r18:  14 r19:  13 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   4 r26:  62 r27:  29 r28:  14 r29:   2 r30: 115 r31:  45 
x  :   8 y  :  34 z  :   1 
Registers used: 17 out of 35 (48.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :  10 
adiw  :  13 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   2 brne  :   7 brpl  :   1 brsh  :   0 brtc  :   4 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  31 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   4 cpi   :   4 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   1 jmp   :  24 ld    :  10 ldd   :  12 ldi   : 114 
lds   :   0 lpm   :   1 lsl   :   2 lsr   :   0 mov   :   5 movw  :  24 
mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   1 out   :  28 pop   :   0 push  :   0 rcall :  35 ret   :  22 
reti  :   0 rjmp  :  22 rol   :   3 ror   :   0 sbc   :   3 sbci  :   8 
sbi   :   0 sbic  :   4 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  13 std   :   7 sts   :   0 sub   :   3 subi  :   7 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00045e   1088     30   1118   16384   6.8%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
